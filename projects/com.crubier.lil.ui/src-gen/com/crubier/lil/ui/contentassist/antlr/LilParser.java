/*
* generated by Xtext
*/
package com.crubier.lil.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.crubier.lil.services.LilGrammarAccess;

public class LilParser extends AbstractContentAssistParser {
	
	@Inject
	private LilGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.crubier.lil.ui.contentassist.antlr.internal.InternalLilParser createParser() {
		com.crubier.lil.ui.contentassist.antlr.internal.InternalLilParser result = new com.crubier.lil.ui.contentassist.antlr.internal.InternalLilParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getInteractorDeclarationAccess().getAlternatives_3(), "rule__InteractorDeclaration__Alternatives_3");
					put(grammarAccess.getAccessibleEntityAccess().getAlternatives(), "rule__AccessibleEntity__Alternatives");
					put(grammarAccess.getAccessibleEntityAccess().getGenericAlternatives_0_0(), "rule__AccessibleEntity__GenericAlternatives_0_0");
					put(grammarAccess.getEntityDeclarationAccess().getAlternatives(), "rule__EntityDeclaration__Alternatives");
					put(grammarAccess.getEventReceptionAccess().getAlternatives(), "rule__EventReception__Alternatives");
					put(grammarAccess.getSignalDeclarationAccess().getAlternatives(), "rule__SignalDeclaration__Alternatives");
					put(grammarAccess.getCauseAccess().getAlternatives(), "rule__Cause__Alternatives");
					put(grammarAccess.getEffectAccess().getAlternatives(), "rule__Effect__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getDataTypeBaseAccess().getAlternatives(), "rule__DataTypeBase__Alternatives");
					put(grammarAccess.getBooleanUnaryAccess().getAlternatives(), "rule__BooleanUnary__Alternatives");
					put(grammarAccess.getBooleanTerminalExpressionAccess().getAlternatives(), "rule__BooleanTerminalExpression__Alternatives");
					put(grammarAccess.getNumberCompoundExpressionAccess().getAlternatives(), "rule__NumberCompoundExpression__Alternatives");
					put(grammarAccess.getNumberAdditionAccess().getAlternatives_1_0(), "rule__NumberAddition__Alternatives_1_0");
					put(grammarAccess.getNumberMultiplicationAccess().getAlternatives_1_0(), "rule__NumberMultiplication__Alternatives_1_0");
					put(grammarAccess.getNumberUnaryAccess().getAlternatives(), "rule__NumberUnary__Alternatives");
					put(grammarAccess.getNumberTerminalExpressionAccess().getAlternatives(), "rule__NumberTerminalExpression__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
					put(grammarAccess.getTimeLiteralAccess().getAlternatives(), "rule__TimeLiteral__Alternatives");
					put(grammarAccess.getInteractorDeclarationAccess().getGroup(), "rule__InteractorDeclaration__Group__0");
					put(grammarAccess.getActorDeclarationAccess().getGroup(), "rule__ActorDeclaration__Group__0");
					put(grammarAccess.getActorAliasAccess().getGroup(), "rule__ActorAlias__Group__0");
					put(grammarAccess.getComponentDeclarationAccess().getGroup(), "rule__ComponentDeclaration__Group__0");
					put(grammarAccess.getComponentDeclarationAccess().getGroup_2(), "rule__ComponentDeclaration__Group_2__0");
					put(grammarAccess.getComponentDeclarationAccess().getGroup_2_2(), "rule__ComponentDeclaration__Group_2_2__0");
					put(grammarAccess.getEventReceptionAccess().getGroup_0(), "rule__EventReception__Group_0__0");
					put(grammarAccess.getEventReceptionAccess().getGroup_0_1(), "rule__EventReception__Group_0_1__0");
					put(grammarAccess.getFlowReceptionAccess().getGroup(), "rule__FlowReception__Group__0");
					put(grammarAccess.getFlowReceptionAccess().getGroup_1(), "rule__FlowReception__Group_1__0");
					put(grammarAccess.getEventEmissionAccess().getGroup(), "rule__EventEmission__Group__0");
					put(grammarAccess.getEventEmissionAccess().getGroup_1(), "rule__EventEmission__Group_1__0");
					put(grammarAccess.getFlowEmissionAccess().getGroup(), "rule__FlowEmission__Group__0");
					put(grammarAccess.getFlowEmissionAccess().getGroup_1(), "rule__FlowEmission__Group_1__0");
					put(grammarAccess.getEventDeclarationAccess().getGroup(), "rule__EventDeclaration__Group__0");
					put(grammarAccess.getEventDeclarationAccess().getGroup_3(), "rule__EventDeclaration__Group_3__0");
					put(grammarAccess.getEventDeclarationAccess().getGroup_4(), "rule__EventDeclaration__Group_4__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup(), "rule__FlowDeclaration__Group__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup_3(), "rule__FlowDeclaration__Group_3__0");
					put(grammarAccess.getFlowDeclarationAccess().getGroup_4(), "rule__FlowDeclaration__Group_4__0");
					put(grammarAccess.getBehaviorDeclarationAccess().getGroup(), "rule__BehaviorDeclaration__Group__0");
					put(grammarAccess.getOnCauseAccess().getGroup(), "rule__OnCause__Group__0");
					put(grammarAccess.getOnCauseAccess().getGroup_2(), "rule__OnCause__Group_2__0");
					put(grammarAccess.getWhenCauseAccess().getGroup(), "rule__WhenCause__Group__0");
					put(grammarAccess.getWhenCauseAccess().getGroup_2(), "rule__WhenCause__Group_2__0");
					put(grammarAccess.getAlwaysEffectAccess().getGroup(), "rule__AlwaysEffect__Group__0");
					put(grammarAccess.getSetEffectAccess().getGroup(), "rule__SetEffect__Group__0");
					put(grammarAccess.getTriggerEffectAccess().getGroup(), "rule__TriggerEffect__Group__0");
					put(grammarAccess.getDataTypeDeclarationAccess().getGroup(), "rule__DataTypeDeclaration__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getBooleanDisjonctionAccess().getGroup(), "rule__BooleanDisjonction__Group__0");
					put(grammarAccess.getBooleanDisjonctionAccess().getGroup_1(), "rule__BooleanDisjonction__Group_1__0");
					put(grammarAccess.getBooleanDisjonctionAccess().getGroup_1_0(), "rule__BooleanDisjonction__Group_1_0__0");
					put(grammarAccess.getBooleanConjonctionAccess().getGroup(), "rule__BooleanConjonction__Group__0");
					put(grammarAccess.getBooleanConjonctionAccess().getGroup_1(), "rule__BooleanConjonction__Group_1__0");
					put(grammarAccess.getBooleanConjonctionAccess().getGroup_1_0(), "rule__BooleanConjonction__Group_1_0__0");
					put(grammarAccess.getBooleanUnaryAccess().getGroup_1(), "rule__BooleanUnary__Group_1__0");
					put(grammarAccess.getBooleanUnaryAccess().getGroup_1_0(), "rule__BooleanUnary__Group_1_0__0");
					put(grammarAccess.getBooleanTerminalExpressionAccess().getGroup_0(), "rule__BooleanTerminalExpression__Group_0__0");
					put(grammarAccess.getBooleanTerminalExpressionAccess().getGroup_1(), "rule__BooleanTerminalExpression__Group_1__0");
					put(grammarAccess.getNumberCompoundExpressionAccess().getGroup_1(), "rule__NumberCompoundExpression__Group_1__0");
					put(grammarAccess.getNumberCompoundExpressionAccess().getGroup_1_6(), "rule__NumberCompoundExpression__Group_1_6__0");
					put(grammarAccess.getNumberCompoundExpressionAccess().getGroup_2(), "rule__NumberCompoundExpression__Group_2__0");
					put(grammarAccess.getNumberCompoundExpressionAccess().getGroup_2_6(), "rule__NumberCompoundExpression__Group_2_6__0");
					put(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getGroup(), "rule__NumberSwitchExpressionNumberCase__Group__0");
					put(grammarAccess.getNumberAdditionAccess().getGroup(), "rule__NumberAddition__Group__0");
					put(grammarAccess.getNumberAdditionAccess().getGroup_1(), "rule__NumberAddition__Group_1__0");
					put(grammarAccess.getNumberAdditionAccess().getGroup_1_0_0(), "rule__NumberAddition__Group_1_0_0__0");
					put(grammarAccess.getNumberAdditionAccess().getGroup_1_0_1(), "rule__NumberAddition__Group_1_0_1__0");
					put(grammarAccess.getNumberMultiplicationAccess().getGroup(), "rule__NumberMultiplication__Group__0");
					put(grammarAccess.getNumberMultiplicationAccess().getGroup_1(), "rule__NumberMultiplication__Group_1__0");
					put(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_0(), "rule__NumberMultiplication__Group_1_0_0__0");
					put(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_1(), "rule__NumberMultiplication__Group_1_0_1__0");
					put(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_2(), "rule__NumberMultiplication__Group_1_0_2__0");
					put(grammarAccess.getNumberPowerAccess().getGroup(), "rule__NumberPower__Group__0");
					put(grammarAccess.getNumberPowerAccess().getGroup_1(), "rule__NumberPower__Group_1__0");
					put(grammarAccess.getNumberPowerAccess().getGroup_1_0(), "rule__NumberPower__Group_1_0__0");
					put(grammarAccess.getNumberUnaryAccess().getGroup_1(), "rule__NumberUnary__Group_1__0");
					put(grammarAccess.getNumberUnaryAccess().getGroup_1_0(), "rule__NumberUnary__Group_1_0__0");
					put(grammarAccess.getNumberTerminalExpressionAccess().getGroup_0(), "rule__NumberTerminalExpression__Group_0__0");
					put(grammarAccess.getNumberTerminalExpressionAccess().getGroup_1(), "rule__NumberTerminalExpression__Group_1__0");
					put(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2(), "rule__NumberTerminalExpression__Group_2__0");
					put(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2_2(), "rule__NumberTerminalExpression__Group_2_2__0");
					put(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2_2_2(), "rule__NumberTerminalExpression__Group_2_2_2__0");
					put(grammarAccess.getNumberLiteralAccess().getGroup(), "rule__NumberLiteral__Group__0");
					put(grammarAccess.getNumberLiteralAccess().getGroup_1(), "rule__NumberLiteral__Group_1__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_0(), "rule__TimeLiteral__Group_0__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_1(), "rule__TimeLiteral__Group_1__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_1_1(), "rule__TimeLiteral__Group_1_1__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_2(), "rule__TimeLiteral__Group_2__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_2_1(), "rule__TimeLiteral__Group_2_1__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_3(), "rule__TimeLiteral__Group_3__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_3_1(), "rule__TimeLiteral__Group_3_1__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_4(), "rule__TimeLiteral__Group_4__0");
					put(grammarAccess.getTimeLiteralAccess().getGroup_4_1(), "rule__TimeLiteral__Group_4_1__0");
					put(grammarAccess.getModelAccess().getInteractorsAssignment_0(), "rule__Model__InteractorsAssignment_0");
					put(grammarAccess.getModelAccess().getDataTypesAssignment_1(), "rule__Model__DataTypesAssignment_1");
					put(grammarAccess.getInteractorDeclarationAccess().getNameAssignment_1(), "rule__InteractorDeclaration__NameAssignment_1");
					put(grammarAccess.getInteractorDeclarationAccess().getEntitiesAssignment_3_0(), "rule__InteractorDeclaration__EntitiesAssignment_3_0");
					put(grammarAccess.getInteractorDeclarationAccess().getSignalsAssignment_3_1(), "rule__InteractorDeclaration__SignalsAssignment_3_1");
					put(grammarAccess.getInteractorDeclarationAccess().getBehaviorsAssignment_3_2(), "rule__InteractorDeclaration__BehaviorsAssignment_3_2");
					put(grammarAccess.getAccessibleEntityAccess().getGenericAssignment_0(), "rule__AccessibleEntity__GenericAssignment_0");
					put(grammarAccess.getAccessibleEntityAccess().getSpecificAssignment_1(), "rule__AccessibleEntity__SpecificAssignment_1");
					put(grammarAccess.getEntityAccess().getInstanceAssignment(), "rule__Entity__InstanceAssignment");
					put(grammarAccess.getActorAccess().getInstanceAssignment(), "rule__Actor__InstanceAssignment");
					put(grammarAccess.getComponentAccess().getInstanceAssignment(), "rule__Component__InstanceAssignment");
					put(grammarAccess.getActorDeclarationAccess().getNameAssignment_1(), "rule__ActorDeclaration__NameAssignment_1");
					put(grammarAccess.getActorAliasAccess().getSourceAssignment_0(), "rule__ActorAlias__SourceAssignment_0");
					put(grammarAccess.getActorAliasAccess().getRemoteAssignment_2(), "rule__ActorAlias__RemoteAssignment_2");
					put(grammarAccess.getComponentDeclarationAccess().getInteractorAssignment_0(), "rule__ComponentDeclaration__InteractorAssignment_0");
					put(grammarAccess.getComponentDeclarationAccess().getNameAssignment_1(), "rule__ComponentDeclaration__NameAssignment_1");
					put(grammarAccess.getComponentDeclarationAccess().getAliasesAssignment_2_1(), "rule__ComponentDeclaration__AliasesAssignment_2_1");
					put(grammarAccess.getComponentDeclarationAccess().getAliasesAssignment_2_2_1(), "rule__ComponentDeclaration__AliasesAssignment_2_2_1");
					put(grammarAccess.getEventReceptionAccess().getInstanceAssignment_0_0(), "rule__EventReception__InstanceAssignment_0_0");
					put(grammarAccess.getEventReceptionAccess().getSourceAssignment_0_1_1(), "rule__EventReception__SourceAssignment_0_1_1");
					put(grammarAccess.getEventReceptionAccess().getBaseAssignment_1(), "rule__EventReception__BaseAssignment_1");
					put(grammarAccess.getFlowReceptionAccess().getInstanceAssignment_0(), "rule__FlowReception__InstanceAssignment_0");
					put(grammarAccess.getFlowReceptionAccess().getSourceAssignment_1_1(), "rule__FlowReception__SourceAssignment_1_1");
					put(grammarAccess.getEventEmissionAccess().getInstanceAssignment_0(), "rule__EventEmission__InstanceAssignment_0");
					put(grammarAccess.getEventEmissionAccess().getDestinationAssignment_1_1(), "rule__EventEmission__DestinationAssignment_1_1");
					put(grammarAccess.getFlowEmissionAccess().getInstanceAssignment_0(), "rule__FlowEmission__InstanceAssignment_0");
					put(grammarAccess.getFlowEmissionAccess().getDestinationAssignment_1_1(), "rule__FlowEmission__DestinationAssignment_1_1");
					put(grammarAccess.getEventDeclarationAccess().getTypeAssignment_0(), "rule__EventDeclaration__TypeAssignment_0");
					put(grammarAccess.getEventDeclarationAccess().getNameAssignment_2(), "rule__EventDeclaration__NameAssignment_2");
					put(grammarAccess.getEventDeclarationAccess().getSourceAssignment_3_1(), "rule__EventDeclaration__SourceAssignment_3_1");
					put(grammarAccess.getEventDeclarationAccess().getDestinationsAssignment_4_1(), "rule__EventDeclaration__DestinationsAssignment_4_1");
					put(grammarAccess.getFlowDeclarationAccess().getTypeAssignment_0(), "rule__FlowDeclaration__TypeAssignment_0");
					put(grammarAccess.getFlowDeclarationAccess().getNameAssignment_2(), "rule__FlowDeclaration__NameAssignment_2");
					put(grammarAccess.getFlowDeclarationAccess().getSourceAssignment_3_1(), "rule__FlowDeclaration__SourceAssignment_3_1");
					put(grammarAccess.getFlowDeclarationAccess().getDestinationsAssignment_4_1(), "rule__FlowDeclaration__DestinationsAssignment_4_1");
					put(grammarAccess.getBehaviorDeclarationAccess().getCauseAssignment_0(), "rule__BehaviorDeclaration__CauseAssignment_0");
					put(grammarAccess.getBehaviorDeclarationAccess().getEffectsAssignment_2(), "rule__BehaviorDeclaration__EffectsAssignment_2");
					put(grammarAccess.getOnCauseAccess().getEventAssignment_1(), "rule__OnCause__EventAssignment_1");
					put(grammarAccess.getOnCauseAccess().getGuardAssignment_2_1(), "rule__OnCause__GuardAssignment_2_1");
					put(grammarAccess.getWhenCauseAccess().getConditionAssignment_1(), "rule__WhenCause__ConditionAssignment_1");
					put(grammarAccess.getWhenCauseAccess().getGuardAssignment_2_1(), "rule__WhenCause__GuardAssignment_2_1");
					put(grammarAccess.getAlwaysEffectAccess().getTargetAssignment_1(), "rule__AlwaysEffect__TargetAssignment_1");
					put(grammarAccess.getAlwaysEffectAccess().getValueAssignment_3(), "rule__AlwaysEffect__ValueAssignment_3");
					put(grammarAccess.getSetEffectAccess().getTargetAssignment_1(), "rule__SetEffect__TargetAssignment_1");
					put(grammarAccess.getSetEffectAccess().getValueAssignment_3(), "rule__SetEffect__ValueAssignment_3");
					put(grammarAccess.getTriggerEffectAccess().getTargetAssignment_1(), "rule__TriggerEffect__TargetAssignment_1");
					put(grammarAccess.getTriggerEffectAccess().getValueAssignment_3(), "rule__TriggerEffect__ValueAssignment_3");
					put(grammarAccess.getDataTypeDeclarationAccess().getNameAssignment_2(), "rule__DataTypeDeclaration__NameAssignment_2");
					put(grammarAccess.getDataTypeDeclarationAccess().getFieldsAssignment_4(), "rule__DataTypeDeclaration__FieldsAssignment_4");
					put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getDataTypeAccess().getCompoundAssignment_0(), "rule__DataType__CompoundAssignment_0");
					put(grammarAccess.getDataTypeAccess().getBaseAssignment_1(), "rule__DataType__BaseAssignment_1");
					put(grammarAccess.getBooleanDisjonctionAccess().getRightAssignment_1_1(), "rule__BooleanDisjonction__RightAssignment_1_1");
					put(grammarAccess.getBooleanConjonctionAccess().getRightAssignment_1_1(), "rule__BooleanConjonction__RightAssignment_1_1");
					put(grammarAccess.getBooleanUnaryAccess().getOperandAssignment_1_1(), "rule__BooleanUnary__OperandAssignment_1_1");
					put(grammarAccess.getBooleanTerminalExpressionAccess().getValueAssignment_1_1(), "rule__BooleanTerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getNumberCompoundExpressionAccess().getIfAssignment_1_3(), "rule__NumberCompoundExpression__IfAssignment_1_3");
					put(grammarAccess.getNumberCompoundExpressionAccess().getThenAssignment_1_5(), "rule__NumberCompoundExpression__ThenAssignment_1_5");
					put(grammarAccess.getNumberCompoundExpressionAccess().getElseAssignment_1_6_1(), "rule__NumberCompoundExpression__ElseAssignment_1_6_1");
					put(grammarAccess.getNumberCompoundExpressionAccess().getSwitchAssignment_2_3(), "rule__NumberCompoundExpression__SwitchAssignment_2_3");
					put(grammarAccess.getNumberCompoundExpressionAccess().getCasesAssignment_2_5(), "rule__NumberCompoundExpression__CasesAssignment_2_5");
					put(grammarAccess.getNumberCompoundExpressionAccess().getDefaultAssignment_2_6_2(), "rule__NumberCompoundExpression__DefaultAssignment_2_6_2");
					put(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getConditionAssignment_1(), "rule__NumberSwitchExpressionNumberCase__ConditionAssignment_1");
					put(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getValueAssignment_3(), "rule__NumberSwitchExpressionNumberCase__ValueAssignment_3");
					put(grammarAccess.getNumberAdditionAccess().getRightAssignment_1_1(), "rule__NumberAddition__RightAssignment_1_1");
					put(grammarAccess.getNumberMultiplicationAccess().getRightAssignment_1_1(), "rule__NumberMultiplication__RightAssignment_1_1");
					put(grammarAccess.getNumberPowerAccess().getRightAssignment_1_1(), "rule__NumberPower__RightAssignment_1_1");
					put(grammarAccess.getNumberUnaryAccess().getOperandAssignment_1_1(), "rule__NumberUnary__OperandAssignment_1_1");
					put(grammarAccess.getNumberTerminalExpressionAccess().getValueAssignment_1_1(), "rule__NumberTerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getNumberTerminalExpressionAccess().getFunctionAssignment_2_1(), "rule__NumberTerminalExpression__FunctionAssignment_2_1");
					put(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsAssignment_2_2_1(), "rule__NumberTerminalExpression__ArgumentsAssignment_2_2_1");
					put(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsAssignment_2_2_2_1(), "rule__NumberTerminalExpression__ArgumentsAssignment_2_2_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.crubier.lil.ui.contentassist.antlr.internal.InternalLilParser typedParser = (com.crubier.lil.ui.contentassist.antlr.internal.InternalLilParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LilGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LilGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
