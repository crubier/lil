/*
* generated by Xtext
*/
grammar InternalLil;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package com.crubier.lil.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.crubier.lil.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.crubier.lil.services.LilGrammarAccess;

}

@parser::members {
 
 	private LilGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LilGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAlternatives()); }
(rule__Model__Alternatives)*
{ after(grammarAccess.getModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteractorDeclaration
entryRuleInteractorDeclaration 
:
{ before(grammarAccess.getInteractorDeclarationRule()); }
	 ruleInteractorDeclaration
{ after(grammarAccess.getInteractorDeclarationRule()); } 
	 EOF 
;

// Rule InteractorDeclaration
ruleInteractorDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getGroup()); }
(rule__InteractorDeclaration__Group__0)
{ after(grammarAccess.getInteractorDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessibleEntity
entryRuleAccessibleEntity 
:
{ before(grammarAccess.getAccessibleEntityRule()); }
	 ruleAccessibleEntity
{ after(grammarAccess.getAccessibleEntityRule()); } 
	 EOF 
;

// Rule AccessibleEntity
ruleAccessibleEntity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAccessibleEntityAccess().getAlternatives()); }
(rule__AccessibleEntity__Alternatives)
{ after(grammarAccess.getAccessibleEntityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntity
entryRuleEntity 
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntityAccess().getInstanceAssignment()); }
(rule__Entity__InstanceAssignment)
{ after(grammarAccess.getEntityAccess().getInstanceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActor
entryRuleActor 
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActorAccess().getInstanceAssignment()); }
(rule__Actor__InstanceAssignment)
{ after(grammarAccess.getActorAccess().getInstanceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponent
entryRuleComponent 
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentAccess().getInstanceAssignment()); }
(rule__Component__InstanceAssignment)
{ after(grammarAccess.getComponentAccess().getInstanceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntityDeclaration
entryRuleEntityDeclaration 
:
{ before(grammarAccess.getEntityDeclarationRule()); }
	 ruleEntityDeclaration
{ after(grammarAccess.getEntityDeclarationRule()); } 
	 EOF 
;

// Rule EntityDeclaration
ruleEntityDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntityDeclarationAccess().getAlternatives()); }
(rule__EntityDeclaration__Alternatives)
{ after(grammarAccess.getEntityDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActorDeclaration
entryRuleActorDeclaration 
:
{ before(grammarAccess.getActorDeclarationRule()); }
	 ruleActorDeclaration
{ after(grammarAccess.getActorDeclarationRule()); } 
	 EOF 
;

// Rule ActorDeclaration
ruleActorDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActorDeclarationAccess().getGroup()); }
(rule__ActorDeclaration__Group__0)
{ after(grammarAccess.getActorDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActorAlias
entryRuleActorAlias 
:
{ before(grammarAccess.getActorAliasRule()); }
	 ruleActorAlias
{ after(grammarAccess.getActorAliasRule()); } 
	 EOF 
;

// Rule ActorAlias
ruleActorAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActorAliasAccess().getGroup()); }
(rule__ActorAlias__Group__0)
{ after(grammarAccess.getActorAliasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentDeclaration
entryRuleComponentDeclaration 
:
{ before(grammarAccess.getComponentDeclarationRule()); }
	 ruleComponentDeclaration
{ after(grammarAccess.getComponentDeclarationRule()); } 
	 EOF 
;

// Rule ComponentDeclaration
ruleComponentDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentDeclarationAccess().getGroup()); }
(rule__ComponentDeclaration__Group__0)
{ after(grammarAccess.getComponentDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventReception
entryRuleEventReception 
:
{ before(grammarAccess.getEventReceptionRule()); }
	 ruleEventReception
{ after(grammarAccess.getEventReceptionRule()); } 
	 EOF 
;

// Rule EventReception
ruleEventReception
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventReceptionAccess().getAlternatives()); }
(rule__EventReception__Alternatives)
{ after(grammarAccess.getEventReceptionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEventEmission
entryRuleEventEmission 
:
{ before(grammarAccess.getEventEmissionRule()); }
	 ruleEventEmission
{ after(grammarAccess.getEventEmissionRule()); } 
	 EOF 
;

// Rule EventEmission
ruleEventEmission
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventEmissionAccess().getGroup()); }
(rule__EventEmission__Group__0)
{ after(grammarAccess.getEventEmissionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowEmission
entryRuleFlowEmission 
:
{ before(grammarAccess.getFlowEmissionRule()); }
	 ruleFlowEmission
{ after(grammarAccess.getFlowEmissionRule()); } 
	 EOF 
;

// Rule FlowEmission
ruleFlowEmission
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowEmissionAccess().getGroup()); }
(rule__FlowEmission__Group__0)
{ after(grammarAccess.getFlowEmissionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalDeclaration
entryRuleSignalDeclaration 
:
{ before(grammarAccess.getSignalDeclarationRule()); }
	 ruleSignalDeclaration
{ after(grammarAccess.getSignalDeclarationRule()); } 
	 EOF 
;

// Rule SignalDeclaration
ruleSignalDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalDeclarationAccess().getAlternatives()); }
(rule__SignalDeclaration__Alternatives)
{ after(grammarAccess.getSignalDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration 
:
{ before(grammarAccess.getEventDeclarationRule()); }
	 ruleEventDeclaration
{ after(grammarAccess.getEventDeclarationRule()); } 
	 EOF 
;

// Rule EventDeclaration
ruleEventDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup()); }
(rule__EventDeclaration__Group__0)
{ after(grammarAccess.getEventDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowDeclaration
entryRuleFlowDeclaration 
:
{ before(grammarAccess.getFlowDeclarationRule()); }
	 ruleFlowDeclaration
{ after(grammarAccess.getFlowDeclarationRule()); } 
	 EOF 
;

// Rule FlowDeclaration
ruleFlowDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup()); }
(rule__FlowDeclaration__Group__0)
{ after(grammarAccess.getFlowDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBehaviorDeclaration
entryRuleBehaviorDeclaration 
:
{ before(grammarAccess.getBehaviorDeclarationRule()); }
	 ruleBehaviorDeclaration
{ after(grammarAccess.getBehaviorDeclarationRule()); } 
	 EOF 
;

// Rule BehaviorDeclaration
ruleBehaviorDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getGroup()); }
(rule__BehaviorDeclaration__Group__0)
{ after(grammarAccess.getBehaviorDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCause
entryRuleCause 
:
{ before(grammarAccess.getCauseRule()); }
	 ruleCause
{ after(grammarAccess.getCauseRule()); } 
	 EOF 
;

// Rule Cause
ruleCause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCauseAccess().getAlternatives()); }
(rule__Cause__Alternatives)
{ after(grammarAccess.getCauseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOnCause
entryRuleOnCause 
:
{ before(grammarAccess.getOnCauseRule()); }
	 ruleOnCause
{ after(grammarAccess.getOnCauseRule()); } 
	 EOF 
;

// Rule OnCause
ruleOnCause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOnCauseAccess().getGroup()); }
(rule__OnCause__Group__0)
{ after(grammarAccess.getOnCauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhenCause
entryRuleWhenCause 
:
{ before(grammarAccess.getWhenCauseRule()); }
	 ruleWhenCause
{ after(grammarAccess.getWhenCauseRule()); } 
	 EOF 
;

// Rule WhenCause
ruleWhenCause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhenCauseAccess().getGroup()); }
(rule__WhenCause__Group__0)
{ after(grammarAccess.getWhenCauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEffect
entryRuleEffect 
:
{ before(grammarAccess.getEffectRule()); }
	 ruleEffect
{ after(grammarAccess.getEffectRule()); } 
	 EOF 
;

// Rule Effect
ruleEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffectAccess().getAlternatives()); }
(rule__Effect__Alternatives)
{ after(grammarAccess.getEffectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlwaysEffect
entryRuleAlwaysEffect 
:
{ before(grammarAccess.getAlwaysEffectRule()); }
	 ruleAlwaysEffect
{ after(grammarAccess.getAlwaysEffectRule()); } 
	 EOF 
;

// Rule AlwaysEffect
ruleAlwaysEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlwaysEffectAccess().getGroup()); }
(rule__AlwaysEffect__Group__0)
{ after(grammarAccess.getAlwaysEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetEffect
entryRuleSetEffect 
:
{ before(grammarAccess.getSetEffectRule()); }
	 ruleSetEffect
{ after(grammarAccess.getSetEffectRule()); } 
	 EOF 
;

// Rule SetEffect
ruleSetEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetEffectAccess().getGroup()); }
(rule__SetEffect__Group__0)
{ after(grammarAccess.getSetEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTriggerEffect
entryRuleTriggerEffect 
:
{ before(grammarAccess.getTriggerEffectRule()); }
	 ruleTriggerEffect
{ after(grammarAccess.getTriggerEffectRule()); } 
	 EOF 
;

// Rule TriggerEffect
ruleTriggerEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTriggerEffectAccess().getGroup()); }
(rule__TriggerEffect__Group__0)
{ after(grammarAccess.getTriggerEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall()); }
	ruleNumberExpression
{ after(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeDeclaration
entryRuleDataTypeDeclaration 
:
{ before(grammarAccess.getDataTypeDeclarationRule()); }
	 ruleDataTypeDeclaration
{ after(grammarAccess.getDataTypeDeclarationRule()); } 
	 EOF 
;

// Rule DataTypeDeclaration
ruleDataTypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getGroup()); }
(rule__DataTypeDeclaration__Group__0)
{ after(grammarAccess.getDataTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataType
entryRuleDataType 
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
(rule__DataType__Alternatives)
{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeBase
entryRuleDataTypeBase 
:
{ before(grammarAccess.getDataTypeBaseRule()); }
	 ruleDataTypeBase
{ after(grammarAccess.getDataTypeBaseRule()); } 
	 EOF 
;

// Rule DataTypeBase
ruleDataTypeBase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeBaseAccess().getAlternatives()); }
(rule__DataTypeBase__Alternatives)
{ after(grammarAccess.getDataTypeBaseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getBooleanDisjonctionParserRuleCall()); }
	ruleBooleanDisjonction
{ after(grammarAccess.getBooleanExpressionAccess().getBooleanDisjonctionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanDisjonction
entryRuleBooleanDisjonction 
:
{ before(grammarAccess.getBooleanDisjonctionRule()); }
	 ruleBooleanDisjonction
{ after(grammarAccess.getBooleanDisjonctionRule()); } 
	 EOF 
;

// Rule BooleanDisjonction
ruleBooleanDisjonction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getGroup()); }
(rule__BooleanDisjonction__Group__0)
{ after(grammarAccess.getBooleanDisjonctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanConjonction
entryRuleBooleanConjonction 
:
{ before(grammarAccess.getBooleanConjonctionRule()); }
	 ruleBooleanConjonction
{ after(grammarAccess.getBooleanConjonctionRule()); } 
	 EOF 
;

// Rule BooleanConjonction
ruleBooleanConjonction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getGroup()); }
(rule__BooleanConjonction__Group__0)
{ after(grammarAccess.getBooleanConjonctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanUnary
entryRuleBooleanUnary 
:
{ before(grammarAccess.getBooleanUnaryRule()); }
	 ruleBooleanUnary
{ after(grammarAccess.getBooleanUnaryRule()); } 
	 EOF 
;

// Rule BooleanUnary
ruleBooleanUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanUnaryAccess().getAlternatives()); }
(rule__BooleanUnary__Alternatives)
{ after(grammarAccess.getBooleanUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanTerminalExpression
entryRuleBooleanTerminalExpression 
:
{ before(grammarAccess.getBooleanTerminalExpressionRule()); }
	 ruleBooleanTerminalExpression
{ after(grammarAccess.getBooleanTerminalExpressionRule()); } 
	 EOF 
;

// Rule BooleanTerminalExpression
ruleBooleanTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getAlternatives()); }
(rule__BooleanTerminalExpression__Alternatives)
{ after(grammarAccess.getBooleanTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberExpression
entryRuleNumberExpression 
:
{ before(grammarAccess.getNumberExpressionRule()); }
	 ruleNumberExpression
{ after(grammarAccess.getNumberExpressionRule()); } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberExpressionAccess().getNumberCompoundExpressionParserRuleCall()); }
	ruleNumberCompoundExpression
{ after(grammarAccess.getNumberExpressionAccess().getNumberCompoundExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberCompoundExpression
entryRuleNumberCompoundExpression 
:
{ before(grammarAccess.getNumberCompoundExpressionRule()); }
	 ruleNumberCompoundExpression
{ after(grammarAccess.getNumberCompoundExpressionRule()); } 
	 EOF 
;

// Rule NumberCompoundExpression
ruleNumberCompoundExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getAlternatives()); }
(rule__NumberCompoundExpression__Alternatives)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberSwitchExpressionNumberCase
entryRuleNumberSwitchExpressionNumberCase 
:
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseRule()); }
	 ruleNumberSwitchExpressionNumberCase
{ after(grammarAccess.getNumberSwitchExpressionNumberCaseRule()); } 
	 EOF 
;

// Rule NumberSwitchExpressionNumberCase
ruleNumberSwitchExpressionNumberCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getGroup()); }
(rule__NumberSwitchExpressionNumberCase__Group__0)
{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberAddition
entryRuleNumberAddition 
:
{ before(grammarAccess.getNumberAdditionRule()); }
	 ruleNumberAddition
{ after(grammarAccess.getNumberAdditionRule()); } 
	 EOF 
;

// Rule NumberAddition
ruleNumberAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAdditionAccess().getGroup()); }
(rule__NumberAddition__Group__0)
{ after(grammarAccess.getNumberAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberMultiplication
entryRuleNumberMultiplication 
:
{ before(grammarAccess.getNumberMultiplicationRule()); }
	 ruleNumberMultiplication
{ after(grammarAccess.getNumberMultiplicationRule()); } 
	 EOF 
;

// Rule NumberMultiplication
ruleNumberMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getGroup()); }
(rule__NumberMultiplication__Group__0)
{ after(grammarAccess.getNumberMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberPower
entryRuleNumberPower 
:
{ before(grammarAccess.getNumberPowerRule()); }
	 ruleNumberPower
{ after(grammarAccess.getNumberPowerRule()); } 
	 EOF 
;

// Rule NumberPower
ruleNumberPower
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberPowerAccess().getGroup()); }
(rule__NumberPower__Group__0)
{ after(grammarAccess.getNumberPowerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberUnary
entryRuleNumberUnary 
:
{ before(grammarAccess.getNumberUnaryRule()); }
	 ruleNumberUnary
{ after(grammarAccess.getNumberUnaryRule()); } 
	 EOF 
;

// Rule NumberUnary
ruleNumberUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberUnaryAccess().getAlternatives()); }
(rule__NumberUnary__Alternatives)
{ after(grammarAccess.getNumberUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberTerminalExpression
entryRuleNumberTerminalExpression 
:
{ before(grammarAccess.getNumberTerminalExpressionRule()); }
	 ruleNumberTerminalExpression
{ after(grammarAccess.getNumberTerminalExpressionRule()); } 
	 EOF 
;

// Rule NumberTerminalExpression
ruleNumberTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getAlternatives()); }
(rule__NumberTerminalExpression__Alternatives)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
(rule__BooleanLiteral__Alternatives)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getGroup()); }
(rule__NumberLiteral__Group__0)
{ after(grammarAccess.getNumberLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Model__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getInteractorsAssignment_0()); }
(rule__Model__InteractorsAssignment_0)
{ after(grammarAccess.getModelAccess().getInteractorsAssignment_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getDataTypesAssignment_1()); }
(rule__Model__DataTypesAssignment_1)
{ after(grammarAccess.getModelAccess().getDataTypesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getEntitiesAssignment_3_0()); }
(rule__InteractorDeclaration__EntitiesAssignment_3_0)
{ after(grammarAccess.getInteractorDeclarationAccess().getEntitiesAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getInteractorDeclarationAccess().getSignalsAssignment_3_1()); }
(rule__InteractorDeclaration__SignalsAssignment_3_1)
{ after(grammarAccess.getInteractorDeclarationAccess().getSignalsAssignment_3_1()); }
)

    |(
{ before(grammarAccess.getInteractorDeclarationAccess().getBehaviorsAssignment_3_2()); }
(rule__InteractorDeclaration__BehaviorsAssignment_3_2)
{ after(grammarAccess.getInteractorDeclarationAccess().getBehaviorsAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessibleEntity__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericAssignment_0()); }
(rule__AccessibleEntity__GenericAssignment_0)
{ after(grammarAccess.getAccessibleEntityAccess().getGenericAssignment_0()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getSpecificAssignment_1()); }
(rule__AccessibleEntity__SpecificAssignment_1)
{ after(grammarAccess.getAccessibleEntityAccess().getSpecificAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessibleEntity__GenericAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericAnyKeyword_0_0_0()); }

	'any' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericAnyKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericSelfKeyword_0_0_1()); }

	'self' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericSelfKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericOtherKeyword_0_0_2()); }

	'other' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericOtherKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericParentKeyword_0_0_3()); }

	'parent' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericParentKeyword_0_0_3()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericChildKeyword_0_0_4()); }

	'child' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericChildKeyword_0_0_4()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericAllKeyword_0_0_5()); }

	'all' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericAllKeyword_0_0_5()); }
)

    |(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericActorsKeyword_0_0_6()); }

	'actors' 

{ after(grammarAccess.getAccessibleEntityAccess().getGenericActorsKeyword_0_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityDeclarationAccess().getActorDeclarationParserRuleCall_0()); }
	ruleActorDeclaration
{ after(grammarAccess.getEntityDeclarationAccess().getActorDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEntityDeclarationAccess().getComponentDeclarationParserRuleCall_1()); }
	ruleComponentDeclaration
{ after(grammarAccess.getEntityDeclarationAccess().getComponentDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getGroup_0()); }
(rule__EventReception__Group_0__0)
{ after(grammarAccess.getEventReceptionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getEventReceptionAccess().getBaseAssignment_1()); }
(rule__EventReception__BaseAssignment_1)
{ after(grammarAccess.getEventReceptionAccess().getBaseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getEventDeclarationParserRuleCall_0()); }
	ruleEventDeclaration
{ after(grammarAccess.getSignalDeclarationAccess().getEventDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSignalDeclarationAccess().getFlowDeclarationParserRuleCall_1()); }
	ruleFlowDeclaration
{ after(grammarAccess.getSignalDeclarationAccess().getFlowDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cause__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCauseAccess().getOnCauseParserRuleCall_0()); }
	ruleOnCause
{ after(grammarAccess.getCauseAccess().getOnCauseParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCauseAccess().getWhenCauseParserRuleCall_1()); }
	ruleWhenCause
{ after(grammarAccess.getCauseAccess().getWhenCauseParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Effect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectAccess().getAlwaysEffectParserRuleCall_0()); }
	ruleAlwaysEffect
{ after(grammarAccess.getEffectAccess().getAlwaysEffectParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getSetEffectParserRuleCall_1()); }
	ruleSetEffect
{ after(grammarAccess.getEffectAccess().getSetEffectParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getTriggerEffectParserRuleCall_2()); }
	ruleTriggerEffect
{ after(grammarAccess.getEffectAccess().getTriggerEffectParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getCompoundAssignment_0()); }
(rule__DataType__CompoundAssignment_0)
{ after(grammarAccess.getDataTypeAccess().getCompoundAssignment_0()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getBaseAssignment_1()); }
(rule__DataType__BaseAssignment_1)
{ after(grammarAccess.getDataTypeAccess().getBaseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeBase__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeBaseAccess().getVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getDataTypeBaseAccess().getVoidKeyword_0()); }
)

    |(
{ before(grammarAccess.getDataTypeBaseAccess().getSymbolKeyword_1()); }

	'symbol' 

{ after(grammarAccess.getDataTypeBaseAccess().getSymbolKeyword_1()); }
)

    |(
{ before(grammarAccess.getDataTypeBaseAccess().getNumberKeyword_2()); }

	'number' 

{ after(grammarAccess.getDataTypeBaseAccess().getNumberKeyword_2()); }
)

    |(
{ before(grammarAccess.getDataTypeBaseAccess().getTextKeyword_3()); }

	'text' 

{ after(grammarAccess.getDataTypeBaseAccess().getTextKeyword_3()); }
)

    |(
{ before(grammarAccess.getDataTypeBaseAccess().getTimeKeyword_4()); }

	'time' 

{ after(grammarAccess.getDataTypeBaseAccess().getTimeKeyword_4()); }
)

    |(
{ before(grammarAccess.getDataTypeBaseAccess().getReferenceKeyword_5()); }

	'reference' 

{ after(grammarAccess.getDataTypeBaseAccess().getReferenceKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnaryAccess().getBooleanTerminalExpressionParserRuleCall_0()); }
	ruleBooleanTerminalExpression
{ after(grammarAccess.getBooleanUnaryAccess().getBooleanTerminalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBooleanUnaryAccess().getGroup_1()); }
(rule__BooleanUnary__Group_1__0)
{ after(grammarAccess.getBooleanUnaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getGroup_0()); }
(rule__BooleanTerminalExpression__Group_0__0)
{ after(grammarAccess.getBooleanTerminalExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getGroup_1()); }
(rule__BooleanTerminalExpression__Group_1__0)
{ after(grammarAccess.getBooleanTerminalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getNumberAdditionParserRuleCall_0()); }
	ruleNumberAddition
{ after(grammarAccess.getNumberCompoundExpressionAccess().getNumberAdditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getGroup_1()); }
(rule__NumberCompoundExpression__Group_1__0)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getGroup_2()); }
(rule__NumberCompoundExpression__Group_2__0)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getGroup_1_0_0()); }
(rule__NumberAddition__Group_1_0_0__0)
{ after(grammarAccess.getNumberAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getNumberAdditionAccess().getGroup_1_0_1()); }
(rule__NumberAddition__Group_1_0_1__0)
{ after(grammarAccess.getNumberAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_0()); }
(rule__NumberMultiplication__Group_1_0_0__0)
{ after(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_1()); }
(rule__NumberMultiplication__Group_1_0_1__0)
{ after(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_2()); }
(rule__NumberMultiplication__Group_1_0_2__0)
{ after(grammarAccess.getNumberMultiplicationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberUnary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberUnaryAccess().getNumberTerminalExpressionParserRuleCall_0()); }
	ruleNumberTerminalExpression
{ after(grammarAccess.getNumberUnaryAccess().getNumberTerminalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberUnaryAccess().getGroup_1()); }
(rule__NumberUnary__Group_1__0)
{ after(grammarAccess.getNumberUnaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getGroup_0()); }
(rule__NumberTerminalExpression__Group_0__0)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getGroup_1()); }
(rule__NumberTerminalExpression__Group_1__0)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2()); }
(rule__NumberTerminalExpression__Group_2__0)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getYesKeyword_1()); }

	'yes' 

{ after(grammarAccess.getBooleanLiteralAccess().getYesKeyword_1()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_2()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_2()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getNoKeyword_3()); }

	'no' 

{ after(grammarAccess.getBooleanLiteralAccess().getNoKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__InteractorDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InteractorDeclaration__Group__0__Impl
	rule__InteractorDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getInteractorKeyword_0()); }

	'interactor' 

{ after(grammarAccess.getInteractorDeclarationAccess().getInteractorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InteractorDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InteractorDeclaration__Group__1__Impl
	rule__InteractorDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getNameAssignment_1()); }
(rule__InteractorDeclaration__NameAssignment_1)
{ after(grammarAccess.getInteractorDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InteractorDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InteractorDeclaration__Group__2__Impl
	rule__InteractorDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getInteractorDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InteractorDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InteractorDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getAlternatives_3()); }
(rule__InteractorDeclaration__Alternatives_3)*
{ after(grammarAccess.getInteractorDeclarationAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ActorDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorDeclaration__Group__0__Impl
	rule__ActorDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorDeclarationAccess().getActorKeyword_0()); }

	'actor' 

{ after(grammarAccess.getActorDeclarationAccess().getActorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorDeclarationAccess().getNameAssignment_1()); }
(rule__ActorDeclaration__NameAssignment_1)
{ after(grammarAccess.getActorDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ActorAlias__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorAlias__Group__0__Impl
	rule__ActorAlias__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorAlias__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAliasAccess().getSourceAssignment_0()); }
(rule__ActorAlias__SourceAssignment_0)
{ after(grammarAccess.getActorAliasAccess().getSourceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorAlias__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorAlias__Group__1__Impl
	rule__ActorAlias__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorAlias__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAliasAccess().getAsKeyword_1()); }

	'as' 

{ after(grammarAccess.getActorAliasAccess().getAsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorAlias__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorAlias__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorAlias__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAliasAccess().getRemoteAssignment_2()); }
(rule__ActorAlias__RemoteAssignment_2)
{ after(grammarAccess.getActorAliasAccess().getRemoteAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group__0__Impl
	rule__ComponentDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getInteractorAssignment_0()); }
(rule__ComponentDeclaration__InteractorAssignment_0)
{ after(grammarAccess.getComponentDeclarationAccess().getInteractorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group__1__Impl
	rule__ComponentDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getNameAssignment_1()); }
(rule__ComponentDeclaration__NameAssignment_1)
{ after(grammarAccess.getComponentDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getGroup_2()); }
(rule__ComponentDeclaration__Group_2__0)?
{ after(grammarAccess.getComponentDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group_2__0__Impl
	rule__ComponentDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getWithKeyword_2_0()); }

	'with' 

{ after(grammarAccess.getComponentDeclarationAccess().getWithKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group_2__1__Impl
	rule__ComponentDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getAliasesAssignment_2_1()); }
(rule__ComponentDeclaration__AliasesAssignment_2_1)
{ after(grammarAccess.getComponentDeclarationAccess().getAliasesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDeclaration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getGroup_2_2()); }
(rule__ComponentDeclaration__Group_2_2__0)*
{ after(grammarAccess.getComponentDeclarationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentDeclaration__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group_2_2__0__Impl
	rule__ComponentDeclaration__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getComponentDeclarationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDeclaration__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentDeclaration__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getAliasesAssignment_2_2_1()); }
(rule__ComponentDeclaration__AliasesAssignment_2_2_1)
{ after(grammarAccess.getComponentDeclarationAccess().getAliasesAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventReception__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventReception__Group_0__0__Impl
	rule__EventReception__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getInstanceAssignment_0_0()); }
(rule__EventReception__InstanceAssignment_0_0)
{ after(grammarAccess.getEventReceptionAccess().getInstanceAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventReception__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventReception__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getGroup_0_1()); }
(rule__EventReception__Group_0_1__0)?
{ after(grammarAccess.getEventReceptionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventReception__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventReception__Group_0_1__0__Impl
	rule__EventReception__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getFromKeyword_0_1_0()); }

	'from' 

{ after(grammarAccess.getEventReceptionAccess().getFromKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventReception__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventReception__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getSourceAssignment_0_1_1()); }
(rule__EventReception__SourceAssignment_0_1_1)
{ after(grammarAccess.getEventReceptionAccess().getSourceAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventEmission__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventEmission__Group__0__Impl
	rule__EventEmission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventEmission__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventEmissionAccess().getInstanceAssignment_0()); }
(rule__EventEmission__InstanceAssignment_0)
{ after(grammarAccess.getEventEmissionAccess().getInstanceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventEmission__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventEmission__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventEmission__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventEmissionAccess().getGroup_1()); }
(rule__EventEmission__Group_1__0)?
{ after(grammarAccess.getEventEmissionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventEmission__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventEmission__Group_1__0__Impl
	rule__EventEmission__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventEmission__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventEmissionAccess().getToKeyword_1_0()); }

	'to' 

{ after(grammarAccess.getEventEmissionAccess().getToKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventEmission__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventEmission__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventEmission__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventEmissionAccess().getDestinationAssignment_1_1()); }
(rule__EventEmission__DestinationAssignment_1_1)
{ after(grammarAccess.getEventEmissionAccess().getDestinationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowEmission__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowEmission__Group__0__Impl
	rule__FlowEmission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowEmission__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowEmissionAccess().getInstanceAssignment_0()); }
(rule__FlowEmission__InstanceAssignment_0)
{ after(grammarAccess.getFlowEmissionAccess().getInstanceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowEmission__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowEmission__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowEmission__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowEmissionAccess().getGroup_1()); }
(rule__FlowEmission__Group_1__0)?
{ after(grammarAccess.getFlowEmissionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowEmission__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowEmission__Group_1__0__Impl
	rule__FlowEmission__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowEmission__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowEmissionAccess().getToKeyword_1_0()); }

	'to' 

{ after(grammarAccess.getFlowEmissionAccess().getToKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowEmission__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowEmission__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowEmission__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowEmissionAccess().getDestinationAssignment_1_1()); }
(rule__FlowEmission__DestinationAssignment_1_1)
{ after(grammarAccess.getFlowEmissionAccess().getDestinationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__0__Impl
	rule__EventDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getTypeAssignment_0()); }
(rule__EventDeclaration__TypeAssignment_0)
{ after(grammarAccess.getEventDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__1__Impl
	rule__EventDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getEventKeyword_1()); }

	'event' 

{ after(grammarAccess.getEventDeclarationAccess().getEventKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__2__Impl
	rule__EventDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getNameAssignment_2()); }
(rule__EventDeclaration__NameAssignment_2)
{ after(grammarAccess.getEventDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__3__Impl
	rule__EventDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup_3()); }
(rule__EventDeclaration__Group_3__0)?
{ after(grammarAccess.getEventDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup_4()); }
(rule__EventDeclaration__Group_4__0)*
{ after(grammarAccess.getEventDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EventDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3__0__Impl
	rule__EventDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getFromKeyword_3_0()); }

	'from' 

{ after(grammarAccess.getEventDeclarationAccess().getFromKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getSourceAssignment_3_1()); }
(rule__EventDeclaration__SourceAssignment_3_1)
{ after(grammarAccess.getEventDeclarationAccess().getSourceAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_4__0__Impl
	rule__EventDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getToKeyword_4_0()); }

	'to' 

{ after(grammarAccess.getEventDeclarationAccess().getToKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getDestinationsAssignment_4_1()); }
(rule__EventDeclaration__DestinationsAssignment_4_1)
{ after(grammarAccess.getEventDeclarationAccess().getDestinationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__0__Impl
	rule__FlowDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getTypeAssignment_0()); }
(rule__FlowDeclaration__TypeAssignment_0)
{ after(grammarAccess.getFlowDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__1__Impl
	rule__FlowDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getFlowKeyword_1()); }

	'flow' 

{ after(grammarAccess.getFlowDeclarationAccess().getFlowKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__2__Impl
	rule__FlowDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getNameAssignment_2()); }
(rule__FlowDeclaration__NameAssignment_2)
{ after(grammarAccess.getFlowDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__3__Impl
	rule__FlowDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup_3()); }
(rule__FlowDeclaration__Group_3__0)?
{ after(grammarAccess.getFlowDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getGroup_4()); }
(rule__FlowDeclaration__Group_4__0)*
{ after(grammarAccess.getFlowDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FlowDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_3__0__Impl
	rule__FlowDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getFromKeyword_3_0()); }

	'from' 

{ after(grammarAccess.getFlowDeclarationAccess().getFromKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getSourceAssignment_3_1()); }
(rule__FlowDeclaration__SourceAssignment_3_1)
{ after(grammarAccess.getFlowDeclarationAccess().getSourceAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_4__0__Impl
	rule__FlowDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getToKeyword_4_0()); }

	'to' 

{ after(grammarAccess.getFlowDeclarationAccess().getToKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getDestinationsAssignment_4_1()); }
(rule__FlowDeclaration__DestinationsAssignment_4_1)
{ after(grammarAccess.getFlowDeclarationAccess().getDestinationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BehaviorDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorDeclaration__Group__0__Impl
	rule__BehaviorDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getCauseAssignment_0()); }
(rule__BehaviorDeclaration__CauseAssignment_0)
{ after(grammarAccess.getBehaviorDeclarationAccess().getCauseAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BehaviorDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorDeclaration__Group__1__Impl
	rule__BehaviorDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getBehaviorDeclarationAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BehaviorDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getEffectsAssignment_2()); }
(rule__BehaviorDeclaration__EffectsAssignment_2)
{ after(grammarAccess.getBehaviorDeclarationAccess().getEffectsAssignment_2()); }
)
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getEffectsAssignment_2()); }
(rule__BehaviorDeclaration__EffectsAssignment_2)*
{ after(grammarAccess.getBehaviorDeclarationAccess().getEffectsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OnCause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCause__Group__0__Impl
	rule__OnCause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getOnKeyword_0()); }

	'on' 

{ after(grammarAccess.getOnCauseAccess().getOnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnCause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCause__Group__1__Impl
	rule__OnCause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getEventAssignment_1()); }
(rule__OnCause__EventAssignment_1)
{ after(grammarAccess.getOnCauseAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnCause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getGroup_2()); }
(rule__OnCause__Group_2__0)?
{ after(grammarAccess.getOnCauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OnCause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCause__Group_2__0__Impl
	rule__OnCause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getIfKeyword_2_0()); }

	'if' 

{ after(grammarAccess.getOnCauseAccess().getIfKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnCause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getGuardAssignment_2_1()); }
(rule__OnCause__GuardAssignment_2_1)
{ after(grammarAccess.getOnCauseAccess().getGuardAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhenCause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenCause__Group__0__Impl
	rule__WhenCause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getWhenKeyword_0()); }

	'when' 

{ after(grammarAccess.getWhenCauseAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhenCause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenCause__Group__1__Impl
	rule__WhenCause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getConditionAssignment_1()); }
(rule__WhenCause__ConditionAssignment_1)
{ after(grammarAccess.getWhenCauseAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhenCause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenCause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getGroup_2()); }
(rule__WhenCause__Group_2__0)?
{ after(grammarAccess.getWhenCauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WhenCause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenCause__Group_2__0__Impl
	rule__WhenCause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getIfKeyword_2_0()); }

	'if' 

{ after(grammarAccess.getWhenCauseAccess().getIfKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhenCause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenCause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getGuardAssignment_2_1()); }
(rule__WhenCause__GuardAssignment_2_1)
{ after(grammarAccess.getWhenCauseAccess().getGuardAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AlwaysEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlwaysEffect__Group__0__Impl
	rule__AlwaysEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEffectAccess().getAlwaysKeyword_0()); }

	'always' 

{ after(grammarAccess.getAlwaysEffectAccess().getAlwaysKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlwaysEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlwaysEffect__Group__1__Impl
	rule__AlwaysEffect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEffectAccess().getTargetAssignment_1()); }
(rule__AlwaysEffect__TargetAssignment_1)
{ after(grammarAccess.getAlwaysEffectAccess().getTargetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlwaysEffect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlwaysEffect__Group__2__Impl
	rule__AlwaysEffect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEffect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEffectAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAlwaysEffectAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlwaysEffect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlwaysEffect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEffect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEffectAccess().getValueAssignment_3()); }
(rule__AlwaysEffect__ValueAssignment_3)
{ after(grammarAccess.getAlwaysEffectAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SetEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetEffect__Group__0__Impl
	rule__SetEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetEffectAccess().getSetKeyword_0()); }

	'set' 

{ after(grammarAccess.getSetEffectAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetEffect__Group__1__Impl
	rule__SetEffect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetEffectAccess().getTargetAssignment_1()); }
(rule__SetEffect__TargetAssignment_1)
{ after(grammarAccess.getSetEffectAccess().getTargetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetEffect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetEffect__Group__2__Impl
	rule__SetEffect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetEffect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetEffectAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getSetEffectAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetEffect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetEffect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetEffect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetEffectAccess().getValueAssignment_3()); }
(rule__SetEffect__ValueAssignment_3)
{ after(grammarAccess.getSetEffectAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TriggerEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerEffect__Group__0__Impl
	rule__TriggerEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerEffectAccess().getTriggerKeyword_0()); }

	'trigger' 

{ after(grammarAccess.getTriggerEffectAccess().getTriggerKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerEffect__Group__1__Impl
	rule__TriggerEffect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerEffectAccess().getTargetAssignment_1()); }
(rule__TriggerEffect__TargetAssignment_1)
{ after(grammarAccess.getTriggerEffectAccess().getTargetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerEffect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerEffect__Group__2__Impl
	rule__TriggerEffect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerEffect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerEffectAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getTriggerEffectAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerEffect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerEffect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerEffect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerEffectAccess().getValueAssignment_3()); }
(rule__TriggerEffect__ValueAssignment_3)
{ after(grammarAccess.getTriggerEffectAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DataTypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeDeclaration__Group__0__Impl
	rule__DataTypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getDataKeyword_0()); }

	'data' 

{ after(grammarAccess.getDataTypeDeclarationAccess().getDataKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeDeclaration__Group__1__Impl
	rule__DataTypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getTypeKeyword_1()); }

	'type' 

{ after(grammarAccess.getDataTypeDeclarationAccess().getTypeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeDeclaration__Group__2__Impl
	rule__DataTypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getNameAssignment_2()); }
(rule__DataTypeDeclaration__NameAssignment_2)
{ after(grammarAccess.getDataTypeDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeDeclaration__Group__3__Impl
	rule__DataTypeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getDataTypeDeclarationAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getFieldsAssignment_4()); }
(rule__DataTypeDeclaration__FieldsAssignment_4)*
{ after(grammarAccess.getDataTypeDeclarationAccess().getFieldsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_0()); }
(rule__Field__TypeAssignment_0)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
(rule__Field__NameAssignment_1)
{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanDisjonction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanDisjonction__Group__0__Impl
	rule__BooleanDisjonction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getBooleanConjonctionParserRuleCall_0()); }
	ruleBooleanConjonction
{ after(grammarAccess.getBooleanDisjonctionAccess().getBooleanConjonctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanDisjonction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanDisjonction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getGroup_1()); }
(rule__BooleanDisjonction__Group_1__0)*
{ after(grammarAccess.getBooleanDisjonctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanDisjonction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanDisjonction__Group_1__0__Impl
	rule__BooleanDisjonction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getGroup_1_0()); }
(rule__BooleanDisjonction__Group_1_0__0)
{ after(grammarAccess.getBooleanDisjonctionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanDisjonction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanDisjonction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getRightAssignment_1_1()); }
(rule__BooleanDisjonction__RightAssignment_1_1)
{ after(grammarAccess.getBooleanDisjonctionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanDisjonction__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanDisjonction__Group_1_0__0__Impl
	rule__BooleanDisjonction__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getBooleanDisjonctionLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getBooleanDisjonctionAccess().getBooleanDisjonctionLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanDisjonction__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanDisjonction__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getOrKeyword_1_0_1()); }

	'or' 

{ after(grammarAccess.getBooleanDisjonctionAccess().getOrKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanConjonction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConjonction__Group__0__Impl
	rule__BooleanConjonction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getBooleanUnaryParserRuleCall_0()); }
	ruleBooleanUnary
{ after(grammarAccess.getBooleanConjonctionAccess().getBooleanUnaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanConjonction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConjonction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getGroup_1()); }
(rule__BooleanConjonction__Group_1__0)*
{ after(grammarAccess.getBooleanConjonctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanConjonction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConjonction__Group_1__0__Impl
	rule__BooleanConjonction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getGroup_1_0()); }
(rule__BooleanConjonction__Group_1_0__0)
{ after(grammarAccess.getBooleanConjonctionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanConjonction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConjonction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getRightAssignment_1_1()); }
(rule__BooleanConjonction__RightAssignment_1_1)
{ after(grammarAccess.getBooleanConjonctionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanConjonction__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConjonction__Group_1_0__0__Impl
	rule__BooleanConjonction__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getBooleanConjonctionLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getBooleanConjonctionAccess().getBooleanConjonctionLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanConjonction__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConjonction__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getAndKeyword_1_0_1()); }

	'and' 

{ after(grammarAccess.getBooleanConjonctionAccess().getAndKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanUnary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanUnary__Group_1__0__Impl
	rule__BooleanUnary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnaryAccess().getGroup_1_0()); }
(rule__BooleanUnary__Group_1_0__0)
{ after(grammarAccess.getBooleanUnaryAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanUnary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanUnary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnaryAccess().getOperandAssignment_1_1()); }
(rule__BooleanUnary__OperandAssignment_1_1)
{ after(grammarAccess.getBooleanUnaryAccess().getOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanUnary__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanUnary__Group_1_0__0__Impl
	rule__BooleanUnary__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnary__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnaryAccess().getBooleanNegationAction_1_0_0()); }
(

)
{ after(grammarAccess.getBooleanUnaryAccess().getBooleanNegationAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanUnary__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanUnary__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnary__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnaryAccess().getExclamationMarkKeyword_1_0_1()); }

	'!' 

{ after(grammarAccess.getBooleanUnaryAccess().getExclamationMarkKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanTerminalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTerminalExpression__Group_0__0__Impl
	rule__BooleanTerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getBooleanTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTerminalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTerminalExpression__Group_0__1__Impl
	rule__BooleanTerminalExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getBooleanExpressionParserRuleCall_0_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getBooleanTerminalExpressionAccess().getBooleanExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTerminalExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTerminalExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getBooleanTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BooleanTerminalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTerminalExpression__Group_1__0__Impl
	rule__BooleanTerminalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getBooleanLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getBooleanTerminalExpressionAccess().getBooleanLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTerminalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTerminalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getValueAssignment_1_1()); }
(rule__BooleanTerminalExpression__ValueAssignment_1_1)
{ after(grammarAccess.getBooleanTerminalExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberCompoundExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__0__Impl
	rule__NumberCompoundExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getNumberIfExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getNumberIfExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__1__Impl
	rule__NumberCompoundExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getIfKeyword_1_1()); }

	'if' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getIfKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__2__Impl
	rule__NumberCompoundExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getLeftParenthesisKeyword_1_2()); }

	'(' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getLeftParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__3__Impl
	rule__NumberCompoundExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getIfAssignment_1_3()); }
(rule__NumberCompoundExpression__IfAssignment_1_3)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getIfAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__4__Impl
	rule__NumberCompoundExpression__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__5__Impl
	rule__NumberCompoundExpression__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getThenAssignment_1_5()); }
(rule__NumberCompoundExpression__ThenAssignment_1_5)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getThenAssignment_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getGroup_1_6()); }
(rule__NumberCompoundExpression__Group_1_6__0)?
{ after(grammarAccess.getNumberCompoundExpressionAccess().getGroup_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__NumberCompoundExpression__Group_1_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1_6__0__Impl
	rule__NumberCompoundExpression__Group_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getElseKeyword_1_6_0()); }
(
	'else' 
)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getElseKeyword_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_1_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_1_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_1_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getElseAssignment_1_6_1()); }
(rule__NumberCompoundExpression__ElseAssignment_1_6_1)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getElseAssignment_1_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberCompoundExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__0__Impl
	rule__NumberCompoundExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getNumberSwitchExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getNumberSwitchExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__1__Impl
	rule__NumberCompoundExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getSwitchKeyword_2_1()); }

	'switch' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getSwitchKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__2__Impl
	rule__NumberCompoundExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getLeftParenthesisKeyword_2_2()); }

	'(' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getLeftParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__3__Impl
	rule__NumberCompoundExpression__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getSwitchAssignment_2_3()); }
(rule__NumberCompoundExpression__SwitchAssignment_2_3)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getSwitchAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__4__Impl
	rule__NumberCompoundExpression__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getRightParenthesisKeyword_2_4()); }

	')' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getRightParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__5__Impl
	rule__NumberCompoundExpression__Group_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getCasesAssignment_2_5()); }
(rule__NumberCompoundExpression__CasesAssignment_2_5)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getCasesAssignment_2_5()); }
)
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getCasesAssignment_2_5()); }
(rule__NumberCompoundExpression__CasesAssignment_2_5)*
{ after(grammarAccess.getNumberCompoundExpressionAccess().getCasesAssignment_2_5()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getGroup_2_6()); }
(rule__NumberCompoundExpression__Group_2_6__0)?
{ after(grammarAccess.getNumberCompoundExpressionAccess().getGroup_2_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__NumberCompoundExpression__Group_2_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2_6__0__Impl
	rule__NumberCompoundExpression__Group_2_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getDefaultKeyword_2_6_0()); }
(
	'default' 
)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getDefaultKeyword_2_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2_6__1__Impl
	rule__NumberCompoundExpression__Group_2_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getColonKeyword_2_6_1()); }

	':' 

{ after(grammarAccess.getNumberCompoundExpressionAccess().getColonKeyword_2_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberCompoundExpression__Group_2_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberCompoundExpression__Group_2_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__Group_2_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getDefaultAssignment_2_6_2()); }
(rule__NumberCompoundExpression__DefaultAssignment_2_6_2)
{ after(grammarAccess.getNumberCompoundExpressionAccess().getDefaultAssignment_2_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumberSwitchExpressionNumberCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberSwitchExpressionNumberCase__Group__0__Impl
	rule__NumberSwitchExpressionNumberCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSwitchExpressionNumberCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberSwitchExpressionNumberCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberSwitchExpressionNumberCase__Group__1__Impl
	rule__NumberSwitchExpressionNumberCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSwitchExpressionNumberCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getConditionAssignment_1()); }
(rule__NumberSwitchExpressionNumberCase__ConditionAssignment_1)
{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberSwitchExpressionNumberCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberSwitchExpressionNumberCase__Group__2__Impl
	rule__NumberSwitchExpressionNumberCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSwitchExpressionNumberCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberSwitchExpressionNumberCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberSwitchExpressionNumberCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSwitchExpressionNumberCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getValueAssignment_3()); }
(rule__NumberSwitchExpressionNumberCase__ValueAssignment_3)
{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NumberAddition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group__0__Impl
	rule__NumberAddition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getNumberMultiplicationParserRuleCall_0()); }
	ruleNumberMultiplication
{ after(grammarAccess.getNumberAdditionAccess().getNumberMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberAddition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getGroup_1()); }
(rule__NumberAddition__Group_1__0)*
{ after(grammarAccess.getNumberAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberAddition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group_1__0__Impl
	rule__NumberAddition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getAlternatives_1_0()); }
(rule__NumberAddition__Alternatives_1_0)
{ after(grammarAccess.getNumberAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberAddition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getRightAssignment_1_1()); }
(rule__NumberAddition__RightAssignment_1_1)
{ after(grammarAccess.getNumberAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberAddition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group_1_0_0__0__Impl
	rule__NumberAddition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getNumberAdditionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getNumberAdditionAccess().getNumberAdditionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberAddition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getNumberAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberAddition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group_1_0_1__0__Impl
	rule__NumberAddition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getNumberSubstractionLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getNumberAdditionAccess().getNumberSubstractionLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberAddition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberAddition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getNumberAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberMultiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group__0__Impl
	rule__NumberMultiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getNumberPowerParserRuleCall_0()); }
	ruleNumberPower
{ after(grammarAccess.getNumberMultiplicationAccess().getNumberPowerParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberMultiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getGroup_1()); }
(rule__NumberMultiplication__Group_1__0)*
{ after(grammarAccess.getNumberMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberMultiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1__0__Impl
	rule__NumberMultiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getAlternatives_1_0()); }
(rule__NumberMultiplication__Alternatives_1_0)
{ after(grammarAccess.getNumberMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberMultiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getRightAssignment_1_1()); }
(rule__NumberMultiplication__RightAssignment_1_1)
{ after(grammarAccess.getNumberMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberMultiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1_0_0__0__Impl
	rule__NumberMultiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getNumberMultiplicationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getNumberMultiplicationAccess().getNumberMultiplicationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberMultiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getNumberMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberMultiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1_0_1__0__Impl
	rule__NumberMultiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getNumberDivisionLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getNumberMultiplicationAccess().getNumberDivisionLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberMultiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getNumberMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberMultiplication__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1_0_2__0__Impl
	rule__NumberMultiplication__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getNumberModuloLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getNumberMultiplicationAccess().getNumberModuloLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberMultiplication__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberMultiplication__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }

	'%' 

{ after(grammarAccess.getNumberMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberPower__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberPower__Group__0__Impl
	rule__NumberPower__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getNumberUnaryParserRuleCall_0()); }
	ruleNumberUnary
{ after(grammarAccess.getNumberPowerAccess().getNumberUnaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberPower__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberPower__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getGroup_1()); }
(rule__NumberPower__Group_1__0)*
{ after(grammarAccess.getNumberPowerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberPower__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberPower__Group_1__0__Impl
	rule__NumberPower__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getGroup_1_0()); }
(rule__NumberPower__Group_1_0__0)
{ after(grammarAccess.getNumberPowerAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberPower__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberPower__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getRightAssignment_1_1()); }
(rule__NumberPower__RightAssignment_1_1)
{ after(grammarAccess.getNumberPowerAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberPower__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberPower__Group_1_0__0__Impl
	rule__NumberPower__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getNumberPowerLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getNumberPowerAccess().getNumberPowerLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberPower__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberPower__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getCircumflexAccentKeyword_1_0_1()); }

	'^' 

{ after(grammarAccess.getNumberPowerAccess().getCircumflexAccentKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberUnary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberUnary__Group_1__0__Impl
	rule__NumberUnary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberUnary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberUnaryAccess().getGroup_1_0()); }
(rule__NumberUnary__Group_1_0__0)
{ after(grammarAccess.getNumberUnaryAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberUnary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberUnary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberUnary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberUnaryAccess().getOperandAssignment_1_1()); }
(rule__NumberUnary__OperandAssignment_1_1)
{ after(grammarAccess.getNumberUnaryAccess().getOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberUnary__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberUnary__Group_1_0__0__Impl
	rule__NumberUnary__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberUnary__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberUnaryAccess().getNumberOppositionAction_1_0_0()); }
(

)
{ after(grammarAccess.getNumberUnaryAccess().getNumberOppositionAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberUnary__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberUnary__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberUnary__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberUnaryAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getNumberUnaryAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberTerminalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_0__0__Impl
	rule__NumberTerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getNumberTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_0__1__Impl
	rule__NumberTerminalExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getNumberExpressionParserRuleCall_0_1()); }
	ruleNumberExpression
{ after(grammarAccess.getNumberTerminalExpressionAccess().getNumberExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getNumberTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumberTerminalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_1__0__Impl
	rule__NumberTerminalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getNumberLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getNumberLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getValueAssignment_1_1()); }
(rule__NumberTerminalExpression__ValueAssignment_1_1)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberTerminalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2__0__Impl
	rule__NumberTerminalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getNumberFunctionExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getNumberFunctionExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2__1__Impl
	rule__NumberTerminalExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getFunctionAssignment_2_1()); }
(rule__NumberTerminalExpression__FunctionAssignment_2_1)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getFunctionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2_2()); }
(rule__NumberTerminalExpression__Group_2_2__0)?
{ after(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumberTerminalExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2_2__0__Impl
	rule__NumberTerminalExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getLeftParenthesisKeyword_2_2_0()); }

	'(' 

{ after(grammarAccess.getNumberTerminalExpressionAccess().getLeftParenthesisKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2_2__1__Impl
	rule__NumberTerminalExpression__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsAssignment_2_2_1()); }
(rule__NumberTerminalExpression__ArgumentsAssignment_2_2_1)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2_2__2__Impl
	rule__NumberTerminalExpression__Group_2_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2_2_2()); }
(rule__NumberTerminalExpression__Group_2_2_2__0)*
{ after(grammarAccess.getNumberTerminalExpressionAccess().getGroup_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_2_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getRightParenthesisKeyword_2_2_3()); }

	')' 

{ after(grammarAccess.getNumberTerminalExpressionAccess().getRightParenthesisKeyword_2_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NumberTerminalExpression__Group_2_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2_2_2__0__Impl
	rule__NumberTerminalExpression__Group_2_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getCommaKeyword_2_2_2_0()); }

	',' 

{ after(grammarAccess.getNumberTerminalExpressionAccess().getCommaKeyword_2_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberTerminalExpression__Group_2_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberTerminalExpression__Group_2_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__Group_2_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsAssignment_2_2_2_1()); }
(rule__NumberTerminalExpression__ArgumentsAssignment_2_2_2_1)
{ after(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsAssignment_2_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberLiteral__Group__0__Impl
	rule__NumberLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getGroup_1()); }
(rule__NumberLiteral__Group_1__0)?
{ after(grammarAccess.getNumberLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberLiteral__Group_1__0__Impl
	rule__NumberLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getNumberLiteralAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Model__InteractorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getInteractorsInteractorDeclarationParserRuleCall_0_0()); }
	ruleInteractorDeclaration{ after(grammarAccess.getModelAccess().getInteractorsInteractorDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DataTypesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDataTypesDataTypeDeclarationParserRuleCall_1_0()); }
	ruleDataTypeDeclaration{ after(grammarAccess.getModelAccess().getDataTypesDataTypeDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInteractorDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__EntitiesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getEntitiesEntityDeclarationParserRuleCall_3_0_0()); }
	ruleEntityDeclaration{ after(grammarAccess.getInteractorDeclarationAccess().getEntitiesEntityDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__SignalsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getSignalsSignalDeclarationParserRuleCall_3_1_0()); }
	ruleSignalDeclaration{ after(grammarAccess.getInteractorDeclarationAccess().getSignalsSignalDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InteractorDeclaration__BehaviorsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractorDeclarationAccess().getBehaviorsBehaviorDeclarationParserRuleCall_3_2_0()); }
	ruleBehaviorDeclaration{ after(grammarAccess.getInteractorDeclarationAccess().getBehaviorsBehaviorDeclarationParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessibleEntity__GenericAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessibleEntityAccess().getGenericAlternatives_0_0()); }
(rule__AccessibleEntity__GenericAlternatives_0_0)
{ after(grammarAccess.getAccessibleEntityAccess().getGenericAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessibleEntity__SpecificAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessibleEntityAccess().getSpecificEntityParserRuleCall_1_0()); }
	ruleEntity{ after(grammarAccess.getAccessibleEntityAccess().getSpecificEntityParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__InstanceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getInstanceEntityDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getEntityAccess().getInstanceEntityDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getEntityAccess().getInstanceEntityDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getEntityAccess().getInstanceEntityDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__InstanceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getInstanceActorDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getActorAccess().getInstanceActorDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getActorAccess().getInstanceActorDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getActorAccess().getInstanceActorDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__InstanceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getInstanceComponentDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getComponentAccess().getInstanceComponentDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getComponentAccess().getInstanceComponentDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getComponentAccess().getInstanceComponentDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActorDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getActorDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActorAlias__SourceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAliasAccess().getSourceActorParserRuleCall_0_0()); }
	ruleActor{ after(grammarAccess.getActorAliasAccess().getSourceActorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActorAlias__RemoteAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAliasAccess().getRemoteActorParserRuleCall_2_0()); }
	ruleActor{ after(grammarAccess.getActorAliasAccess().getRemoteActorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__InteractorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getInteractorInteractorDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getComponentDeclarationAccess().getInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getComponentDeclarationAccess().getInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getComponentDeclarationAccess().getInteractorInteractorDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getComponentDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__AliasesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getAliasesActorAliasParserRuleCall_2_1_0()); }
	ruleActorAlias{ after(grammarAccess.getComponentDeclarationAccess().getAliasesActorAliasParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDeclaration__AliasesAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentDeclarationAccess().getAliasesActorAliasParserRuleCall_2_2_1_0()); }
	ruleActorAlias{ after(grammarAccess.getComponentDeclarationAccess().getAliasesActorAliasParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__InstanceAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getInstanceEventDeclarationCrossReference_0_0_0()); }
(
{ before(grammarAccess.getEventReceptionAccess().getInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEventReceptionAccess().getInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getEventReceptionAccess().getInstanceEventDeclarationCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__SourceAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getSourceComponentParserRuleCall_0_1_1_0()); }
	ruleComponent{ after(grammarAccess.getEventReceptionAccess().getSourceComponentParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventReception__BaseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventReceptionAccess().getBaseInitKeyword_1_0()); }
(
{ before(grammarAccess.getEventReceptionAccess().getBaseInitKeyword_1_0()); }

	'init' 

{ after(grammarAccess.getEventReceptionAccess().getBaseInitKeyword_1_0()); }
)

{ after(grammarAccess.getEventReceptionAccess().getBaseInitKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EventEmission__InstanceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventEmissionAccess().getInstanceEventDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getEventEmissionAccess().getInstanceEventDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEventEmissionAccess().getInstanceEventDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEventEmissionAccess().getInstanceEventDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventEmission__DestinationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventEmissionAccess().getDestinationComponentParserRuleCall_1_1_0()); }
	ruleComponent{ after(grammarAccess.getEventEmissionAccess().getDestinationComponentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowEmission__InstanceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowEmissionAccess().getInstanceFlowDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getFlowEmissionAccess().getInstanceFlowDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFlowEmissionAccess().getInstanceFlowDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFlowEmissionAccess().getInstanceFlowDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowEmission__DestinationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowEmissionAccess().getDestinationComponentParserRuleCall_1_1_0()); }
	ruleComponent{ after(grammarAccess.getFlowEmissionAccess().getDestinationComponentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getTypeDataTypeParserRuleCall_0_0()); }
	ruleDataType{ after(grammarAccess.getEventDeclarationAccess().getTypeDataTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__SourceAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getSourceAccessibleEntityParserRuleCall_3_1_0()); }
	ruleAccessibleEntity{ after(grammarAccess.getEventDeclarationAccess().getSourceAccessibleEntityParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__DestinationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getDestinationsAccessibleEntityParserRuleCall_4_1_0()); }
	ruleAccessibleEntity{ after(grammarAccess.getEventDeclarationAccess().getDestinationsAccessibleEntityParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getTypeDataTypeParserRuleCall_0_0()); }
	ruleDataType{ after(grammarAccess.getFlowDeclarationAccess().getTypeDataTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFlowDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__SourceAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getSourceAccessibleEntityParserRuleCall_3_1_0()); }
	ruleAccessibleEntity{ after(grammarAccess.getFlowDeclarationAccess().getSourceAccessibleEntityParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDeclaration__DestinationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDeclarationAccess().getDestinationsAccessibleEntityParserRuleCall_4_1_0()); }
	ruleAccessibleEntity{ after(grammarAccess.getFlowDeclarationAccess().getDestinationsAccessibleEntityParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorDeclaration__CauseAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getCauseCauseParserRuleCall_0_0()); }
	ruleCause{ after(grammarAccess.getBehaviorDeclarationAccess().getCauseCauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorDeclaration__EffectsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorDeclarationAccess().getEffectsEffectParserRuleCall_2_0()); }
	ruleEffect{ after(grammarAccess.getBehaviorDeclarationAccess().getEffectsEffectParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getEventEventReceptionParserRuleCall_1_0()); }
	ruleEventReception{ after(grammarAccess.getOnCauseAccess().getEventEventReceptionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnCause__GuardAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getOnCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getWhenCauseAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenCause__GuardAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getWhenCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEffect__TargetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEffectAccess().getTargetFlowEmissionParserRuleCall_1_0()); }
	ruleFlowEmission{ after(grammarAccess.getAlwaysEffectAccess().getTargetFlowEmissionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEffect__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEffectAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAlwaysEffectAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetEffect__TargetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetEffectAccess().getTargetFlowEmissionParserRuleCall_1_0()); }
	ruleFlowEmission{ after(grammarAccess.getSetEffectAccess().getTargetFlowEmissionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetEffect__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetEffectAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getSetEffectAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerEffect__TargetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerEffectAccess().getTargetEventEmissionParserRuleCall_1_0()); }
	ruleEventEmission{ after(grammarAccess.getTriggerEffectAccess().getTargetEventEmissionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerEffect__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerEffectAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getTriggerEffectAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDataTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDeclaration__FieldsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDeclarationAccess().getFieldsFieldParserRuleCall_4_0()); }
	ruleField{ after(grammarAccess.getDataTypeDeclarationAccess().getFieldsFieldParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeDataTypeParserRuleCall_0_0()); }
	ruleDataType{ after(grammarAccess.getFieldAccess().getTypeDataTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__CompoundAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getCompoundDataTypeDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getDataTypeAccess().getCompoundDataTypeDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getDataTypeAccess().getCompoundDataTypeDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getDataTypeAccess().getCompoundDataTypeDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__BaseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getBaseDataTypeBaseParserRuleCall_1_0()); }
	ruleDataTypeBase{ after(grammarAccess.getDataTypeAccess().getBaseDataTypeBaseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanDisjonction__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanDisjonctionAccess().getRightBooleanConjonctionParserRuleCall_1_1_0()); }
	ruleBooleanConjonction{ after(grammarAccess.getBooleanDisjonctionAccess().getRightBooleanConjonctionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConjonction__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConjonctionAccess().getRightBooleanUnaryParserRuleCall_1_1_0()); }
	ruleBooleanUnary{ after(grammarAccess.getBooleanConjonctionAccess().getRightBooleanUnaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanUnary__OperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanUnaryAccess().getOperandBooleanTerminalExpressionParserRuleCall_1_1_0()); }
	ruleBooleanTerminalExpression{ after(grammarAccess.getBooleanUnaryAccess().getOperandBooleanTerminalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTerminalExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTerminalExpressionAccess().getValueBooleanLiteralParserRuleCall_1_1_0()); }
	ruleBooleanLiteral{ after(grammarAccess.getBooleanTerminalExpressionAccess().getValueBooleanLiteralParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__IfAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getIfBooleanExpressionParserRuleCall_1_3_0()); }
	ruleBooleanExpression{ after(grammarAccess.getNumberCompoundExpressionAccess().getIfBooleanExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__ThenAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getThenNumberAdditionParserRuleCall_1_5_0()); }
	ruleNumberAddition{ after(grammarAccess.getNumberCompoundExpressionAccess().getThenNumberAdditionParserRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__ElseAssignment_1_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getElseNumberAdditionParserRuleCall_1_6_1_0()); }
	ruleNumberAddition{ after(grammarAccess.getNumberCompoundExpressionAccess().getElseNumberAdditionParserRuleCall_1_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__SwitchAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getSwitchNumberExpressionParserRuleCall_2_3_0()); }
	ruleNumberExpression{ after(grammarAccess.getNumberCompoundExpressionAccess().getSwitchNumberExpressionParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__CasesAssignment_2_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getCasesNumberSwitchExpressionNumberCaseParserRuleCall_2_5_0()); }
	ruleNumberSwitchExpressionNumberCase{ after(grammarAccess.getNumberCompoundExpressionAccess().getCasesNumberSwitchExpressionNumberCaseParserRuleCall_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberCompoundExpression__DefaultAssignment_2_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberCompoundExpressionAccess().getDefaultNumberExpressionParserRuleCall_2_6_2_0()); }
	ruleNumberExpression{ after(grammarAccess.getNumberCompoundExpressionAccess().getDefaultNumberExpressionParserRuleCall_2_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSwitchExpressionNumberCase__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getConditionNumberExpressionParserRuleCall_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getConditionNumberExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSwitchExpressionNumberCase__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getValueNumberExpressionParserRuleCall_3_0()); }
	ruleNumberExpression{ after(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getValueNumberExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberAddition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAdditionAccess().getRightNumberMultiplicationParserRuleCall_1_1_0()); }
	ruleNumberMultiplication{ after(grammarAccess.getNumberAdditionAccess().getRightNumberMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberMultiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberMultiplicationAccess().getRightNumberPowerParserRuleCall_1_1_0()); }
	ruleNumberPower{ after(grammarAccess.getNumberMultiplicationAccess().getRightNumberPowerParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberPower__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberPowerAccess().getRightNumberUnaryParserRuleCall_1_1_0()); }
	ruleNumberUnary{ after(grammarAccess.getNumberPowerAccess().getRightNumberUnaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberUnary__OperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberUnaryAccess().getOperandNumberTerminalExpressionParserRuleCall_1_1_0()); }
	ruleNumberTerminalExpression{ after(grammarAccess.getNumberUnaryAccess().getOperandNumberTerminalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getValueNumberLiteralParserRuleCall_1_1_0()); }
	ruleNumberLiteral{ after(grammarAccess.getNumberTerminalExpressionAccess().getValueNumberLiteralParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__FunctionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getFunctionIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getNumberTerminalExpressionAccess().getFunctionIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__ArgumentsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsNumberExpressionParserRuleCall_2_2_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsNumberExpressionParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTerminalExpression__ArgumentsAssignment_2_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsNumberExpressionParserRuleCall_2_2_2_1_0()); }
	ruleNumberExpression{ after(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsNumberExpressionParserRuleCall_2_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


