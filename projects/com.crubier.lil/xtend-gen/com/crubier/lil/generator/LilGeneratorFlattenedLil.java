/**
 * generated by Xtext
 */
package com.crubier.lil.generator;

import com.crubier.lil.lil.Interactor;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.parsetree.reconstr.Serializer;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class LilGeneratorFlattenedLil implements IGenerator {
  @Inject
  @Extension
  private Serializer _serializer;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    InputOutput.<String>println("generate flattened lil code");
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Interactor> _filter = Iterables.<Interactor>filter(_iterable, Interactor.class);
    for (final Interactor e : _filter) {
      String _name = e.getName();
      String _plus = ("flattenedLil/" + _name);
      String _plus_1 = (_plus + ".c");
      String _serialize = this._serializer.serialize(e);
      fsa.generateFile(_plus_1, _serialize);
    }
  }
}
