/**
 * generated by Xtext
 */
package com.crubier.lil.scoping;

import com.crubier.lil.lil.AccessibleEntity;
import com.crubier.lil.lil.Entity;
import com.crubier.lil.lil.InteractorComponent;
import com.crubier.lil.lil.InteractorSignalAlias;
import com.crubier.lil.lil.InteractorSignalEmission;
import com.crubier.lil.lil.InteractorType;
import com.crubier.lil.lil.InteractorTypeDefinition;
import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class LilScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_InteractorSignalEmission_instance(final InteractorSignalEmission signalemission, final EReference ref) {
    InteractorSignalAlias _destination = signalemission.getDestination();
    boolean _equals = Objects.equal(_destination, null);
    if (_equals) {
      EObject temp = signalemission;
      boolean _not = (!(temp instanceof InteractorTypeDefinition));
      boolean _while = _not;
      while (_while) {
        EObject _eContainer = temp.eContainer();
        temp = _eContainer;
        boolean _not_1 = (!(temp instanceof InteractorTypeDefinition));
        _while = _not_1;
      }
      EList<EObject> _eContents = temp.eContents();
      return Scopes.scopeFor(_eContents);
    } else {
      InteractorSignalAlias _destination_1 = null;
      if (signalemission!=null) {
        _destination_1=signalemission.getDestination();
      }
      AccessibleEntity _source = null;
      if (_destination_1!=null) {
        _source=_destination_1.getSource();
      }
      Entity _specific = null;
      if (_source!=null) {
        _specific=_source.getSpecific();
      }
      InteractorType _type = null;
      InteractorSignalAlias _destination_2 = null;
      if (signalemission!=null) {
        _destination_2=signalemission.getDestination();
      }
      AccessibleEntity _source_1 = null;
      if (_destination_2!=null) {
        _source=_destination_2.getSource();
      }
      Entity _specific_1 = null;
      if (_source!=null) {
        _specific=_source.getSpecific();
      }
      if (((InteractorComponent) _specific)!=null) {
        _type=((InteractorComponent) _specific).getType();
      }
      InteractorTypeDefinition _custom = null;
      if (_type!=null) {
        _custom=_type.getCustom();
      }
      EList<EObject> _eContents_1 = null;
      if (_custom!=null) {
        _eContents_1=_custom.eContents();
      }
      return Scopes.scopeFor(_eContents_1);
    }
  }
}
