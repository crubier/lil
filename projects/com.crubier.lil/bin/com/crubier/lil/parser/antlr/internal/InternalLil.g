/*
* generated by Xtext
*/
grammar InternalLil;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.crubier.lil.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.crubier.lil.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.crubier.lil.services.LilGrammarAccess;

}

@parser::members {

 	private LilGrammarAccess grammarAccess;
 	
    public InternalLilParser(TokenStream input, LilGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LilModel";	
   	}
   	
   	@Override
   	protected LilGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLilModel
entryRuleLilModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLilModelRule()); }
	 iv_ruleLilModel=ruleLilModel 
	 { $current=$iv_ruleLilModel.current; } 
	 EOF 
;

// Rule LilModel
ruleLilModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLilModelAccess().getInteractorsInteractorParserRuleCall_0_0()); 
	    }
		lv_interactors_0_0=ruleInteractor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLilModelRule());
	        }
       		add(
       			$current, 
       			"interactors",
        		lv_interactors_0_0, 
        		"Interactor");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLilModelAccess().getDataTypesDataTypeDefinitionParserRuleCall_1_0()); 
	    }
		lv_dataTypes_1_0=ruleDataTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLilModelRule());
	        }
       		add(
       			$current, 
       			"dataTypes",
        		lv_dataTypes_1_0, 
        		"DataTypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleInteractor
entryRuleInteractor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteractorRule()); }
	 iv_ruleInteractor=ruleInteractor 
	 { $current=$iv_ruleInteractor.current; } 
	 EOF 
;

// Rule Interactor
ruleInteractor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interactor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInteractorAccess().getInteractorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInteractorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInteractorAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInteractorAccess().getEntitiesEntityParserRuleCall_3_0_0()); 
	    }
		lv_entities_3_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractorRule());
	        }
       		add(
       			$current, 
       			"entities",
        		lv_entities_3_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteractorAccess().getSignalsSignalParserRuleCall_3_1_0()); 
	    }
		lv_signals_4_0=ruleSignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractorRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_4_0, 
        		"Signal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteractorAccess().getBehaviorsBehaviorParserRuleCall_3_2_0()); 
	    }
		lv_behaviors_5_0=ruleBehavior		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractorRule());
	        }
       		add(
       			$current, 
       			"behaviors",
        		lv_behaviors_5_0, 
        		"Behavior");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAccessibleEntity
entryRuleAccessibleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessibleEntityRule()); }
	 iv_ruleAccessibleEntity=ruleAccessibleEntity 
	 { $current=$iv_ruleAccessibleEntity.current; } 
	 EOF 
;

// Rule AccessibleEntity
ruleAccessibleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAccessibleEntityAccess().getGenericGenericEntityParserRuleCall_0_0()); 
	    }
		lv_generic_0_0=ruleGenericEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessibleEntityRule());
	        }
       		set(
       			$current, 
       			"generic",
        		lv_generic_0_0, 
        		"GenericEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAccessibleEntityAccess().getSpecificEntityCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleGenericEntity
entryRuleGenericEntity returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericEntityRule()); } 
	 iv_ruleGenericEntity=ruleGenericEntity 
	 { $current=$iv_ruleGenericEntity.current.getText(); }  
	 EOF 
;

// Rule GenericEntity
ruleGenericEntity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='any' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getAnyKeyword_0()); 
    }

    |
	kw='self' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getSelfKeyword_1()); 
    }

    |
	kw='other' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getOtherKeyword_2()); 
    }

    |
	kw='parent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getParentKeyword_3()); 
    }

    |
	kw='child' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getChildKeyword_4()); 
    }

    |
	kw='all' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getAllKeyword_5()); 
    }

    |
	kw='actors' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenericEntityAccess().getActorsKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getActorParserRuleCall_0()); 
    }
    this_Actor_0=ruleActor
    { 
        $current = $this_Actor_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getComponentParserRuleCall_1()); 
    }
    this_Component_1=ruleComponent
    { 
        $current = $this_Component_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getActorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActorAccess().getColonKeyword_1());
    }
	otherlv_2='actor' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActorAccess().getActorKeyword_2());
    }
)
;





// Entry rule entryRuleActorAlias
entryRuleActorAlias returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorAliasRule()); }
	 iv_ruleActorAlias=ruleActorAlias 
	 { $current=$iv_ruleActorAlias.current; } 
	 EOF 
;

// Rule ActorAlias
ruleActorAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorAliasRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getActorAliasAccess().getSourceActorCrossReference_0_0()); 
	}

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActorAliasAccess().getAsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorAliasRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getActorAliasAccess().getAliasActorCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getInteractorInteractorCrossReference_2_0()); 
	}

)
)(	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentAccess().getWithKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getActorsActorAliasParserRuleCall_3_1_0()); 
	    }
		lv_actors_4_0=ruleActorAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"actors",
        		lv_actors_4_0, 
        		"ActorAlias");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getActorsActorAliasParserRuleCall_3_2_1_0()); 
	    }
		lv_actors_6_0=ruleActorAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"actors",
        		lv_actors_6_0, 
        		"ActorAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleSignalReception
entryRuleSignalReception returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalReceptionRule()); }
	 iv_ruleSignalReception=ruleSignalReception 
	 { $current=$iv_ruleSignalReception.current; } 
	 EOF 
;

// Rule SignalReception
ruleSignalReception returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalReceptionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSignalReceptionAccess().getInstanceSignalCrossReference_0_0_0()); 
	}

)
)(	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalReceptionAccess().getFromKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalReceptionAccess().getSourceSignalAliasParserRuleCall_0_1_1_0()); 
	    }
		lv_source_2_0=ruleSignalAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalReceptionRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_2_0, 
        		"SignalAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
(
		lv_init_3_0=	'init' 
    {
        newLeafNode(lv_init_3_0, grammarAccess.getSignalReceptionAccess().getInitInitKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalReceptionRule());
	        }
       		setWithLastConsumed($current, "init", true, "init");
	    }

)
))
;





// Entry rule entryRuleSignalEmission
entryRuleSignalEmission returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalEmissionRule()); }
	 iv_ruleSignalEmission=ruleSignalEmission 
	 { $current=$iv_ruleSignalEmission.current; } 
	 EOF 
;

// Rule SignalEmission
ruleSignalEmission returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalEmissionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSignalEmissionAccess().getInstanceSignalCrossReference_0_0()); 
	}

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalEmissionAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalEmissionAccess().getDestinationSignalAliasParserRuleCall_1_1_0()); 
	    }
		lv_destination_2_0=ruleSignalAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalEmissionRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_2_0, 
        		"SignalAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAccess().getTypeDataTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAccess().getModeSignalModeParserRuleCall_3_0()); 
	    }
		lv_mode_3_0=ruleSignalMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_3_0, 
        		"SignalMode");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='from' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignalAccess().getFromKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAccess().getSourceSignalAliasParserRuleCall_4_1_0()); 
	    }
		lv_source_5_0=ruleSignalAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_5_0, 
        		"SignalAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSignalAccess().getToKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAccess().getDestinationsSignalAliasParserRuleCall_5_1_0()); 
	    }
		lv_destinations_7_0=ruleSignalAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalRule());
	        }
       		add(
       			$current, 
       			"destinations",
        		lv_destinations_7_0, 
        		"SignalAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDefinitionSet
entryRuleDefinitionSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionSetRule()); }
	 iv_ruleDefinitionSet=ruleDefinitionSet 
	 { $current=$iv_ruleDefinitionSet.current; } 
	 EOF 
;

// Rule DefinitionSet
ruleDefinitionSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionSetAccess().getEnumDefinitionSetAction_0_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionSetAccess().getLeftCurlyBracketKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSetAccess().getElementsEnumElementParserRuleCall_0_2_0()); 
	    }
		lv_elements_2_0=ruleEnumElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSetRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"EnumElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionSetAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSetAccess().getElementsEnumElementParserRuleCall_0_3_1_0()); 
	    }
		lv_elements_4_0=ruleEnumElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSetRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"EnumElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefinitionSetAccess().getRightCurlyBracketKeyword_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionSetAccess().getNumberDefinitionSetAction_1_0(),
            $current);
    }
)	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefinitionSetAccess().getLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSetAccess().getElementsNumberLiteralParserRuleCall_1_2_0()); 
	    }
		lv_elements_8_0=ruleNumberLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSetRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_8_0, 
        		"NumberLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDefinitionSetAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSetAccess().getElementsNumberLiteralParserRuleCall_1_3_1_0()); 
	    }
		lv_elements_10_0=ruleNumberLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSetRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_10_0, 
        		"NumberLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDefinitionSetAccess().getRightCurlyBracketKeyword_1_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionSetAccess().getNumberDefinitionIntervalAction_2_0(),
            $current);
    }
)	otherlv_13='[' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDefinitionSetAccess().getLeftSquareBracketKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSetAccess().getInfNumberLiteralParserRuleCall_2_2_0()); 
	    }
		lv_inf_14_0=ruleNumberLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSetRule());
	        }
       		set(
       			$current, 
       			"inf",
        		lv_inf_14_0, 
        		"NumberLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDefinitionSetAccess().getCommaKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionSetAccess().getSupNumberLiteralParserRuleCall_2_4_0()); 
	    }
		lv_sup_16_0=ruleNumberLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionSetRule());
	        }
       		set(
       			$current, 
       			"sup",
        		lv_sup_16_0, 
        		"NumberLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=']' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDefinitionSetAccess().getRightSquareBracketKeyword_2_5());
    }
))
;





// Entry rule entryRuleSignalAlias
entryRuleSignalAlias returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalAliasRule()); }
	 iv_ruleSignalAlias=ruleSignalAlias 
	 { $current=$iv_ruleSignalAlias.current; } 
	 EOF 
;

// Rule SignalAlias
ruleSignalAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAliasAccess().getSourceAccessibleEntityParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleAccessibleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalAliasRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"AccessibleEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalAliasAccess().getAsKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalAliasRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSignalAliasAccess().getAliasSignalCrossReference_1_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleSignalMode
entryRuleSignalMode returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalModeRule()); } 
	 iv_ruleSignalMode=ruleSignalMode 
	 { $current=$iv_ruleSignalMode.current.getText(); }  
	 EOF 
;

// Rule SignalMode
ruleSignalMode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignalModeAccess().getEventKeyword_0()); 
    }

    |
	kw='flow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignalModeAccess().getFlowKeyword_1()); 
    }

    |
	kw='constant' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignalModeAccess().getConstantKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataTypeAccess().getDataTypeBaseAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeAccess().getTypeTypeBaseParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleTypeBase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeBase");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataTypeAccess().getInKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeAccess().getDefinitionSetDefinitionSetParserRuleCall_0_2_1_0()); 
	    }
		lv_definitionSet_3_0=ruleDefinitionSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeRule());
	        }
       		set(
       			$current, 
       			"definitionSet",
        		lv_definitionSet_3_0, 
        		"DefinitionSet");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataTypeAccess().getDataTypeCollectionAction_1_0(),
            $current);
    }
)(
(
(
		lv_mode_5_1=	'set' 
    {
        newLeafNode(lv_mode_5_1, grammarAccess.getDataTypeAccess().getModeSetKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "mode", lv_mode_5_1, null);
	    }

    |		lv_mode_5_2=	'list' 
    {
        newLeafNode(lv_mode_5_2, grammarAccess.getDataTypeAccess().getModeListKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "mode", lv_mode_5_2, null);
	    }

    |		lv_mode_5_3=	'map' 
    {
        newLeafNode(lv_mode_5_3, grammarAccess.getDataTypeAccess().getModeMapKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "mode", lv_mode_5_3, null);
	    }

)

)
)	otherlv_6='of' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataTypeAccess().getOfKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getDataTypeAccess().getTypeDataTypeCrossReference_1_3_0()); 
	}

)
)(	otherlv_8='in' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataTypeAccess().getInKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeAccess().getDefinitionSetDefinitionSetParserRuleCall_1_4_1_0()); 
	    }
		lv_definitionSet_9_0=ruleDefinitionSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeRule());
	        }
       		set(
       			$current, 
       			"definitionSet",
        		lv_definitionSet_9_0, 
        		"DefinitionSet");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataTypeAccess().getDataTypeCompoundAction_2_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getDataTypeAccess().getCompoundDataTypeStructureCrossReference_2_1_0()); 
	}

)
)))
;





// Entry rule entryRuleTypeBase
entryRuleTypeBase returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeBaseRule()); } 
	 iv_ruleTypeBase=ruleTypeBase 
	 { $current=$iv_ruleTypeBase.current.getText(); }  
	 EOF 
;

// Rule TypeBase
ruleTypeBase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeBaseAccess().getVoidKeyword_0()); 
    }

    |
	kw='symbol' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeBaseAccess().getSymbolKeyword_1()); 
    }

    |
	kw='number' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeBaseAccess().getNumberKeyword_2()); 
    }

    |
	kw='text' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeBaseAccess().getTextKeyword_3()); 
    }

    |
	kw='time' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeBaseAccess().getTimeKeyword_4()); 
    }

    |
	kw='identifier' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeBaseAccess().getIdentifierKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleDataTypeDefinition
entryRuleDataTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeDefinitionRule()); }
	 iv_ruleDataTypeDefinition=ruleDataTypeDefinition 
	 { $current=$iv_ruleDataTypeDefinition.current; } 
	 EOF 
;

// Rule DataTypeDefinition
ruleDataTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getDataTypeDefinitionAccess().getDataTypeStructureParserRuleCall()); 
    }
    this_DataTypeStructure_0=ruleDataTypeStructure
    { 
        $current = $this_DataTypeStructure_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDataTypeStructure
entryRuleDataTypeStructure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeStructureRule()); }
	 iv_ruleDataTypeStructure=ruleDataTypeStructure 
	 { $current=$iv_ruleDataTypeStructure.current; } 
	 EOF 
;

// Rule DataTypeStructure
ruleDataTypeStructure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='structure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataTypeStructureAccess().getStructureKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDataTypeStructureAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeStructureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataTypeStructureAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeStructureAccess().getFieldsDataTypeStructureFieldParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleDataTypeStructureField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeStructureRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"DataTypeStructureField");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDataTypeStructureField
entryRuleDataTypeStructureField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeStructureFieldRule()); }
	 iv_ruleDataTypeStructureField=ruleDataTypeStructureField 
	 { $current=$iv_ruleDataTypeStructureField.current; } 
	 EOF 
;

// Rule DataTypeStructureField
ruleDataTypeStructureField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDataTypeStructureFieldAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeStructureFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataTypeStructureFieldAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeStructureFieldAccess().getTypeDataTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeStructureFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBehavior
entryRuleBehavior returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorRule()); }
	 iv_ruleBehavior=ruleBehavior 
	 { $current=$iv_ruleBehavior.current; } 
	 EOF 
;

// Rule Behavior
ruleBehavior returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getCauseCauseParserRuleCall_0_0()); 
	    }
		lv_cause_0_0=ruleCause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorRule());
	        }
       		set(
       			$current, 
       			"cause",
        		lv_cause_0_0, 
        		"Cause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getEffectsEffectParserRuleCall_2_0()); 
	    }
		lv_effects_2_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_2_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleCause
entryRuleCause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCauseRule()); }
	 iv_ruleCause=ruleCause 
	 { $current=$iv_ruleCause.current; } 
	 EOF 
;

// Rule Cause
ruleCause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCauseAccess().getOnCauseParserRuleCall_0()); 
    }
    this_OnCause_0=ruleOnCause
    { 
        $current = $this_OnCause_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCauseAccess().getWhenCauseParserRuleCall_1()); 
    }
    this_WhenCause_1=ruleWhenCause
    { 
        $current = $this_WhenCause_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOnCause
entryRuleOnCause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnCauseRule()); }
	 iv_ruleOnCause=ruleOnCause 
	 { $current=$iv_ruleOnCause.current; } 
	 EOF 
;

// Rule OnCause
ruleOnCause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnCauseAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnCauseAccess().getEventSignalReceptionParserRuleCall_1_0()); 
	    }
		lv_event_1_0=ruleSignalReception		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnCauseRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"SignalReception");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnCauseAccess().getIfKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); 
	    }
		lv_guard_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnCauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhenCause
entryRuleWhenCause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhenCauseRule()); }
	 iv_ruleWhenCause=ruleWhenCause 
	 { $current=$iv_ruleWhenCause.current; } 
	 EOF 
;

// Rule WhenCause
ruleWhenCause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='when' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhenCauseAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhenCauseAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhenCauseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhenCauseAccess().getIfKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhenCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); 
	    }
		lv_guard_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhenCauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getAlwaysEffectParserRuleCall_0()); 
    }
    this_AlwaysEffect_0=ruleAlwaysEffect
    { 
        $current = $this_AlwaysEffect_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getSetEffectParserRuleCall_1()); 
    }
    this_SetEffect_1=ruleSetEffect
    { 
        $current = $this_SetEffect_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getTriggerEffectParserRuleCall_2()); 
    }
    this_TriggerEffect_2=ruleTriggerEffect
    { 
        $current = $this_TriggerEffect_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAlwaysEffect
entryRuleAlwaysEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlwaysEffectRule()); }
	 iv_ruleAlwaysEffect=ruleAlwaysEffect 
	 { $current=$iv_ruleAlwaysEffect.current; } 
	 EOF 
;

// Rule AlwaysEffect
ruleAlwaysEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='always' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlwaysEffectAccess().getAlwaysKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlwaysEffectAccess().getTargetSignalEmissionParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleSignalEmission		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlwaysEffectRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"SignalEmission");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlwaysEffectAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlwaysEffectAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlwaysEffectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetEffect
entryRuleSetEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetEffectRule()); }
	 iv_ruleSetEffect=ruleSetEffect 
	 { $current=$iv_ruleSetEffect.current; } 
	 EOF 
;

// Rule SetEffect
ruleSetEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetEffectAccess().getSetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetEffectAccess().getTargetSignalEmissionParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleSignalEmission		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEffectRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"SignalEmission");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetEffectAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetEffectAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEffectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTriggerEffect
entryRuleTriggerEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerEffectRule()); }
	 iv_ruleTriggerEffect=ruleTriggerEffect 
	 { $current=$iv_ruleTriggerEffect.current; } 
	 EOF 
;

// Rule TriggerEffect
ruleTriggerEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='trigger' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggerEffectAccess().getTriggerKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerEffectAccess().getTargetSignalEmissionParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleSignalEmission		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerEffectRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"SignalEmission");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTriggerEffectAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerEffectAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerEffectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpOr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpOr");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOrRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOrAccess().getOrKeyword()); 
    }

    ;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpAnd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpAnd");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAndRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAndAccess().getAndKeyword()); 
    }

    ;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpEquality
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getFeatureOpEqualityParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpEquality");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpEqualityRule()); } 
	 iv_ruleOpEquality=ruleOpEquality 
	 { $current=$iv_ruleOpEquality.current.getText(); }  
	 EOF 
;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_OtherOperatorExpression_0=ruleOtherOperatorExpression
    { 
        $current = $this_OtherOperatorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpCompare
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpCompare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpCompare");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightOperandOtherOperatorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"OtherOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_0()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleOtherOperatorExpression
entryRuleOtherOperatorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherOperatorExpressionRule()); }
	 iv_ruleOtherOperatorExpression=ruleOtherOperatorExpression 
	 { $current=$iv_ruleOtherOperatorExpression.current; } 
	 EOF 
;

// Rule OtherOperatorExpression
ruleOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpOther
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpOther");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOtherRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_0()); 
    }

    |
	kw='?:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpAdd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpAdd");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAddRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); 
    }
    this_UnaryOperation_0=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpMulti
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getFeatureOpMultiParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpMulti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpMulti");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiRule()); } 
	 iv_ruleOpMulti=ruleOpMulti 
	 { $current=$iv_ruleOpMulti.current.getText(); }  
	 EOF 
;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_1()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getPercentSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); 
	    }
		lv_feature_1_0=ruleOpUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"OpUnary");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandPrimaryExpressionParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUnaryOperationAccess().getPrimaryExpressionParserRuleCall_1()); 
    }
    this_PrimaryExpression_3=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_0()); 
    }
    this_SwitchExpression_0=ruleSwitchExpression
    { 
        $current = $this_SwitchExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_1()); 
    }
    this_IfExpression_1=ruleIfExpression
    { 
        $current = $this_IfExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_2()); 
    }
    this_Literal_2=ruleLiteral
    { 
        $current = $this_Literal_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getForEachExpressionParserRuleCall_3()); 
    }
    this_ForEachExpression_3=ruleForEachExpression
    { 
        $current = $this_ForEachExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallExpressionParserRuleCall_4()); 
    }
    this_FunctionCallExpression_4=ruleFunctionCallExpression
    { 
        $current = $this_FunctionCallExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_5()); 
    }
    this_ParenthesizedExpression_5=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCollectionLiteralParserRuleCall_0()); 
    }
    this_CollectionLiteral_0=ruleCollectionLiteral
    { 
        $current = $this_CollectionLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
    }
    this_BooleanLiteral_1=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2()); 
    }
    this_NumberLiteral_2=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
    }
    this_NullLiteral_3=ruleNullLiteral
    { 
        $current = $this_NullLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getTimeLiteralParserRuleCall_5()); 
    }
    this_TimeLiteral_5=ruleTimeLiteral
    { 
        $current = $this_TimeLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getEnumLiteralAction_6_0(),
            $current);
    }
)	otherlv_7='#' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLiteralAccess().getNumberSignKeyword_6_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getLiteralAccess().getElementEnumElementCrossReference_6_2_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getSignalLiteralAction_7_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getLiteralAccess().getSignalSignalCrossReference_7_1_0()); 
	}

)
)))
;





// Entry rule entryRuleCollectionLiteral
entryRuleCollectionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionLiteralRule()); }
	 iv_ruleCollectionLiteral=ruleCollectionLiteral 
	 { $current=$iv_ruleCollectionLiteral.current; } 
	 EOF 
;

// Rule CollectionLiteral
ruleCollectionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCollectionLiteralAccess().getSetLiteralParserRuleCall_0()); 
    }
    this_SetLiteral_0=ruleSetLiteral
    { 
        $current = $this_SetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCollectionLiteralAccess().getListLiteralParserRuleCall_1()); 
    }
    this_ListLiteral_1=ruleListLiteral
    { 
        $current = $this_ListLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetLiteralAccess().getSetLiteralAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getElementsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getElementsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleListLiteral
entryRuleListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListLiteralRule()); }
	 iv_ruleListLiteral=ruleListLiteral 
	 { $current=$iv_ruleListLiteral.current; } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListLiteralAccess().getListLiteralAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfExpressionAccess().getIfExpressionAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIfKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getIfExpressionParserRuleCall_3_0()); 
	    }
		lv_if_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	')' 
)=>	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_4());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getElseKeyword_6_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchExpressionRule()); }
	 iv_ruleSwitchExpression=ruleSwitchExpression 
	 { $current=$iv_ruleSwitchExpression.current; } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitchExpressionAccess().getSwitchExpressionAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionParserRuleCall_3_0()); 
	    }
		lv_switch_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	')' 
)=>	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchExpressionAccess().getRightParenthesisKeyword_4());
    }
)((
(
ruleCasePart
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getCasesCasePartParserRuleCall_5_0()); 
	    }
		lv_cases_5_0=ruleCasePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_5_0, 
        		"CasePart");
	        afterParserOrEnumRuleCall();
	    }

)
)+(((	'default' 
)=>	otherlv_6='default' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_6_0());
    }
)	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSwitchExpressionAccess().getColonKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionParserRuleCall_6_2_0()); 
	    }
		lv_default_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCasePart
entryRuleCasePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCasePartRule()); }
	 iv_ruleCasePart=ruleCasePart 
	 { $current=$iv_ruleCasePart.current; } 
	 EOF 
;

// Rule CasePart
ruleCasePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCasePartAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCasePartAccess().getCaseExpressionParserRuleCall_1_0()); 
	    }
		lv_case_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCasePartRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCasePartAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCasePartAccess().getThenExpressionParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCasePartRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForEachExpression
entryRuleForEachExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForEachExpressionRule()); }
	 iv_ruleForEachExpression=ruleForEachExpression 
	 { $current=$iv_ruleForEachExpression.current; } 
	 EOF 
;

// Rule ForEachExpression
ruleForEachExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForEachExpressionAccess().getForEachExpressionAction_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForEachExpressionAccess().getForKeyword_1());
    }
	otherlv_2='each' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForEachExpressionAccess().getEachKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForEachExpressionAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachExpressionAccess().getForExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_forExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachExpressionRule());
	        }
       		set(
       			$current, 
       			"forExpression",
        		lv_forExpression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForEachExpressionAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachExpressionAccess().getEachExpressionExpressionParserRuleCall_6_0()); 
	    }
		lv_eachExpression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionCallExpression
entryRuleFunctionCallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallExpressionRule()); }
	 iv_ruleFunctionCallExpression=ruleFunctionCallExpression 
	 { $current=$iv_ruleFunctionCallExpression.current; } 
	 EOF 
;

// Rule FunctionCallExpression
ruleFunctionCallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionCallExpressionAccess().getFunctionCallExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getFunctionBuiltInFunctionParserRuleCall_1_0()); 
	    }
		lv_function_1_0=ruleBuiltInFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_1_0, 
        		"BuiltInFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getArgumentsExpressionParserRuleCall_3_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionCallExpressionAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getArgumentsExpressionParserRuleCall_4_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleBuiltInFunction
entryRuleBuiltInFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInFunctionRule()); } 
	 iv_ruleBuiltInFunction=ruleBuiltInFunction 
	 { $current=$iv_ruleBuiltInFunction.current.getText(); }  
	 EOF 
;

// Rule BuiltInFunction
ruleBuiltInFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Math.abs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAbsKeyword_0()); 
    }

    |
	kw='Math.acos' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAcosKeyword_1()); 
    }

    |
	kw='Math.acosh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAcoshKeyword_2()); 
    }

    |
	kw='Math.asin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAsinKeyword_3()); 
    }

    |
	kw='Math.asinh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAsinhKeyword_4()); 
    }

    |
	kw='Math.atan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAtanKeyword_5()); 
    }

    |
	kw='Math.atanh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAtanhKeyword_6()); 
    }

    |
	kw='Math.atan2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathAtan2Keyword_7()); 
    }

    |
	kw='Math.ceil' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathCeilKeyword_8()); 
    }

    |
	kw='Math.clip' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathClipKeyword_9()); 
    }

    |
	kw='Math.cos' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathCosKeyword_10()); 
    }

    |
	kw='Math.cosh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathCoshKeyword_11()); 
    }

    |
	kw='Math.exp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathExpKeyword_12()); 
    }

    |
	kw='Math.floor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathFloorKeyword_13()); 
    }

    |
	kw='Math.fround' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathFroundKeyword_14()); 
    }

    |
	kw='Math.hypot' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathHypotKeyword_15()); 
    }

    |
	kw='Math.log' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathLogKeyword_16()); 
    }

    |
	kw='Math.log10' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathLog10Keyword_17()); 
    }

    |
	kw='Math.log2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathLog2Keyword_18()); 
    }

    |
	kw='Math.max' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathMaxKeyword_19()); 
    }

    |
	kw='Math.min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathMinKeyword_20()); 
    }

    |
	kw='Math.pow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathPowKeyword_21()); 
    }

    |
	kw='Math.random' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathRandomKeyword_22()); 
    }

    |
	kw='Math.round' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathRoundKeyword_23()); 
    }

    |
	kw='Math.sign' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathSignKeyword_24()); 
    }

    |
	kw='Math.sin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathSinKeyword_25()); 
    }

    |
	kw='Math.sinh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathSinhKeyword_26()); 
    }

    |
	kw='Math.sqrt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathSqrtKeyword_27()); 
    }

    |
	kw='Math.tan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathTanKeyword_28()); 
    }

    |
	kw='Math.tanh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathTanhKeyword_29()); 
    }

    |
	kw='Math.trunc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getMathTruncKeyword_30()); 
    }

    |
	kw='Set.orderby' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getSetOrderbyKeyword_31()); 
    }

    |
	kw='Set.add' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getSetAddKeyword_32()); 
    }

    |
	kw='Set.find' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getSetFindKeyword_33()); 
    }

    |
	kw='Set.change' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getSetChangeKeyword_34()); 
    }

    |
	kw='Set.remove' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFunctionAccess().getSetRemoveKeyword_35()); 
    }
)
    ;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)(	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=	'true' 
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleEnumElement
entryRuleEnumElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumElementRule()); }
	 iv_ruleEnumElement=ruleEnumElement 
	 { $current=$iv_ruleEnumElement.current; } 
	 EOF 
;

// Rule EnumElement
ruleEnumElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumElementAccess().getEnumLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumElementAccess().getNumberSignKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEnumElementAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeLiteralRule()); }
	 iv_ruleTimeLiteral=ruleTimeLiteral 
	 { $current=$iv_ruleTimeLiteral.current; } 
	 EOF 
;

// Rule TimeLiteral
ruleTimeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralNowAction_0_0(),
            $current);
    }
)	otherlv_1='now' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimeLiteralAccess().getNowKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getYearNUMBERParserRuleCall_1_1_0_0()); 
	    }
		lv_year_3_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"year",
        		lv_year_3_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='year' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTimeLiteralAccess().getYearKeyword_1_1_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMonthNUMBERParserRuleCall_1_2_0_0()); 
	    }
		lv_month_5_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"month",
        		lv_month_5_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='month' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTimeLiteralAccess().getMonthKeyword_1_2_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getDayNUMBERParserRuleCall_1_3_0_0()); 
	    }
		lv_day_7_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_7_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='day' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTimeLiteralAccess().getDayKeyword_1_3_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getHourNUMBERParserRuleCall_1_4_0_0()); 
	    }
		lv_hour_9_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"hour",
        		lv_hour_9_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='hour' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTimeLiteralAccess().getHourKeyword_1_4_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMinuteNUMBERParserRuleCall_1_5_0_0()); 
	    }
		lv_minute_11_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_11_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12='m' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTimeLiteralAccess().getMKeyword_1_5_1_0());
    }

    |	otherlv_13='minute' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTimeLiteralAccess().getMinuteKeyword_1_5_1_1());
    }
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getSecondNUMBERParserRuleCall_1_6_0_0()); 
	    }
		lv_second_14_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_14_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15='s' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTimeLiteralAccess().getSKeyword_1_6_1_0());
    }

    |	otherlv_16='second' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTimeLiteralAccess().getSecondKeyword_1_6_1_1());
    }
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralAction_2_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMonthNUMBERParserRuleCall_2_1_0_0()); 
	    }
		lv_month_18_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"month",
        		lv_month_18_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19='month' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTimeLiteralAccess().getMonthKeyword_2_1_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getDayNUMBERParserRuleCall_2_2_0_0()); 
	    }
		lv_day_20_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_20_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_21='day' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getTimeLiteralAccess().getDayKeyword_2_2_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getHourNUMBERParserRuleCall_2_3_0_0()); 
	    }
		lv_hour_22_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"hour",
        		lv_hour_22_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23='hour' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTimeLiteralAccess().getHourKeyword_2_3_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMinuteNUMBERParserRuleCall_2_4_0_0()); 
	    }
		lv_minute_24_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_24_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_25='m' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTimeLiteralAccess().getMKeyword_2_4_1_0());
    }

    |	otherlv_26='minute' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getTimeLiteralAccess().getMinuteKeyword_2_4_1_1());
    }
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getSecondNUMBERParserRuleCall_2_5_0_0()); 
	    }
		lv_second_27_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_27_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_28='s' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getTimeLiteralAccess().getSKeyword_2_5_1_0());
    }

    |	otherlv_29='second' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTimeLiteralAccess().getSecondKeyword_2_5_1_1());
    }
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralAction_3_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getDayNUMBERParserRuleCall_3_1_0_0()); 
	    }
		lv_day_31_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_31_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_32='day' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getTimeLiteralAccess().getDayKeyword_3_1_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getHourNUMBERParserRuleCall_3_2_0_0()); 
	    }
		lv_hour_33_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"hour",
        		lv_hour_33_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_34='hour' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getTimeLiteralAccess().getHourKeyword_3_2_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMinuteNUMBERParserRuleCall_3_3_0_0()); 
	    }
		lv_minute_35_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_35_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_36='m' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getTimeLiteralAccess().getMKeyword_3_3_1_0());
    }

    |	otherlv_37='minute' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getTimeLiteralAccess().getMinuteKeyword_3_3_1_1());
    }
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getSecondNUMBERParserRuleCall_3_4_0_0()); 
	    }
		lv_second_38_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_38_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_39='s' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getTimeLiteralAccess().getSKeyword_3_4_1_0());
    }

    |	otherlv_40='second' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getTimeLiteralAccess().getSecondKeyword_3_4_1_1());
    }
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralAction_4_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getHourNUMBERParserRuleCall_4_1_0_0()); 
	    }
		lv_hour_42_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"hour",
        		lv_hour_42_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_43='hour' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getTimeLiteralAccess().getHourKeyword_4_1_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMinuteNUMBERParserRuleCall_4_2_0_0()); 
	    }
		lv_minute_44_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_44_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_45='m' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getTimeLiteralAccess().getMKeyword_4_2_1_0());
    }

    |	otherlv_46='minute' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getTimeLiteralAccess().getMinuteKeyword_4_2_1_1());
    }
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getSecondNUMBERParserRuleCall_4_3_0_0()); 
	    }
		lv_second_47_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_47_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_48='s' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getTimeLiteralAccess().getSKeyword_4_3_1_0());
    }

    |	otherlv_49='second' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getTimeLiteralAccess().getSecondKeyword_4_3_1_1());
    }
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralAction_5_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getMinuteNUMBERParserRuleCall_5_1_0_0()); 
	    }
		lv_minute_51_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_51_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_52='m' 
    {
    	newLeafNode(otherlv_52, grammarAccess.getTimeLiteralAccess().getMKeyword_5_1_1_0());
    }

    |	otherlv_53='minute' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getTimeLiteralAccess().getMinuteKeyword_5_1_1_1());
    }
))((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getSecondNUMBERParserRuleCall_5_2_0_0()); 
	    }
		lv_second_54_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_54_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_55='s' 
    {
    	newLeafNode(otherlv_55, grammarAccess.getTimeLiteralAccess().getSKeyword_5_2_1_0());
    }

    |	otherlv_56='second' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getTimeLiteralAccess().getSecondKeyword_5_2_1_1());
    }
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTimeLiteralAccess().getTimeLiteralAction_6_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeLiteralAccess().getSecondNUMBERParserRuleCall_6_1_0_0()); 
	    }
		lv_second_58_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_58_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_59='s' 
    {
    	newLeafNode(otherlv_59, grammarAccess.getTimeLiteralAccess().getSKeyword_6_1_1_0());
    }

    |	otherlv_60='second' 
    {
    	newLeafNode(otherlv_60, grammarAccess.getTimeLiteralAccess().getSecondKeyword_6_1_1_1());
    }
))))
;





// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); } 
	 iv_ruleNUMBER=ruleNUMBER 
	 { $current=$iv_ruleNUMBER.current.getText(); }  
	 EOF 
;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


