/*
* generated by Xtext
*/
grammar InternalLil;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.crubier.lil.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.crubier.lil.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.crubier.lil.services.LilGrammarAccess;

}

@parser::members {

 	private LilGrammarAccess grammarAccess;
 	
    public InternalLilParser(TokenStream input, LilGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected LilGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getInteractorsInteractorDeclarationParserRuleCall_0_0()); 
	    }
		lv_interactors_0_0=ruleInteractorDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"interactors",
        		lv_interactors_0_0, 
        		"InteractorDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDataTypesDataTypeDeclarationParserRuleCall_1_0()); 
	    }
		lv_dataTypes_1_0=ruleDataTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"dataTypes",
        		lv_dataTypes_1_0, 
        		"DataTypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleInteractorDeclaration
entryRuleInteractorDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteractorDeclarationRule()); }
	 iv_ruleInteractorDeclaration=ruleInteractorDeclaration 
	 { $current=$iv_ruleInteractorDeclaration.current; } 
	 EOF 
;

// Rule InteractorDeclaration
ruleInteractorDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interactor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInteractorDeclarationAccess().getInteractorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInteractorDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractorDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInteractorDeclarationAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInteractorDeclarationAccess().getEntitiesEntityDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_entities_3_0=ruleEntityDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractorDeclarationRule());
	        }
       		add(
       			$current, 
       			"entities",
        		lv_entities_3_0, 
        		"EntityDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteractorDeclarationAccess().getSignalsSignalDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_signals_4_0=ruleSignalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractorDeclarationRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_4_0, 
        		"SignalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteractorDeclarationAccess().getBehaviorsBehaviorDeclarationParserRuleCall_3_2_0()); 
	    }
		lv_behaviors_5_0=ruleBehaviorDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractorDeclarationRule());
	        }
       		add(
       			$current, 
       			"behaviors",
        		lv_behaviors_5_0, 
        		"BehaviorDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAccessibleEntity
entryRuleAccessibleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessibleEntityRule()); }
	 iv_ruleAccessibleEntity=ruleAccessibleEntity 
	 { $current=$iv_ruleAccessibleEntity.current; } 
	 EOF 
;

// Rule AccessibleEntity
ruleAccessibleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_generic_0_1=	'any' 
    {
        newLeafNode(lv_generic_0_1, grammarAccess.getAccessibleEntityAccess().getGenericAnyKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_1, null);
	    }

    |		lv_generic_0_2=	'self' 
    {
        newLeafNode(lv_generic_0_2, grammarAccess.getAccessibleEntityAccess().getGenericSelfKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_2, null);
	    }

    |		lv_generic_0_3=	'other' 
    {
        newLeafNode(lv_generic_0_3, grammarAccess.getAccessibleEntityAccess().getGenericOtherKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_3, null);
	    }

    |		lv_generic_0_4=	'parent' 
    {
        newLeafNode(lv_generic_0_4, grammarAccess.getAccessibleEntityAccess().getGenericParentKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_4, null);
	    }

    |		lv_generic_0_5=	'child' 
    {
        newLeafNode(lv_generic_0_5, grammarAccess.getAccessibleEntityAccess().getGenericChildKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_5, null);
	    }

    |		lv_generic_0_6=	'all' 
    {
        newLeafNode(lv_generic_0_6, grammarAccess.getAccessibleEntityAccess().getGenericAllKeyword_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_6, null);
	    }

    |		lv_generic_0_7=	'actors' 
    {
        newLeafNode(lv_generic_0_7, grammarAccess.getAccessibleEntityAccess().getGenericActorsKeyword_0_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessibleEntityRule());
	        }
       		setWithLastConsumed($current, "generic", lv_generic_0_7, null);
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessibleEntityAccess().getSpecificEntityParserRuleCall_1_0()); 
	    }
		lv_specific_1_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessibleEntityRule());
	        }
       		set(
       			$current, 
       			"specific",
        		lv_specific_1_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getInstanceEntityDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getActorAccess().getInstanceActorDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getInstanceComponentDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleEntityDeclaration
entryRuleEntityDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityDeclarationRule()); }
	 iv_ruleEntityDeclaration=ruleEntityDeclaration 
	 { $current=$iv_ruleEntityDeclaration.current; } 
	 EOF 
;

// Rule EntityDeclaration
ruleEntityDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityDeclarationAccess().getActorDeclarationParserRuleCall_0()); 
    }
    this_ActorDeclaration_0=ruleActorDeclaration
    { 
        $current = $this_ActorDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityDeclarationAccess().getComponentDeclarationParserRuleCall_1()); 
    }
    this_ComponentDeclaration_1=ruleComponentDeclaration
    { 
        $current = $this_ComponentDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActorDeclaration
entryRuleActorDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorDeclarationRule()); }
	 iv_ruleActorDeclaration=ruleActorDeclaration 
	 { $current=$iv_ruleActorDeclaration.current; } 
	 EOF 
;

// Rule ActorDeclaration
ruleActorDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='actor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActorDeclarationAccess().getActorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActorDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleActorAlias
entryRuleActorAlias returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorAliasRule()); }
	 iv_ruleActorAlias=ruleActorAlias 
	 { $current=$iv_ruleActorAlias.current; } 
	 EOF 
;

// Rule ActorAlias
ruleActorAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActorAliasAccess().getSourceActorParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorAliasRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActorAliasAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActorAliasAccess().getRemoteActorParserRuleCall_2_0()); 
	    }
		lv_remote_2_0=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorAliasRule());
	        }
       		set(
       			$current, 
       			"remote",
        		lv_remote_2_0, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComponentDeclaration
entryRuleComponentDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentDeclarationRule()); }
	 iv_ruleComponentDeclaration=ruleComponentDeclaration 
	 { $current=$iv_ruleComponentDeclaration.current; } 
	 EOF 
;

// Rule ComponentDeclaration
ruleComponentDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentDeclarationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getComponentDeclarationAccess().getInteractorInteractorDeclarationCrossReference_0_0()); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentDeclarationAccess().getWithKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentDeclarationAccess().getAliasesActorAliasParserRuleCall_2_1_0()); 
	    }
		lv_aliases_3_0=ruleActorAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentDeclarationRule());
	        }
       		add(
       			$current, 
       			"aliases",
        		lv_aliases_3_0, 
        		"ActorAlias");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentDeclarationAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentDeclarationAccess().getAliasesActorAliasParserRuleCall_2_2_1_0()); 
	    }
		lv_aliases_5_0=ruleActorAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentDeclarationRule());
	        }
       		add(
       			$current, 
       			"aliases",
        		lv_aliases_5_0, 
        		"ActorAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleEventReception
entryRuleEventReception returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventReceptionRule()); }
	 iv_ruleEventReception=ruleEventReception 
	 { $current=$iv_ruleEventReception.current; } 
	 EOF 
;

// Rule EventReception
ruleEventReception returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventReceptionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEventReceptionAccess().getInstanceEventDeclarationCrossReference_0_0_0()); 
	}

)
)(	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventReceptionAccess().getFromKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventReceptionAccess().getSourceComponentParserRuleCall_0_1_1_0()); 
	    }
		lv_source_2_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventReceptionRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_2_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
(
		lv_base_3_0=	'init' 
    {
        newLeafNode(lv_base_3_0, grammarAccess.getEventReceptionAccess().getBaseInitKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventReceptionRule());
	        }
       		setWithLastConsumed($current, "base", lv_base_3_0, "init");
	    }

)
))
;







// Entry rule entryRuleEventEmission
entryRuleEventEmission returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventEmissionRule()); }
	 iv_ruleEventEmission=ruleEventEmission 
	 { $current=$iv_ruleEventEmission.current; } 
	 EOF 
;

// Rule EventEmission
ruleEventEmission returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventEmissionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEventEmissionAccess().getInstanceEventDeclarationCrossReference_0_0()); 
	}

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventEmissionAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventEmissionAccess().getDestinationComponentParserRuleCall_1_1_0()); 
	    }
		lv_destination_2_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventEmissionRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_2_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFlowEmission
entryRuleFlowEmission returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowEmissionRule()); }
	 iv_ruleFlowEmission=ruleFlowEmission 
	 { $current=$iv_ruleFlowEmission.current; } 
	 EOF 
;

// Rule FlowEmission
ruleFlowEmission returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowEmissionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFlowEmissionAccess().getInstanceFlowDeclarationCrossReference_0_0()); 
	}

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlowEmissionAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowEmissionAccess().getDestinationComponentParserRuleCall_1_1_0()); 
	    }
		lv_destination_2_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowEmissionRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_2_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSignalDeclaration
entryRuleSignalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalDeclarationRule()); }
	 iv_ruleSignalDeclaration=ruleSignalDeclaration 
	 { $current=$iv_ruleSignalDeclaration.current; } 
	 EOF 
;

// Rule SignalDeclaration
ruleSignalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSignalDeclarationAccess().getEventDeclarationParserRuleCall_0()); 
    }
    this_EventDeclaration_0=ruleEventDeclaration
    { 
        $current = $this_EventDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSignalDeclarationAccess().getFlowDeclarationParserRuleCall_1()); 
    }
    this_FlowDeclaration_1=ruleFlowDeclaration
    { 
        $current = $this_FlowDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDeclarationRule()); }
	 iv_ruleEventDeclaration=ruleEventDeclaration 
	 { $current=$iv_ruleEventDeclaration.current; } 
	 EOF 
;

// Rule EventDeclaration
ruleEventDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEventDeclarationAccess().getTypeDataTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='event' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventDeclarationAccess().getEventKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='from' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEventDeclarationAccess().getFromKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDeclarationAccess().getSourceAccessibleEntityParserRuleCall_3_1_0()); 
	    }
		lv_source_4_0=ruleAccessibleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_4_0, 
        		"AccessibleEntity");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEventDeclarationAccess().getToKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDeclarationAccess().getDestinationsAccessibleEntityParserRuleCall_4_1_0()); 
	    }
		lv_destinations_6_0=ruleAccessibleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
	        }
       		add(
       			$current, 
       			"destinations",
        		lv_destinations_6_0, 
        		"AccessibleEntity");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFlowDeclaration
entryRuleFlowDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowDeclarationRule()); }
	 iv_ruleFlowDeclaration=ruleFlowDeclaration 
	 { $current=$iv_ruleFlowDeclaration.current; } 
	 EOF 
;

// Rule FlowDeclaration
ruleFlowDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFlowDeclarationAccess().getTypeDataTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='flow' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlowDeclarationAccess().getFlowKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFlowDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='from' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFlowDeclarationAccess().getFromKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowDeclarationAccess().getSourceAccessibleEntityParserRuleCall_3_1_0()); 
	    }
		lv_source_4_0=ruleAccessibleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowDeclarationRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_4_0, 
        		"AccessibleEntity");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFlowDeclarationAccess().getToKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowDeclarationAccess().getDestinationsAccessibleEntityParserRuleCall_4_1_0()); 
	    }
		lv_destinations_6_0=ruleAccessibleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowDeclarationRule());
	        }
       		add(
       			$current, 
       			"destinations",
        		lv_destinations_6_0, 
        		"AccessibleEntity");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBehaviorDeclaration
entryRuleBehaviorDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorDeclarationRule()); }
	 iv_ruleBehaviorDeclaration=ruleBehaviorDeclaration 
	 { $current=$iv_ruleBehaviorDeclaration.current; } 
	 EOF 
;

// Rule BehaviorDeclaration
ruleBehaviorDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorDeclarationAccess().getCauseCauseParserRuleCall_0_0()); 
	    }
		lv_cause_0_0=ruleCause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorDeclarationRule());
	        }
       		set(
       			$current, 
       			"cause",
        		lv_cause_0_0, 
        		"Cause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorDeclarationAccess().getEffectsEffectParserRuleCall_2_0()); 
	    }
		lv_effects_2_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorDeclarationRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_2_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleCause
entryRuleCause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCauseRule()); }
	 iv_ruleCause=ruleCause 
	 { $current=$iv_ruleCause.current; } 
	 EOF 
;

// Rule Cause
ruleCause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCauseAccess().getOnCauseParserRuleCall_0()); 
    }
    this_OnCause_0=ruleOnCause
    { 
        $current = $this_OnCause_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCauseAccess().getWhenCauseParserRuleCall_1()); 
    }
    this_WhenCause_1=ruleWhenCause
    { 
        $current = $this_WhenCause_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOnCause
entryRuleOnCause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnCauseRule()); }
	 iv_ruleOnCause=ruleOnCause 
	 { $current=$iv_ruleOnCause.current; } 
	 EOF 
;

// Rule OnCause
ruleOnCause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnCauseAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnCauseAccess().getEventEventReceptionParserRuleCall_1_0()); 
	    }
		lv_event_1_0=ruleEventReception		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnCauseRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"EventReception");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnCauseAccess().getIfKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); 
	    }
		lv_guard_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnCauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhenCause
entryRuleWhenCause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhenCauseRule()); }
	 iv_ruleWhenCause=ruleWhenCause 
	 { $current=$iv_ruleWhenCause.current; } 
	 EOF 
;

// Rule WhenCause
ruleWhenCause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='when' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhenCauseAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhenCauseAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhenCauseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhenCauseAccess().getIfKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhenCauseAccess().getGuardExpressionParserRuleCall_2_1_0()); 
	    }
		lv_guard_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhenCauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getAlwaysEffectParserRuleCall_0()); 
    }
    this_AlwaysEffect_0=ruleAlwaysEffect
    { 
        $current = $this_AlwaysEffect_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getSetEffectParserRuleCall_1()); 
    }
    this_SetEffect_1=ruleSetEffect
    { 
        $current = $this_SetEffect_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getTriggerEffectParserRuleCall_2()); 
    }
    this_TriggerEffect_2=ruleTriggerEffect
    { 
        $current = $this_TriggerEffect_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAlwaysEffect
entryRuleAlwaysEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlwaysEffectRule()); }
	 iv_ruleAlwaysEffect=ruleAlwaysEffect 
	 { $current=$iv_ruleAlwaysEffect.current; } 
	 EOF 
;

// Rule AlwaysEffect
ruleAlwaysEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='always' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlwaysEffectAccess().getAlwaysKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlwaysEffectAccess().getTargetFlowEmissionParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleFlowEmission		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlwaysEffectRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"FlowEmission");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlwaysEffectAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlwaysEffectAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlwaysEffectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetEffect
entryRuleSetEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetEffectRule()); }
	 iv_ruleSetEffect=ruleSetEffect 
	 { $current=$iv_ruleSetEffect.current; } 
	 EOF 
;

// Rule SetEffect
ruleSetEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetEffectAccess().getSetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetEffectAccess().getTargetFlowEmissionParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleFlowEmission		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEffectRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"FlowEmission");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetEffectAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetEffectAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEffectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTriggerEffect
entryRuleTriggerEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerEffectRule()); }
	 iv_ruleTriggerEffect=ruleTriggerEffect 
	 { $current=$iv_ruleTriggerEffect.current; } 
	 EOF 
;

// Rule TriggerEffect
ruleTriggerEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='trigger' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggerEffectAccess().getTriggerKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerEffectAccess().getTargetEventEmissionParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleEventEmission		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerEffectRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"EventEmission");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTriggerEffectAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerEffectAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerEffectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall()); 
    }
    this_NumberExpression_0=ruleNumberExpression
    { 
        $current = $this_NumberExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDataTypeDeclaration
entryRuleDataTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeDeclarationRule()); }
	 iv_ruleDataTypeDeclaration=ruleDataTypeDeclaration 
	 { $current=$iv_ruleDataTypeDeclaration.current; } 
	 EOF 
;

// Rule DataTypeDeclaration
ruleDataTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='data' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataTypeDeclarationAccess().getDataKeyword_0());
    }
	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataTypeDeclarationAccess().getTypeKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDataTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataTypeDeclarationAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeDeclarationAccess().getFieldsFieldParserRuleCall_4_0()); 
	    }
		lv_fields_4_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_4_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeDataTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getCompoundDataTypeDeclarationCrossReference_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeAccess().getBaseDataTypeBaseParserRuleCall_1_0()); 
	    }
		lv_base_1_0=ruleDataTypeBase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_1_0, 
        		"DataTypeBase");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataTypeBase
entryRuleDataTypeBase returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeBaseRule()); } 
	 iv_ruleDataTypeBase=ruleDataTypeBase 
	 { $current=$iv_ruleDataTypeBase.current.getText(); }  
	 EOF 
;

// Rule DataTypeBase
ruleDataTypeBase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeBaseAccess().getVoidKeyword_0()); 
    }

    |
	kw='symbol' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeBaseAccess().getSymbolKeyword_1()); 
    }

    |
	kw='number' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeBaseAccess().getNumberKeyword_2()); 
    }

    |
	kw='text' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeBaseAccess().getTextKeyword_3()); 
    }

    |
	kw='time' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeBaseAccess().getTimeKeyword_4()); 
    }

    |
	kw='reference' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeBaseAccess().getReferenceKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanDisjonctionParserRuleCall()); 
    }
    this_BooleanDisjonction_0=ruleBooleanDisjonction
    { 
        $current = $this_BooleanDisjonction_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBooleanDisjonction
entryRuleBooleanDisjonction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanDisjonctionRule()); }
	 iv_ruleBooleanDisjonction=ruleBooleanDisjonction 
	 { $current=$iv_ruleBooleanDisjonction.current; } 
	 EOF 
;

// Rule BooleanDisjonction
ruleBooleanDisjonction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanDisjonctionAccess().getBooleanConjonctionParserRuleCall_0()); 
    }
    this_BooleanConjonction_0=ruleBooleanConjonction
    { 
        $current = $this_BooleanConjonction_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBooleanDisjonctionAccess().getBooleanDisjonctionLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanDisjonctionAccess().getOrKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanDisjonctionAccess().getRightBooleanConjonctionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBooleanConjonction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanDisjonctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BooleanConjonction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBooleanConjonction
entryRuleBooleanConjonction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanConjonctionRule()); }
	 iv_ruleBooleanConjonction=ruleBooleanConjonction 
	 { $current=$iv_ruleBooleanConjonction.current; } 
	 EOF 
;

// Rule BooleanConjonction
ruleBooleanConjonction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanConjonctionAccess().getBooleanUnaryParserRuleCall_0()); 
    }
    this_BooleanUnary_0=ruleBooleanUnary
    { 
        $current = $this_BooleanUnary_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBooleanConjonctionAccess().getBooleanConjonctionLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanConjonctionAccess().getAndKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanConjonctionAccess().getRightBooleanUnaryParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBooleanUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanConjonctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BooleanUnary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBooleanUnary
entryRuleBooleanUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanUnaryRule()); }
	 iv_ruleBooleanUnary=ruleBooleanUnary 
	 { $current=$iv_ruleBooleanUnary.current; } 
	 EOF 
;

// Rule BooleanUnary
ruleBooleanUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanUnaryAccess().getBooleanTerminalExpressionParserRuleCall_0()); 
    }
    this_BooleanTerminalExpression_0=ruleBooleanTerminalExpression
    { 
        $current = $this_BooleanTerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanUnaryAccess().getBooleanNegationAction_1_0_0(),
            $current);
    }
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanUnaryAccess().getExclamationMarkKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanUnaryAccess().getOperandBooleanTerminalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_operand_3_0=ruleBooleanTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanUnaryRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"BooleanTerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBooleanTerminalExpression
entryRuleBooleanTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTerminalExpressionRule()); }
	 iv_ruleBooleanTerminalExpression=ruleBooleanTerminalExpression 
	 { $current=$iv_ruleBooleanTerminalExpression.current; } 
	 EOF 
;

// Rule BooleanTerminalExpression
ruleBooleanTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanTerminalExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getBooleanTerminalExpressionAccess().getBooleanExpressionParserRuleCall_0_1()); 
    }
    this_BooleanExpression_1=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanTerminalExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanTerminalExpressionAccess().getBooleanLiteralAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanTerminalExpressionAccess().getValueBooleanLiteralParserRuleCall_1_1_0()); 
	    }
		lv_value_4_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleNumberExpression
entryRuleNumberExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberExpressionRule()); }
	 iv_ruleNumberExpression=ruleNumberExpression 
	 { $current=$iv_ruleNumberExpression.current; } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNumberExpressionAccess().getNumberCompoundExpressionParserRuleCall()); 
    }
    this_NumberCompoundExpression_0=ruleNumberCompoundExpression
    { 
        $current = $this_NumberCompoundExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNumberCompoundExpression
entryRuleNumberCompoundExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberCompoundExpressionRule()); }
	 iv_ruleNumberCompoundExpression=ruleNumberCompoundExpression 
	 { $current=$iv_ruleNumberCompoundExpression.current; } 
	 EOF 
;

// Rule NumberCompoundExpression
ruleNumberCompoundExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getNumberAdditionParserRuleCall_0()); 
    }
    this_NumberAddition_0=ruleNumberAddition
    { 
        $current = $this_NumberAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberCompoundExpressionAccess().getNumberIfExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberCompoundExpressionAccess().getIfKeyword_1_1());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumberCompoundExpressionAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getIfBooleanExpressionParserRuleCall_1_3_0()); 
	    }
		lv_if_4_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberCompoundExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_4_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNumberCompoundExpressionAccess().getRightParenthesisKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getThenNumberAdditionParserRuleCall_1_5_0()); 
	    }
		lv_then_6_0=ruleNumberAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberCompoundExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_6_0, 
        		"NumberAddition");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNumberCompoundExpressionAccess().getElseKeyword_1_6_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getElseNumberAdditionParserRuleCall_1_6_1_0()); 
	    }
		lv_else_8_0=ruleNumberAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberCompoundExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_8_0, 
        		"NumberAddition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberCompoundExpressionAccess().getNumberSwitchExpressionAction_2_0(),
            $current);
    }
)	otherlv_10='switch' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNumberCompoundExpressionAccess().getSwitchKeyword_2_1());
    }
	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNumberCompoundExpressionAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getSwitchNumberExpressionParserRuleCall_2_3_0()); 
	    }
		lv_switch_12_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberCompoundExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_12_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getNumberCompoundExpressionAccess().getRightParenthesisKeyword_2_4());
    }
((
(
ruleNumberSwitchExpressionNumberCase
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getCasesNumberSwitchExpressionNumberCaseParserRuleCall_2_5_0()); 
	    }
		lv_cases_14_0=ruleNumberSwitchExpressionNumberCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberCompoundExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_14_0, 
        		"NumberSwitchExpressionNumberCase");
	        afterParserOrEnumRuleCall();
	    }

)
)+(((	'default' 
)=>	otherlv_15='default' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getNumberCompoundExpressionAccess().getDefaultKeyword_2_6_0());
    }
)	otherlv_16=':' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getNumberCompoundExpressionAccess().getColonKeyword_2_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberCompoundExpressionAccess().getDefaultNumberExpressionParserRuleCall_2_6_2_0()); 
	    }
		lv_default_17_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberCompoundExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_17_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleNumberSwitchExpressionNumberCase
entryRuleNumberSwitchExpressionNumberCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberSwitchExpressionNumberCaseRule()); }
	 iv_ruleNumberSwitchExpressionNumberCase=ruleNumberSwitchExpressionNumberCase 
	 { $current=$iv_ruleNumberSwitchExpressionNumberCase.current; } 
	 EOF 
;

// Rule NumberSwitchExpressionNumberCase
ruleNumberSwitchExpressionNumberCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getConditionNumberExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberSwitchExpressionNumberCaseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberSwitchExpressionNumberCaseAccess().getValueNumberExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberSwitchExpressionNumberCaseRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumberAddition
entryRuleNumberAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberAdditionRule()); }
	 iv_ruleNumberAddition=ruleNumberAddition 
	 { $current=$iv_ruleNumberAddition.current; } 
	 EOF 
;

// Rule NumberAddition
ruleNumberAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAdditionAccess().getNumberMultiplicationParserRuleCall_0()); 
    }
    this_NumberMultiplication_0=ruleNumberMultiplication
    { 
        $current = $this_NumberMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumberAdditionAccess().getNumberAdditionLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumberAdditionAccess().getNumberSubstractionLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNumberAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberAdditionAccess().getRightNumberMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleNumberMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"NumberMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumberMultiplication
entryRuleNumberMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberMultiplicationRule()); }
	 iv_ruleNumberMultiplication=ruleNumberMultiplication 
	 { $current=$iv_ruleNumberMultiplication.current; } 
	 EOF 
;

// Rule NumberMultiplication
ruleNumberMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberMultiplicationAccess().getNumberPowerParserRuleCall_0()); 
    }
    this_NumberPower_0=ruleNumberPower
    { 
        $current = $this_NumberPower_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumberMultiplicationAccess().getNumberMultiplicationLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumberMultiplicationAccess().getNumberDivisionLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNumberMultiplicationAccess().getSolidusKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumberMultiplicationAccess().getNumberModuloLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='%' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNumberMultiplicationAccess().getPercentSignKeyword_1_0_2_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberMultiplicationAccess().getRightNumberPowerParserRuleCall_1_1_0()); 
	    }
		lv_right_7_0=ruleNumberPower		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"NumberPower");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumberPower
entryRuleNumberPower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberPowerRule()); }
	 iv_ruleNumberPower=ruleNumberPower 
	 { $current=$iv_ruleNumberPower.current; } 
	 EOF 
;

// Rule NumberPower
ruleNumberPower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberPowerAccess().getNumberUnaryParserRuleCall_0()); 
    }
    this_NumberUnary_0=ruleNumberUnary
    { 
        $current = $this_NumberUnary_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumberPowerAccess().getNumberPowerLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberPowerAccess().getCircumflexAccentKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberPowerAccess().getRightNumberUnaryParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleNumberUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberPowerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"NumberUnary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumberUnary
entryRuleNumberUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberUnaryRule()); }
	 iv_ruleNumberUnary=ruleNumberUnary 
	 { $current=$iv_ruleNumberUnary.current; } 
	 EOF 
;

// Rule NumberUnary
ruleNumberUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberUnaryAccess().getNumberTerminalExpressionParserRuleCall_0()); 
    }
    this_NumberTerminalExpression_0=ruleNumberTerminalExpression
    { 
        $current = $this_NumberTerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberUnaryAccess().getNumberOppositionAction_1_0_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberUnaryAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberUnaryAccess().getOperandNumberTerminalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_operand_3_0=ruleNumberTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberUnaryRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"NumberTerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleNumberTerminalExpression
entryRuleNumberTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberTerminalExpressionRule()); }
	 iv_ruleNumberTerminalExpression=ruleNumberTerminalExpression 
	 { $current=$iv_ruleNumberTerminalExpression.current; } 
	 EOF 
;

// Rule NumberTerminalExpression
ruleNumberTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNumberTerminalExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getNumberTerminalExpressionAccess().getNumberExpressionParserRuleCall_0_1()); 
    }
    this_NumberExpression_1=ruleNumberExpression
    { 
        $current = $this_NumberExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberTerminalExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberTerminalExpressionAccess().getNumberLiteralAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberTerminalExpressionAccess().getValueNumberLiteralParserRuleCall_1_1_0()); 
	    }
		lv_value_4_0=ruleNumberLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"NumberLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberTerminalExpressionAccess().getNumberFunctionExpressionAction_2_0(),
            $current);
    }
)(
(
		lv_function_6_0=RULE_ID
		{
			newLeafNode(lv_function_6_0, grammarAccess.getNumberTerminalExpressionAccess().getFunctionIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_6_0, 
        		"ID");
	    }

)
)(	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNumberTerminalExpressionAccess().getLeftParenthesisKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsNumberExpressionParserRuleCall_2_2_1_0()); 
	    }
		lv_arguments_8_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_8_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNumberTerminalExpressionAccess().getCommaKeyword_2_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberTerminalExpressionAccess().getArgumentsNumberExpressionParserRuleCall_2_2_2_1_0()); 
	    }
		lv_arguments_10_0=ruleNumberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"NumberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNumberTerminalExpressionAccess().getRightParenthesisKeyword_2_2_3());
    }
)?))
;







// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); } 
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current.getText(); }  
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); 
    }

    |
	kw='yes' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getYesKeyword_1()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_2()); 
    }

    |
	kw='no' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getNoKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); } 
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current.getText(); }  
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberLiteralAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;













RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


