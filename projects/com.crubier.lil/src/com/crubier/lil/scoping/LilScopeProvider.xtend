/*
 * generated by Xtext
 */
package com.crubier.lil.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.emf.ecore.EObject
import com.crubier.lil.lil.LilPackage
import com.crubier.lil.lil.LilFactory
import com.crubier.lil.lil.InteractorSignalEmission
import com.crubier.lil.lil.InteractorTypeDefinition
import com.crubier.lil.lil.InteractorComponent
import com.crubier.lil.lil.LiteralEnum
import java.util.HashSet
import com.crubier.lil.lil.DataDefinitionEnumElement
import com.crubier.lil.lil.DataDefinitionSetEnum

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class LilScopeProvider extends AbstractDeclarativeScopeProvider {

	// flow emission instance scope : either a signal defined in this interactor, or a signal defined in the interactor specified by the "to <destination>" statement
	def public IScope scope_InteractorSignalEmission_instance(InteractorSignalEmission signalemission, EReference ref) {
		if (signalemission.destination == null) {
			var EObject temp = signalemission;
			while (!(temp instanceof InteractorTypeDefinition)) {
				temp = temp.eContainer;
			}
			return Scopes.scopeFor(temp.eContents);
		} else {

			//        	println((flowemission.destination.source.specific as Component).interactor.eContents);
			return Scopes.scopeFor((signalemission?.destination?.source?.specific as InteractorComponent)?.type?.custom?.eContents);
		}
	}
//
	// enum literal scope is at the interactor level
	def public IScope scope_LiteralEnum_value(LiteralEnum literal, EReference ref) {
		var EObject object = literal;
		while (!(object instanceof InteractorTypeDefinition)) {
			object = object.eContainer;
		}

		val elements = new HashSet<DataDefinitionEnumElement>
		val interactor = object as InteractorTypeDefinition
		for (s : interactor.data) {
			if(s?.type?.definitionSet instanceof DataDefinitionSetEnum)
				if ((s?.type?.definitionSet as DataDefinitionSetEnum)?.element != null)
					elements.addAll((s?.type?.definitionSet as DataDefinitionSetEnum).element)
		}
		return Scopes.scopeFor(elements);
	}

}
