/*
 * generated by Xtext
 */
package com.crubier.lil.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.crubier.lil.lil.Interactor
import org.eclipse.xtext.parsetree.reconstr.Serializer
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.xbase.compiler.TypeReferenceSerializer
import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class LilGeneratorFlattenedLil implements IGenerator {
	
//	@Inject extension Serializer serializer;
	
	 @Inject extension Serializer
	
	
	
//	Injector injector = Guice.createInjector(new com.crubier.lil.LilRuntimeModule());  
//	Serializer serializer = injector.getInstance(Serializer);  
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		println("generate flattened lil code");
		
		for(e : resource.allContents.toIterable.filter(typeof(Interactor))) {
			
			fsa.generateFile("flattenedLil/"+e.name+".c",serialize(e))
		}
		
//		fsa.generateFile('gen.java', 'test :\n' + 
//			resource.allContents.filter(typeof(InteractorDeclaration)).map[name].join(', '))
	}
	
	
	
	
}
