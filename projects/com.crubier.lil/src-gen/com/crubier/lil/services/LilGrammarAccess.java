/*
* generated by Xtext
*/
package com.crubier.lil.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class LilGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LilModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LilModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInteractorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInteractorsInteractorParserRuleCall_0_0 = (RuleCall)cInteractorsAssignment_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypesDataTypeDefinitionParserRuleCall_1_0 = (RuleCall)cDataTypesAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Model
		//LilModel:
		//	(interactors+=Interactor | dataTypes+=DataTypeDefinition)*;
		public ParserRule getRule() { return rule; }

		//(interactors+=Interactor | dataTypes+=DataTypeDefinition)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//interactors+=Interactor
		public Assignment getInteractorsAssignment_0() { return cInteractorsAssignment_0; }

		//Interactor
		public RuleCall getInteractorsInteractorParserRuleCall_0_0() { return cInteractorsInteractorParserRuleCall_0_0; }

		//dataTypes+=DataTypeDefinition
		public Assignment getDataTypesAssignment_1() { return cDataTypesAssignment_1; }

		//DataTypeDefinition
		public RuleCall getDataTypesDataTypeDefinitionParserRuleCall_1_0() { return cDataTypesDataTypeDefinitionParserRuleCall_1_0; }
	}

	public class InteractorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0_0 = (RuleCall)cEntitiesAssignment_3_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Assignment cBehaviorsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_3_2_0 = (RuleCall)cBehaviorsAssignment_3_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor
		//Interactor:
		//	"interactor" name=ID ":" (entities+=Entity | signals+=Signal | behaviors+=Behavior)*;
		public ParserRule getRule() { return rule; }

		//"interactor" name=ID ":" (entities+=Entity | signals+=Signal | behaviors+=Behavior)*
		public Group getGroup() { return cGroup; }

		//"interactor"
		public Keyword getInteractorKeyword_0() { return cInteractorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(entities+=Entity | signals+=Signal | behaviors+=Behavior)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_3_0() { return cEntitiesAssignment_3_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0_0() { return cEntitiesEntityParserRuleCall_3_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_0() { return cSignalsSignalParserRuleCall_3_1_0; }

		//behaviors+=Behavior
		public Assignment getBehaviorsAssignment_3_2() { return cBehaviorsAssignment_3_2; }

		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_3_2_0() { return cBehaviorsBehaviorParserRuleCall_3_2_0; }
	}

	public class AccessibleEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessibleEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenericAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGenericGenericEntityParserRuleCall_0_0 = (RuleCall)cGenericAssignment_0.eContents().get(0);
		private final Assignment cSpecificAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cSpecificEntityCrossReference_1_0 = (CrossReference)cSpecificAssignment_1.eContents().get(0);
		private final RuleCall cSpecificEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cSpecificEntityCrossReference_1_0.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Entities
		//AccessibleEntity:
		//	generic=GenericEntity | specific=[Entity];
		public ParserRule getRule() { return rule; }

		//generic=GenericEntity | specific=[Entity]
		public Alternatives getAlternatives() { return cAlternatives; }

		//generic=GenericEntity
		public Assignment getGenericAssignment_0() { return cGenericAssignment_0; }

		//GenericEntity
		public RuleCall getGenericGenericEntityParserRuleCall_0_0() { return cGenericGenericEntityParserRuleCall_0_0; }

		//specific=[Entity]
		public Assignment getSpecificAssignment_1() { return cSpecificAssignment_1; }

		//[Entity]
		public CrossReference getSpecificEntityCrossReference_1_0() { return cSpecificEntityCrossReference_1_0; }

		//ID
		public RuleCall getSpecificEntityIDTerminalRuleCall_1_0_1() { return cSpecificEntityIDTerminalRuleCall_1_0_1; }
	}

	public class GenericEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAnyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOtherKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cParentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cChildKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAllKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cActorsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//GenericEntity:
		//	"any" | "self" | "other" | "parent" | "child" | "all" | "actors";
		public ParserRule getRule() { return rule; }

		//"any" | "self" | "other" | "parent" | "child" | "all" | "actors"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"any"
		public Keyword getAnyKeyword_0() { return cAnyKeyword_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }

		//"other"
		public Keyword getOtherKeyword_2() { return cOtherKeyword_2; }

		//"parent"
		public Keyword getParentKeyword_3() { return cParentKeyword_3; }

		//"child"
		public Keyword getChildKeyword_4() { return cChildKeyword_4; }

		//"all"
		public Keyword getAllKeyword_5() { return cAllKeyword_5; }

		//"actors"
		public Keyword getActorsKeyword_6() { return cActorsKeyword_6; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	Actor | Component;
		public ParserRule getRule() { return rule; }

		//Actor | Component
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Actor:
		//	name=ID ":" "actor";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "actor"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"actor"
		public Keyword getActorKeyword_2() { return cActorKeyword_2; }
	}

	public class ActorAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceActorCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceActorCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAliasActorCrossReference_2_0 = (CrossReference)cAliasAssignment_2.eContents().get(0);
		private final RuleCall cAliasActorIDTerminalRuleCall_2_0_1 = (RuleCall)cAliasActorCrossReference_2_0.eContents().get(1);
		
		//ActorAlias:
		//	source=[Actor] "as" alias=[Actor];
		public ParserRule getRule() { return rule; }

		//source=[Actor] "as" alias=[Actor]
		public Group getGroup() { return cGroup; }

		//source=[Actor]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_0_0() { return cSourceActorCrossReference_0_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_0_0_1() { return cSourceActorIDTerminalRuleCall_0_0_1; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//alias=[Actor]
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//[Actor]
		public CrossReference getAliasActorCrossReference_2_0() { return cAliasActorCrossReference_2_0; }

		//ID
		public RuleCall getAliasActorIDTerminalRuleCall_2_0_1() { return cAliasActorIDTerminalRuleCall_2_0_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInteractorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInteractorInteractorCrossReference_2_0 = (CrossReference)cInteractorAssignment_2.eContents().get(0);
		private final RuleCall cInteractorInteractorIDTerminalRuleCall_2_0_1 = (RuleCall)cInteractorInteractorCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorsActorAliasParserRuleCall_3_1_0 = (RuleCall)cActorsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cActorsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cActorsActorAliasParserRuleCall_3_2_1_0 = (RuleCall)cActorsAssignment_3_2_1.eContents().get(0);
		
		//Component:
		//	name=ID ":" interactor=[Interactor] ("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" interactor=[Interactor] ("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//interactor=[Interactor]
		public Assignment getInteractorAssignment_2() { return cInteractorAssignment_2; }

		//[Interactor]
		public CrossReference getInteractorInteractorCrossReference_2_0() { return cInteractorInteractorCrossReference_2_0; }

		//ID
		public RuleCall getInteractorInteractorIDTerminalRuleCall_2_0_1() { return cInteractorInteractorIDTerminalRuleCall_2_0_1; }

		//("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//actors+=ActorAlias
		public Assignment getActorsAssignment_3_1() { return cActorsAssignment_3_1; }

		//ActorAlias
		public RuleCall getActorsActorAliasParserRuleCall_3_1_0() { return cActorsActorAliasParserRuleCall_3_1_0; }

		//("," actors+=ActorAlias)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//actors+=ActorAlias
		public Assignment getActorsAssignment_3_2_1() { return cActorsAssignment_3_2_1; }

		//ActorAlias
		public RuleCall getActorsActorAliasParserRuleCall_3_2_1_0() { return cActorsActorAliasParserRuleCall_3_2_1_0; }
	}

	public class SignalReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalReception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstanceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cInstanceSignalCrossReference_0_0_0 = (CrossReference)cInstanceAssignment_0_0.eContents().get(0);
		private final RuleCall cInstanceSignalIDTerminalRuleCall_0_0_0_1 = (RuleCall)cInstanceSignalCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFromKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSourceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSourceSignalAliasParserRuleCall_0_1_1_0 = (RuleCall)cSourceAssignment_0_1_1.eContents().get(0);
		private final Assignment cInitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cInitInitKeyword_1_0 = (Keyword)cInitAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Signals
		//SignalReception:
		//	instance=[Signal] ("from" source=SignalAlias)? | init?="init";
		public ParserRule getRule() { return rule; }

		//instance=[Signal] ("from" source=SignalAlias)? | init?="init"
		public Alternatives getAlternatives() { return cAlternatives; }

		//instance=[Signal] ("from" source=SignalAlias)?
		public Group getGroup_0() { return cGroup_0; }

		//instance=[Signal]
		public Assignment getInstanceAssignment_0_0() { return cInstanceAssignment_0_0; }

		//[Signal]
		public CrossReference getInstanceSignalCrossReference_0_0_0() { return cInstanceSignalCrossReference_0_0_0; }

		//ID
		public RuleCall getInstanceSignalIDTerminalRuleCall_0_0_0_1() { return cInstanceSignalIDTerminalRuleCall_0_0_0_1; }

		//("from" source=SignalAlias)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"from"
		public Keyword getFromKeyword_0_1_0() { return cFromKeyword_0_1_0; }

		//source=SignalAlias
		public Assignment getSourceAssignment_0_1_1() { return cSourceAssignment_0_1_1; }

		//SignalAlias
		public RuleCall getSourceSignalAliasParserRuleCall_0_1_1_0() { return cSourceSignalAliasParserRuleCall_0_1_1_0; }

		//init?="init"
		public Assignment getInitAssignment_1() { return cInitAssignment_1; }

		//"init"
		public Keyword getInitInitKeyword_1_0() { return cInitInitKeyword_1_0; }
	}

	public class SignalEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalEmission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceSignalCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceSignalCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDestinationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDestinationSignalAliasParserRuleCall_1_1_0 = (RuleCall)cDestinationAssignment_1_1.eContents().get(0);
		
		//SignalEmission:
		//	instance=[Signal] ("to" destination=SignalAlias)?;
		public ParserRule getRule() { return rule; }

		//instance=[Signal] ("to" destination=SignalAlias)?
		public Group getGroup() { return cGroup; }

		//instance=[Signal]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[Signal]
		public CrossReference getInstanceSignalCrossReference_0_0() { return cInstanceSignalCrossReference_0_0; }

		//ID
		public RuleCall getInstanceSignalIDTerminalRuleCall_0_0_1() { return cInstanceSignalIDTerminalRuleCall_0_0_1; }

		//("to" destination=SignalAlias)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//destination=SignalAlias
		public Assignment getDestinationAssignment_1_1() { return cDestinationAssignment_1_1; }

		//SignalAlias
		public RuleCall getDestinationSignalAliasParserRuleCall_1_1_0() { return cDestinationSignalAliasParserRuleCall_1_1_0; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModeSignalModeParserRuleCall_3_0 = (RuleCall)cModeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFromKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceSignalAliasParserRuleCall_4_1_0 = (RuleCall)cSourceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDestinationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDestinationsSignalAliasParserRuleCall_5_1_0 = (RuleCall)cDestinationsAssignment_5_1.eContents().get(0);
		
		//Signal:
		//	name=ID ":" type=DataType mode=SignalMode ("from" source=SignalAlias)? ("to" destinations+=SignalAlias)*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=DataType mode=SignalMode ("from" source=SignalAlias)? ("to" destinations+=SignalAlias)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }

		//mode=SignalMode
		public Assignment getModeAssignment_3() { return cModeAssignment_3; }

		//SignalMode
		public RuleCall getModeSignalModeParserRuleCall_3_0() { return cModeSignalModeParserRuleCall_3_0; }

		//("from" source=SignalAlias)?
		public Group getGroup_4() { return cGroup_4; }

		//"from"
		public Keyword getFromKeyword_4_0() { return cFromKeyword_4_0; }

		//source=SignalAlias
		public Assignment getSourceAssignment_4_1() { return cSourceAssignment_4_1; }

		//SignalAlias
		public RuleCall getSourceSignalAliasParserRuleCall_4_1_0() { return cSourceSignalAliasParserRuleCall_4_1_0; }

		//("to" destinations+=SignalAlias)*
		public Group getGroup_5() { return cGroup_5; }

		//"to"
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//destinations+=SignalAlias
		public Assignment getDestinationsAssignment_5_1() { return cDestinationsAssignment_5_1; }

		//SignalAlias
		public RuleCall getDestinationsSignalAliasParserRuleCall_5_1_0() { return cDestinationsSignalAliasParserRuleCall_5_1_0; }
	}

	public class DefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEnumDefinitionSetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementsEnumElementParserRuleCall_0_2_0 = (RuleCall)cElementsAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cElementsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cElementsEnumElementParserRuleCall_0_3_1_0 = (RuleCall)cElementsAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberDefinitionSetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsNumberLiteralParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cElementsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cElementsNumberLiteralParserRuleCall_1_3_1_0 = (RuleCall)cElementsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberDefinitionIntervalAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cInfAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cInfNumberLiteralParserRuleCall_2_2_0 = (RuleCall)cInfAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cSupAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cSupNumberLiteralParserRuleCall_2_4_0 = (RuleCall)cSupAssignment_2_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//DefinitionSet:
		//	{EnumDefinitionSet} "{" elements+=EnumElement ("," elements+=EnumElement)* "}" | {NumberDefinitionSet} "{"
		//	elements+=NumberLiteral ("," elements+=NumberLiteral)* "}" | {NumberDefinitionInterval} "[" inf=NumberLiteral ","
		//	sup=NumberLiteral "]";
		public ParserRule getRule() { return rule; }

		//{EnumDefinitionSet} "{" elements+=EnumElement ("," elements+=EnumElement)* "}" | {NumberDefinitionSet} "{"
		//elements+=NumberLiteral ("," elements+=NumberLiteral)* "}" | {NumberDefinitionInterval} "[" inf=NumberLiteral ","
		//sup=NumberLiteral "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EnumDefinitionSet} "{" elements+=EnumElement ("," elements+=EnumElement)* "}"
		public Group getGroup_0() { return cGroup_0; }

		//{EnumDefinitionSet}
		public Action getEnumDefinitionSetAction_0_0() { return cEnumDefinitionSetAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//elements+=EnumElement
		public Assignment getElementsAssignment_0_2() { return cElementsAssignment_0_2; }

		//EnumElement
		public RuleCall getElementsEnumElementParserRuleCall_0_2_0() { return cElementsEnumElementParserRuleCall_0_2_0; }

		//("," elements+=EnumElement)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//elements+=EnumElement
		public Assignment getElementsAssignment_0_3_1() { return cElementsAssignment_0_3_1; }

		//EnumElement
		public RuleCall getElementsEnumElementParserRuleCall_0_3_1_0() { return cElementsEnumElementParserRuleCall_0_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//{NumberDefinitionSet} "{" elements+=NumberLiteral ("," elements+=NumberLiteral)* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{NumberDefinitionSet}
		public Action getNumberDefinitionSetAction_1_0() { return cNumberDefinitionSetAction_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//elements+=NumberLiteral
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }

		//NumberLiteral
		public RuleCall getElementsNumberLiteralParserRuleCall_1_2_0() { return cElementsNumberLiteralParserRuleCall_1_2_0; }

		//("," elements+=NumberLiteral)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//elements+=NumberLiteral
		public Assignment getElementsAssignment_1_3_1() { return cElementsAssignment_1_3_1; }

		//NumberLiteral
		public RuleCall getElementsNumberLiteralParserRuleCall_1_3_1_0() { return cElementsNumberLiteralParserRuleCall_1_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }

		//{NumberDefinitionInterval} "[" inf=NumberLiteral "," sup=NumberLiteral "]"
		public Group getGroup_2() { return cGroup_2; }

		//{NumberDefinitionInterval}
		public Action getNumberDefinitionIntervalAction_2_0() { return cNumberDefinitionIntervalAction_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }

		//inf=NumberLiteral
		public Assignment getInfAssignment_2_2() { return cInfAssignment_2_2; }

		//NumberLiteral
		public RuleCall getInfNumberLiteralParserRuleCall_2_2_0() { return cInfNumberLiteralParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//sup=NumberLiteral
		public Assignment getSupAssignment_2_4() { return cSupAssignment_2_4; }

		//NumberLiteral
		public RuleCall getSupNumberLiteralParserRuleCall_2_4_0() { return cSupNumberLiteralParserRuleCall_2_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class SignalAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceAccessibleEntityParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAliasSignalCrossReference_1_1_0 = (CrossReference)cAliasAssignment_1_1.eContents().get(0);
		private final RuleCall cAliasSignalIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAliasSignalCrossReference_1_1_0.eContents().get(1);
		
		//SignalAlias:
		//	source=AccessibleEntity ("as" alias=[Signal])?;
		public ParserRule getRule() { return rule; }

		//source=AccessibleEntity ("as" alias=[Signal])?
		public Group getGroup() { return cGroup; }

		//source=AccessibleEntity
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//AccessibleEntity
		public RuleCall getSourceAccessibleEntityParserRuleCall_0_0() { return cSourceAccessibleEntityParserRuleCall_0_0; }

		//("as" alias=[Signal])?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=[Signal]
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//[Signal]
		public CrossReference getAliasSignalCrossReference_1_1_0() { return cAliasSignalCrossReference_1_1_0; }

		//ID
		public RuleCall getAliasSignalIDTerminalRuleCall_1_1_0_1() { return cAliasSignalIDTerminalRuleCall_1_1_0_1; }
	}

	public class SignalModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cConstantKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SignalMode:
		//	"event" | "flow" | "constant";
		public ParserRule getRule() { return rule; }

		//"event" | "flow" | "constant"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//"flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }

		//"constant"
		public Keyword getConstantKeyword_2() { return cConstantKeyword_2; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeBaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeBaseParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cInKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cDefinitionSetDefinitionSetParserRuleCall_0_2_1_0 = (RuleCall)cDefinitionSetAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeCollectionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cModeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cModeAlternatives_1_1_0 = (Alternatives)cModeAssignment_1_1.eContents().get(0);
		private final Keyword cModeSetKeyword_1_1_0_0 = (Keyword)cModeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cModeListKeyword_1_1_0_1 = (Keyword)cModeAlternatives_1_1_0.eContents().get(1);
		private final Keyword cModeMapKeyword_1_1_0_2 = (Keyword)cModeAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOfKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDataTypeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDataTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDataTypeCrossReference_1_3_0.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cInKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cDefinitionSetDefinitionSetParserRuleCall_1_4_1_0 = (RuleCall)cDefinitionSetAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDataTypeCompoundAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cCompoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCompoundDataTypeStructureCrossReference_2_1_0 = (CrossReference)cCompoundAssignment_2_1.eContents().get(0);
		private final RuleCall cCompoundDataTypeStructureIDTerminalRuleCall_2_1_0_1 = (RuleCall)cCompoundDataTypeStructureCrossReference_2_1_0.eContents().get(1);
		
		//DataType:
		//	{DataTypeBase} type=TypeBase ("in" definitionSet=DefinitionSet)? | {DataTypeCollection} mode=("set" | "list" | "map")
		//	"of" type=[DataType] ("in" definitionSet=DefinitionSet)? | {DataTypeCompound} compound=[DataTypeStructure];
		public ParserRule getRule() { return rule; }

		//{DataTypeBase} type=TypeBase ("in" definitionSet=DefinitionSet)? | {DataTypeCollection} mode=("set" | "list" | "map")
		//"of" type=[DataType] ("in" definitionSet=DefinitionSet)? | {DataTypeCompound} compound=[DataTypeStructure]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DataTypeBase} type=TypeBase ("in" definitionSet=DefinitionSet)?
		public Group getGroup_0() { return cGroup_0; }

		//{DataTypeBase}
		public Action getDataTypeBaseAction_0_0() { return cDataTypeBaseAction_0_0; }

		//type=TypeBase
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//TypeBase
		public RuleCall getTypeTypeBaseParserRuleCall_0_1_0() { return cTypeTypeBaseParserRuleCall_0_1_0; }

		//("in" definitionSet=DefinitionSet)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"in"
		public Keyword getInKeyword_0_2_0() { return cInKeyword_0_2_0; }

		//definitionSet=DefinitionSet
		public Assignment getDefinitionSetAssignment_0_2_1() { return cDefinitionSetAssignment_0_2_1; }

		//DefinitionSet
		public RuleCall getDefinitionSetDefinitionSetParserRuleCall_0_2_1_0() { return cDefinitionSetDefinitionSetParserRuleCall_0_2_1_0; }

		//{DataTypeCollection} mode=("set" | "list" | "map") "of" type=[DataType] ("in" definitionSet=DefinitionSet)?
		public Group getGroup_1() { return cGroup_1; }

		//{DataTypeCollection}
		public Action getDataTypeCollectionAction_1_0() { return cDataTypeCollectionAction_1_0; }

		//mode=("set" | "list" | "map")
		public Assignment getModeAssignment_1_1() { return cModeAssignment_1_1; }

		//"set" | "list" | "map"
		public Alternatives getModeAlternatives_1_1_0() { return cModeAlternatives_1_1_0; }

		//"set"
		public Keyword getModeSetKeyword_1_1_0_0() { return cModeSetKeyword_1_1_0_0; }

		//"list"
		public Keyword getModeListKeyword_1_1_0_1() { return cModeListKeyword_1_1_0_1; }

		//"map"
		public Keyword getModeMapKeyword_1_1_0_2() { return cModeMapKeyword_1_1_0_2; }

		//"of"
		public Keyword getOfKeyword_1_2() { return cOfKeyword_1_2; }

		//type=[DataType]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//[DataType]
		public CrossReference getTypeDataTypeCrossReference_1_3_0() { return cTypeDataTypeCrossReference_1_3_0; }

		//ID
		public RuleCall getTypeDataTypeIDTerminalRuleCall_1_3_0_1() { return cTypeDataTypeIDTerminalRuleCall_1_3_0_1; }

		//("in" definitionSet=DefinitionSet)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"in"
		public Keyword getInKeyword_1_4_0() { return cInKeyword_1_4_0; }

		//definitionSet=DefinitionSet
		public Assignment getDefinitionSetAssignment_1_4_1() { return cDefinitionSetAssignment_1_4_1; }

		//DefinitionSet
		public RuleCall getDefinitionSetDefinitionSetParserRuleCall_1_4_1_0() { return cDefinitionSetDefinitionSetParserRuleCall_1_4_1_0; }

		//{DataTypeCompound} compound=[DataTypeStructure]
		public Group getGroup_2() { return cGroup_2; }

		//{DataTypeCompound}
		public Action getDataTypeCompoundAction_2_0() { return cDataTypeCompoundAction_2_0; }

		//compound=[DataTypeStructure]
		public Assignment getCompoundAssignment_2_1() { return cCompoundAssignment_2_1; }

		//[DataTypeStructure]
		public CrossReference getCompoundDataTypeStructureCrossReference_2_1_0() { return cCompoundDataTypeStructureCrossReference_2_1_0; }

		//ID
		public RuleCall getCompoundDataTypeStructureIDTerminalRuleCall_2_1_0_1() { return cCompoundDataTypeStructureIDTerminalRuleCall_2_1_0_1; }
	}

	public class TypeBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSymbolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTimeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIdentifierKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TypeBase:
		//	"void" | "symbol" | "number" | "text" | "time" | "identifier";
		public ParserRule getRule() { return rule; }

		//"void" | "symbol" | "number" | "text" | "time" | "identifier"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//"symbol"
		public Keyword getSymbolKeyword_1() { return cSymbolKeyword_1; }

		//"number"
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }

		//"text"
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }

		//"time"
		public Keyword getTimeKeyword_4() { return cTimeKeyword_4; }

		//"identifier"
		public Keyword getIdentifierKeyword_5() { return cIdentifierKeyword_5; }
	}

	public class DataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDefinition");
		private final RuleCall cDataTypeStructureParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DataTypeDefinition:
		//	DataTypeStructure;
		public ParserRule getRule() { return rule; }

		//DataTypeStructure
		public RuleCall getDataTypeStructureParserRuleCall() { return cDataTypeStructureParserRuleCall; }
	}

	public class DataTypeStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsDataTypeStructureFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		
		//DataTypeStructure:
		//	"structure" name=ID ":" fields+=DataTypeStructureField*;
		public ParserRule getRule() { return rule; }

		//"structure" name=ID ":" fields+=DataTypeStructureField*
		public Group getGroup() { return cGroup; }

		//"structure"
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//fields+=DataTypeStructureField*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//DataTypeStructureField
		public RuleCall getFieldsDataTypeStructureFieldParserRuleCall_3_0() { return cFieldsDataTypeStructureFieldParserRuleCall_3_0; }
	}

	public class DataTypeStructureFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeStructureField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//DataTypeStructureField:
		//	name=ID ":" type=DataType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=DataType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCauseCauseParserRuleCall_0_0 = (RuleCall)cCauseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffectsEffectParserRuleCall_2_0 = (RuleCall)cEffectsAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Behaviors
		//Behavior:
		//	cause=Cause ":" effects+=Effect+;
		public ParserRule getRule() { return rule; }

		//cause=Cause ":" effects+=Effect+
		public Group getGroup() { return cGroup; }

		//cause=Cause
		public Assignment getCauseAssignment_0() { return cCauseAssignment_0; }

		//Cause
		public RuleCall getCauseCauseParserRuleCall_0_0() { return cCauseCauseParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//effects+=Effect+
		public Assignment getEffectsAssignment_2() { return cEffectsAssignment_2; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_2_0() { return cEffectsEffectParserRuleCall_2_0; }
	}

	public class CauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnCauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenCauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Cause:
		//	OnCause | WhenCause;
		public ParserRule getRule() { return rule; }

		//OnCause | WhenCause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OnCause
		public RuleCall getOnCauseParserRuleCall_0() { return cOnCauseParserRuleCall_0; }

		//WhenCause
		public RuleCall getWhenCauseParserRuleCall_1() { return cWhenCauseParserRuleCall_1; }
	}

	public class OnCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventSignalReceptionParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//OnCause:
		//	"on" event=SignalReception ("if" guard=Expression)?;
		public ParserRule getRule() { return rule; }

		//"on" event=SignalReception ("if" guard=Expression)?
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=SignalReception
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//SignalReception
		public RuleCall getEventSignalReceptionParserRuleCall_1_0() { return cEventSignalReceptionParserRuleCall_1_0; }

		//("if" guard=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=Expression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_1_0() { return cGuardExpressionParserRuleCall_2_1_0; }
	}

	public class WhenCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//WhenCause:
		//	"when" condition=Expression ("if" guard=Expression)?;
		public ParserRule getRule() { return rule; }

		//"when" condition=Expression ("if" guard=Expression)?
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//("if" guard=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=Expression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_1_0() { return cGuardExpressionParserRuleCall_2_1_0; }
	}

	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlwaysEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect:
		//	AlwaysEffect | SetEffect | TriggerEffect;
		public ParserRule getRule() { return rule; }

		//AlwaysEffect | SetEffect | TriggerEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//AlwaysEffect
		public RuleCall getAlwaysEffectParserRuleCall_0() { return cAlwaysEffectParserRuleCall_0; }

		//SetEffect
		public RuleCall getSetEffectParserRuleCall_1() { return cSetEffectParserRuleCall_1; }

		//TriggerEffect
		public RuleCall getTriggerEffectParserRuleCall_2() { return cTriggerEffectParserRuleCall_2; }
	}

	public class AlwaysEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlwaysEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlwaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSignalEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AlwaysEffect:
		//	"always" target=SignalEmission "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"always" target=SignalEmission "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"always"
		public Keyword getAlwaysKeyword_0() { return cAlwaysKeyword_0; }

		//target=SignalEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//SignalEmission
		public RuleCall getTargetSignalEmissionParserRuleCall_1_0() { return cTargetSignalEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class SetEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSignalEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SetEffect:
		//	"set" target=SignalEmission "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"set" target=SignalEmission "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//target=SignalEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//SignalEmission
		public RuleCall getTargetSignalEmissionParserRuleCall_1_0() { return cTargetSignalEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class TriggerEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSignalEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//TriggerEffect:
		//	"trigger" target=SignalEmission "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"trigger" target=SignalEmission "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//target=SignalEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//SignalEmission
		public RuleCall getTargetSignalEmissionParserRuleCall_1_0() { return cTargetSignalEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a subset of it in order to be able to generate C code and in order to simplify the language
		////So we are going to construct the expressions language we need. It is similar to xbase on certain points, but still clearly different, semantically and syntaxically
		//Expression:
		//	OrExpression;
		public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//rightOperand=AndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//AndExpression
		public RuleCall getRightOperandAndExpressionParserRuleCall_1_1_0() { return cRightOperandAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"or";
		public ParserRule getRule() { return rule; }

		//"or"
		public Keyword getOrKeyword() { return cOrKeyword; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	EqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//EqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//rightOperand=EqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//EqualityExpression
		public RuleCall getRightOperandEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"and";
		public ParserRule getRule() { return rule; }

		//"and"
		public Keyword getAndKeyword() { return cAndKeyword; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	RelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		//	rightOperand=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpEquality
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpEquality
		public RuleCall getFeatureOpEqualityParserRuleCall_1_0_0_1_0() { return cFeatureOpEqualityParserRuleCall_1_0_0_1_0; }

		//rightOperand=RelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//RelationalExpression
		public RuleCall getRightOperandRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandOtherOperatorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	OtherOperatorExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		//	rightOperand=OtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherOperatorExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		//rightOperand=OtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//OtherOperatorExpression
		public RuleCall getOtherOperatorExpressionParserRuleCall_0() { return cOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=OtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpCompare
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_0_1_0; }

		//rightOperand=OtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//OtherOperatorExpression
		public RuleCall getRightOperandOtherOperatorExpressionParserRuleCall_1_1_0() { return cRightOperandOtherOperatorExpressionParserRuleCall_1_1_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	"<=" | ">=" | "<" | ">";
		public ParserRule getRule() { return rule; }

		//"<=" | ">=" | "<" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class OtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//OtherOperatorExpression returns Expression:
		//	AdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//rightOperand=AdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getRightOperandAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQuestionMarkColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////String join and groovy elvis operator for null checking
		//OpOther:
		//	"<>" | "?:";
		public ParserRule getRule() { return rule; }

		//"<>" | "?:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_0() { return cLessThanSignGreaterThanSignKeyword_0; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_1() { return cQuestionMarkColonKeyword_1; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		//	rightOperand=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		//rightOperand=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpAdd) rightOperand=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//rightOperand=MultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getRightOperandMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	UnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpMulti
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMulti
		public RuleCall getFeatureOpMultiParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiParserRuleCall_1_0_0_1_0; }

		//rightOperand=UnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//UnaryOperation
		public RuleCall getRightOperandUnaryOperationParserRuleCall_1_1_0() { return cRightOperandUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpMulti:
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation returns Expression:
		//	{UnaryOperation} feature=OpUnary operand=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} feature=OpUnary operand=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} feature=OpUnary operand=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_0_2_0() { return cOperandPrimaryExpressionParserRuleCall_0_2_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForEachExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionCallExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimaryExpression returns Expression:
		//	SwitchExpression | IfExpression | Literal | ForEachExpression | FunctionCallExpression | ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//SwitchExpression | IfExpression | Literal | ForEachExpression | FunctionCallExpression | ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_0() { return cSwitchExpressionParserRuleCall_0; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_1() { return cIfExpressionParserRuleCall_1; }

		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }

		//ForEachExpression
		public RuleCall getForEachExpressionParserRuleCall_3() { return cForEachExpressionParserRuleCall_3; }

		//FunctionCallExpression
		public RuleCall getFunctionCallExpressionParserRuleCall_4() { return cFunctionCallExpressionParserRuleCall_4; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_5() { return cParenthesizedExpressionParserRuleCall_5; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cEnumLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNumberSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cElementAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cElementEnumElementCrossReference_6_2_0 = (CrossReference)cElementAssignment_6_2.eContents().get(0);
		private final RuleCall cElementEnumElementIDTerminalRuleCall_6_2_0_1 = (RuleCall)cElementEnumElementCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cSignalLiteralAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cSignalAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_7_1_0 = (CrossReference)cSignalAssignment_7_1.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_7_1_0_1 = (RuleCall)cSignalSignalCrossReference_7_1_0.eContents().get(1);
		
		//Literal returns Expression:
		//	CollectionLiteral | BooleanLiteral | NumberLiteral | NullLiteral | StringLiteral | TimeLiteral | {EnumLiteral} "#"
		//	element=[EnumElement] | {SignalLiteral} signal=[Signal];
		public ParserRule getRule() { return rule; }

		//CollectionLiteral | BooleanLiteral | NumberLiteral | NullLiteral | StringLiteral | TimeLiteral | {EnumLiteral} "#"
		//element=[EnumElement] | {SignalLiteral} signal=[Signal]
		public Alternatives getAlternatives() { return cAlternatives; }

		//CollectionLiteral
		public RuleCall getCollectionLiteralParserRuleCall_0() { return cCollectionLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//TimeLiteral
		public RuleCall getTimeLiteralParserRuleCall_5() { return cTimeLiteralParserRuleCall_5; }

		//{EnumLiteral} "#" element=[EnumElement]
		public Group getGroup_6() { return cGroup_6; }

		//{EnumLiteral}
		public Action getEnumLiteralAction_6_0() { return cEnumLiteralAction_6_0; }

		//"#"
		public Keyword getNumberSignKeyword_6_1() { return cNumberSignKeyword_6_1; }

		//element=[EnumElement]
		public Assignment getElementAssignment_6_2() { return cElementAssignment_6_2; }

		//[EnumElement]
		public CrossReference getElementEnumElementCrossReference_6_2_0() { return cElementEnumElementCrossReference_6_2_0; }

		//ID
		public RuleCall getElementEnumElementIDTerminalRuleCall_6_2_0_1() { return cElementEnumElementIDTerminalRuleCall_6_2_0_1; }

		//{SignalLiteral} signal=[Signal]
		public Group getGroup_7() { return cGroup_7; }

		//{SignalLiteral}
		public Action getSignalLiteralAction_7_0() { return cSignalLiteralAction_7_0; }

		//signal=[Signal]
		public Assignment getSignalAssignment_7_1() { return cSignalAssignment_7_1; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_7_1_0() { return cSignalSignalCrossReference_7_1_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_7_1_0_1() { return cSignalSignalIDTerminalRuleCall_7_1_0_1; }
	}

	public class CollectionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CollectionLiteral:
		//	SetLiteral | ListLiteral;
		public ParserRule getRule() { return rule; }

		//SetLiteral | ListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetLiteral
		public RuleCall getSetLiteralParserRuleCall_0() { return cSetLiteralParserRuleCall_0; }

		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_1() { return cListLiteralParserRuleCall_1; }
	}

	public class SetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetLiteral:
		//	{SetLiteral} "{" (elements+=Expression ("," elements+=Expression)*)? "}";
		public ParserRule getRule() { return rule; }

		//{SetLiteral} "{" (elements+=Expression ("," elements+=Expression)*)? "}"
		public Group getGroup() { return cGroup; }

		//{SetLiteral}
		public Action getSetLiteralAction_0() { return cSetLiteralAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=Expression ("," elements+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0_0() { return cElementsExpressionParserRuleCall_2_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_1_0() { return cElementsExpressionParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListLiteral:
		//	{ListLiteral} "[" (elements+=Expression ("," elements+=Expression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{ListLiteral} "[" (elements+=Expression ("," elements+=Expression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{ListLiteral}
		public Action getListLiteralAction_0() { return cListLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=Expression ("," elements+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0_0() { return cElementsExpressionParserRuleCall_2_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_1_0() { return cElementsExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//IfExpression returns Expression:
		//	{IfExpression} "if" "(" if=Expression => ")" then=Expression ("else" else=Expression);
		public ParserRule getRule() { return rule; }

		//{IfExpression} "if" "(" if=Expression => ")" then=Expression ("else" else=Expression)
		public Group getGroup() { return cGroup; }

		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=Expression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//Expression
		public RuleCall getIfExpressionParserRuleCall_3_0() { return cIfExpressionParserRuleCall_3_0; }

		//=> ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=Expression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_5_0() { return cThenExpressionParserRuleCall_5_0; }

		//=> "else" else=Expression
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=Expression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_6_1_0() { return cElseExpressionParserRuleCall_6_1_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSwitchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchExpressionParserRuleCall_3_0 = (RuleCall)cSwitchAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesCasePartParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDefaultKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDefaultAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDefaultExpressionParserRuleCall_6_2_0 = (RuleCall)cDefaultAssignment_6_2.eContents().get(0);
		
		//SwitchExpression returns Expression:
		//	{SwitchExpression} "switch" "(" switch=Expression => ")" => cases+=CasePart+ ("default" ":" default=Expression)?;
		public ParserRule getRule() { return rule; }

		//{SwitchExpression} "switch" "(" switch=Expression => ")" => cases+=CasePart+ ("default" ":" default=Expression)?
		public Group getGroup() { return cGroup; }

		//{SwitchExpression}
		public Action getSwitchExpressionAction_0() { return cSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//switch=Expression
		public Assignment getSwitchAssignment_3() { return cSwitchAssignment_3; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_3_0() { return cSwitchExpressionParserRuleCall_3_0; }

		//=> ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//=> cases+=CasePart+
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }

		//CasePart
		public RuleCall getCasesCasePartParserRuleCall_5_0() { return cCasesCasePartParserRuleCall_5_0; }

		//(=> "default" ":" default=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "default"
		public Keyword getDefaultKeyword_6_0() { return cDefaultKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//default=Expression
		public Assignment getDefaultAssignment_6_2() { return cDefaultAssignment_6_2; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_6_2_0() { return cDefaultExpressionParserRuleCall_6_2_0; }
	}

	public class CasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//CasePart:
		//	"case" case=Expression ":" then=Expression;
		public ParserRule getRule() { return rule; }

		//"case" case=Expression ":" then=Expression
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=Expression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//Expression
		public RuleCall getCaseExpressionParserRuleCall_1_0() { return cCaseExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=Expression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0() { return cThenExpressionParserRuleCall_3_0; }
	}

	public class ForEachExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForEachExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForEachExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEachKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForExpressionExpressionParserRuleCall_4_0 = (RuleCall)cForExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEachExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEachExpressionExpressionParserRuleCall_6_0 = (RuleCall)cEachExpressionAssignment_6.eContents().get(0);
		
		//ForEachExpression returns Expression:
		//	{ForEachExpression} "for" "each" "(" forExpression=Expression ")" eachExpression=Expression;
		public ParserRule getRule() { return rule; }

		//{ForEachExpression} "for" "each" "(" forExpression=Expression ")" eachExpression=Expression
		public Group getGroup() { return cGroup; }

		//{ForEachExpression}
		public Action getForEachExpressionAction_0() { return cForEachExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"each"
		public Keyword getEachKeyword_2() { return cEachKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//forExpression=Expression
		public Assignment getForExpressionAssignment_4() { return cForExpressionAssignment_4; }

		//Expression
		public RuleCall getForExpressionExpressionParserRuleCall_4_0() { return cForExpressionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//eachExpression=Expression
		public Assignment getEachExpressionAssignment_6() { return cEachExpressionAssignment_6; }

		//Expression
		public RuleCall getEachExpressionExpressionParserRuleCall_6_0() { return cEachExpressionExpressionParserRuleCall_6_0; }
	}

	public class FunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionBuiltInFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_1_0 = (RuleCall)cArgumentsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionCallExpression returns Expression:
		//	{FunctionCallExpression} function=BuiltInFunction "(" arguments+=Expression? ("," arguments+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//{FunctionCallExpression} function=BuiltInFunction "(" arguments+=Expression? ("," arguments+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//{FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=BuiltInFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//BuiltInFunction
		public RuleCall getFunctionBuiltInFunctionParserRuleCall_1_0() { return cFunctionBuiltInFunctionParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//arguments+=Expression?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0() { return cArgumentsExpressionParserRuleCall_3_0; }

		//("," arguments+=Expression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_1() { return cArgumentsAssignment_4_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_1_0() { return cArgumentsExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class BuiltInFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMathAbsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMathAcosKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMathAcoshKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMathAsinKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMathAsinhKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMathAtanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMathAtanhKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMathAtan2Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMathCeilKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMathClipKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMathCosKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMathCoshKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cMathExpKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cMathFloorKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cMathFroundKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMathHypotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cMathLogKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cMathLog10Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMathLog2Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cMathMaxKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cMathMinKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMathPowKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cMathRandomKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cMathRoundKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cMathSignKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cMathSinKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cMathSinhKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cMathSqrtKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cMathTanKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cMathTanhKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cMathTruncKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cSetOrderbyKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cSetAddKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cSetFindKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cSetChangeKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cSetRemoveKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		
		////Same functions as c math.*
		//BuiltInFunction:
		//	"Math.abs" | "Math.acos" | "Math.acosh" | "Math.asin" | "Math.asinh" | "Math.atan" | "Math.atanh" | "Math.atan2" |
		//	"Math.ceil" | "Math.clip" | "Math.cos" | "Math.cosh" | "Math.exp" | "Math.floor" | "Math.fround" | "Math.hypot" |
		//	"Math.log" | "Math.log10" | "Math.log2" | "Math.max" | "Math.min" | "Math.pow" | "Math.random" | "Math.round" |
		//	"Math.sign" | "Math.sin" | "Math.sinh" | "Math.sqrt" | "Math.tan" | "Math.tanh" | "Math.trunc" | "Set.orderby" |
		//	"Set.add" | "Set.find" | "Set.change" | "Set.remove";
		public ParserRule getRule() { return rule; }

		//"Math.abs" | "Math.acos" | "Math.acosh" | "Math.asin" | "Math.asinh" | "Math.atan" | "Math.atanh" | "Math.atan2" |
		//"Math.ceil" | "Math.clip" | "Math.cos" | "Math.cosh" | "Math.exp" | "Math.floor" | "Math.fround" | "Math.hypot" |
		//"Math.log" | "Math.log10" | "Math.log2" | "Math.max" | "Math.min" | "Math.pow" | "Math.random" | "Math.round" |
		//"Math.sign" | "Math.sin" | "Math.sinh" | "Math.sqrt" | "Math.tan" | "Math.tanh" | "Math.trunc" | "Set.orderby" |
		//"Set.add" | "Set.find" | "Set.change" | "Set.remove"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Math.abs"
		public Keyword getMathAbsKeyword_0() { return cMathAbsKeyword_0; }

		//"Math.acos"
		public Keyword getMathAcosKeyword_1() { return cMathAcosKeyword_1; }

		//"Math.acosh"
		public Keyword getMathAcoshKeyword_2() { return cMathAcoshKeyword_2; }

		//"Math.asin"
		public Keyword getMathAsinKeyword_3() { return cMathAsinKeyword_3; }

		//"Math.asinh"
		public Keyword getMathAsinhKeyword_4() { return cMathAsinhKeyword_4; }

		//"Math.atan"
		public Keyword getMathAtanKeyword_5() { return cMathAtanKeyword_5; }

		//"Math.atanh"
		public Keyword getMathAtanhKeyword_6() { return cMathAtanhKeyword_6; }

		//"Math.atan2"
		public Keyword getMathAtan2Keyword_7() { return cMathAtan2Keyword_7; }

		//"Math.ceil"
		public Keyword getMathCeilKeyword_8() { return cMathCeilKeyword_8; }

		//"Math.clip"
		public Keyword getMathClipKeyword_9() { return cMathClipKeyword_9; }

		//"Math.cos"
		public Keyword getMathCosKeyword_10() { return cMathCosKeyword_10; }

		//"Math.cosh"
		public Keyword getMathCoshKeyword_11() { return cMathCoshKeyword_11; }

		//"Math.exp"
		public Keyword getMathExpKeyword_12() { return cMathExpKeyword_12; }

		//"Math.floor"
		public Keyword getMathFloorKeyword_13() { return cMathFloorKeyword_13; }

		//"Math.fround"
		public Keyword getMathFroundKeyword_14() { return cMathFroundKeyword_14; }

		//"Math.hypot"
		public Keyword getMathHypotKeyword_15() { return cMathHypotKeyword_15; }

		//"Math.log"
		public Keyword getMathLogKeyword_16() { return cMathLogKeyword_16; }

		//"Math.log10"
		public Keyword getMathLog10Keyword_17() { return cMathLog10Keyword_17; }

		//"Math.log2"
		public Keyword getMathLog2Keyword_18() { return cMathLog2Keyword_18; }

		//"Math.max"
		public Keyword getMathMaxKeyword_19() { return cMathMaxKeyword_19; }

		//"Math.min"
		public Keyword getMathMinKeyword_20() { return cMathMinKeyword_20; }

		//"Math.pow"
		public Keyword getMathPowKeyword_21() { return cMathPowKeyword_21; }

		//"Math.random"
		public Keyword getMathRandomKeyword_22() { return cMathRandomKeyword_22; }

		//"Math.round"
		public Keyword getMathRoundKeyword_23() { return cMathRoundKeyword_23; }

		//"Math.sign"
		public Keyword getMathSignKeyword_24() { return cMathSignKeyword_24; }

		//"Math.sin"
		public Keyword getMathSinKeyword_25() { return cMathSinKeyword_25; }

		//"Math.sinh"
		public Keyword getMathSinhKeyword_26() { return cMathSinhKeyword_26; }

		//"Math.sqrt"
		public Keyword getMathSqrtKeyword_27() { return cMathSqrtKeyword_27; }

		//"Math.tan"
		public Keyword getMathTanKeyword_28() { return cMathTanKeyword_28; }

		//"Math.tanh"
		public Keyword getMathTanhKeyword_29() { return cMathTanhKeyword_29; }

		//"Math.trunc"
		public Keyword getMathTruncKeyword_30() { return cMathTruncKeyword_30; }

		//"Set.orderby"
		public Keyword getSetOrderbyKeyword_31() { return cSetOrderbyKeyword_31; }

		//"Set.add"
		public Keyword getSetAddKeyword_32() { return cSetAddKeyword_32; }

		//"Set.find"
		public Keyword getSetFindKeyword_33() { return cSetFindKeyword_33; }

		//"Set.change"
		public Keyword getSetChangeKeyword_34() { return cSetChangeKeyword_34; }

		//"Set.remove"
		public Keyword getSetRemoveKeyword_35() { return cSetRemoveKeyword_35; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Literals
		//BooleanLiteral returns Expression:
		//	{BooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral returns Expression:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral returns Expression:
		//	{NumberLiteral} value=NUMBER;
		public ParserRule getRule() { return rule; }

		//{NumberLiteral} value=NUMBER
		public Group getGroup() { return cGroup; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }

		//value=NUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_1_0() { return cValueNUMBERParserRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral returns Expression:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class EnumElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EnumElement:
		//	{EnumLiteral} "#" name=ID;
		public ParserRule getRule() { return rule; }

		//{EnumLiteral} "#" name=ID
		public Group getGroup() { return cGroup; }

		//{EnumLiteral}
		public Action getEnumLiteralAction_0() { return cEnumLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTimeLiteralNowAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNowKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTimeLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cYearAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cYearNUMBERParserRuleCall_1_1_0_0 = (RuleCall)cYearAssignment_1_1_0.eContents().get(0);
		private final Keyword cYearKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cMonthAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cMonthNUMBERParserRuleCall_1_2_0_0 = (RuleCall)cMonthAssignment_1_2_0.eContents().get(0);
		private final Keyword cMonthKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cDayAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cDayNUMBERParserRuleCall_1_3_0_0 = (RuleCall)cDayAssignment_1_3_0.eContents().get(0);
		private final Keyword cDayKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cHourAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_1_4_0_0 = (RuleCall)cHourAssignment_1_4_0.eContents().get(0);
		private final Keyword cHourKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Assignment cMinuteAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_1_5_0_0 = (RuleCall)cMinuteAssignment_1_5_0.eContents().get(0);
		private final Alternatives cAlternatives_1_5_1 = (Alternatives)cGroup_1_5.eContents().get(1);
		private final Keyword cMKeyword_1_5_1_0 = (Keyword)cAlternatives_1_5_1.eContents().get(0);
		private final Keyword cMinuteKeyword_1_5_1_1 = (Keyword)cAlternatives_1_5_1.eContents().get(1);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Assignment cSecondAssignment_1_6_0 = (Assignment)cGroup_1_6.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_1_6_0_0 = (RuleCall)cSecondAssignment_1_6_0.eContents().get(0);
		private final Alternatives cAlternatives_1_6_1 = (Alternatives)cGroup_1_6.eContents().get(1);
		private final Keyword cSKeyword_1_6_1_0 = (Keyword)cAlternatives_1_6_1.eContents().get(0);
		private final Keyword cSecondKeyword_1_6_1_1 = (Keyword)cAlternatives_1_6_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTimeLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cMonthAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMonthNUMBERParserRuleCall_2_1_0_0 = (RuleCall)cMonthAssignment_2_1_0.eContents().get(0);
		private final Keyword cMonthKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cDayAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cDayNUMBERParserRuleCall_2_2_0_0 = (RuleCall)cDayAssignment_2_2_0.eContents().get(0);
		private final Keyword cDayKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cHourAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_2_3_0_0 = (RuleCall)cHourAssignment_2_3_0.eContents().get(0);
		private final Keyword cHourKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Assignment cMinuteAssignment_2_4_0 = (Assignment)cGroup_2_4.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_2_4_0_0 = (RuleCall)cMinuteAssignment_2_4_0.eContents().get(0);
		private final Alternatives cAlternatives_2_4_1 = (Alternatives)cGroup_2_4.eContents().get(1);
		private final Keyword cMKeyword_2_4_1_0 = (Keyword)cAlternatives_2_4_1.eContents().get(0);
		private final Keyword cMinuteKeyword_2_4_1_1 = (Keyword)cAlternatives_2_4_1.eContents().get(1);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Assignment cSecondAssignment_2_5_0 = (Assignment)cGroup_2_5.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_2_5_0_0 = (RuleCall)cSecondAssignment_2_5_0.eContents().get(0);
		private final Alternatives cAlternatives_2_5_1 = (Alternatives)cGroup_2_5.eContents().get(1);
		private final Keyword cSKeyword_2_5_1_0 = (Keyword)cAlternatives_2_5_1.eContents().get(0);
		private final Keyword cSecondKeyword_2_5_1_1 = (Keyword)cAlternatives_2_5_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cTimeLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cDayAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cDayNUMBERParserRuleCall_3_1_0_0 = (RuleCall)cDayAssignment_3_1_0.eContents().get(0);
		private final Keyword cDayKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cHourAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_3_2_0_0 = (RuleCall)cHourAssignment_3_2_0.eContents().get(0);
		private final Keyword cHourKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cMinuteAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_3_3_0_0 = (RuleCall)cMinuteAssignment_3_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_3_1 = (Alternatives)cGroup_3_3.eContents().get(1);
		private final Keyword cMKeyword_3_3_1_0 = (Keyword)cAlternatives_3_3_1.eContents().get(0);
		private final Keyword cMinuteKeyword_3_3_1_1 = (Keyword)cAlternatives_3_3_1.eContents().get(1);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cSecondAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_3_4_0_0 = (RuleCall)cSecondAssignment_3_4_0.eContents().get(0);
		private final Alternatives cAlternatives_3_4_1 = (Alternatives)cGroup_3_4.eContents().get(1);
		private final Keyword cSKeyword_3_4_1_0 = (Keyword)cAlternatives_3_4_1.eContents().get(0);
		private final Keyword cSecondKeyword_3_4_1_1 = (Keyword)cAlternatives_3_4_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cTimeLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cHourAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_4_1_0_0 = (RuleCall)cHourAssignment_4_1_0.eContents().get(0);
		private final Keyword cHourKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cMinuteAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_4_2_0_0 = (RuleCall)cMinuteAssignment_4_2_0.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1 = (Alternatives)cGroup_4_2.eContents().get(1);
		private final Keyword cMKeyword_4_2_1_0 = (Keyword)cAlternatives_4_2_1.eContents().get(0);
		private final Keyword cMinuteKeyword_4_2_1_1 = (Keyword)cAlternatives_4_2_1.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cSecondAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_4_3_0_0 = (RuleCall)cSecondAssignment_4_3_0.eContents().get(0);
		private final Alternatives cAlternatives_4_3_1 = (Alternatives)cGroup_4_3.eContents().get(1);
		private final Keyword cSKeyword_4_3_1_0 = (Keyword)cAlternatives_4_3_1.eContents().get(0);
		private final Keyword cSecondKeyword_4_3_1_1 = (Keyword)cAlternatives_4_3_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cTimeLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cMinuteAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_5_1_0_0 = (RuleCall)cMinuteAssignment_5_1_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1 = (Alternatives)cGroup_5_1.eContents().get(1);
		private final Keyword cMKeyword_5_1_1_0 = (Keyword)cAlternatives_5_1_1.eContents().get(0);
		private final Keyword cMinuteKeyword_5_1_1_1 = (Keyword)cAlternatives_5_1_1.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Assignment cSecondAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_5_2_0_0 = (RuleCall)cSecondAssignment_5_2_0.eContents().get(0);
		private final Alternatives cAlternatives_5_2_1 = (Alternatives)cGroup_5_2.eContents().get(1);
		private final Keyword cSKeyword_5_2_1_0 = (Keyword)cAlternatives_5_2_1.eContents().get(0);
		private final Keyword cSecondKeyword_5_2_1_1 = (Keyword)cAlternatives_5_2_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cTimeLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cSecondAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_6_1_0_0 = (RuleCall)cSecondAssignment_6_1_0.eContents().get(0);
		private final Alternatives cAlternatives_6_1_1 = (Alternatives)cGroup_6_1.eContents().get(1);
		private final Keyword cSKeyword_6_1_1_0 = (Keyword)cAlternatives_6_1_1.eContents().get(0);
		private final Keyword cSecondKeyword_6_1_1_1 = (Keyword)cAlternatives_6_1_1.eContents().get(1);
		
		////	| {TimeLiteral} (year=NUMBER ':')? (month=NUMBER ':')? (day=NUMBER ':')? (hour=NUMBER ':')? (minute=NUMBER ':')? (second=NUMBER )? ;
		//TimeLiteral returns Expression:
		//	{TimeLiteralNow} "now" | {TimeLiteral} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER
		//	"hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? | {TimeLiteral} (month=NUMBER "month")
		//	(day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//	{TimeLiteral} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
		//	"second"))? | {TimeLiteral} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//	{TimeLiteral} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))? | {TimeLiteral} (second=NUMBER ("s" |
		//	"second"));
		public ParserRule getRule() { return rule; }

		//{TimeLiteralNow} "now" | {TimeLiteral} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER
		//"hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? | {TimeLiteral} (month=NUMBER "month")
		//(day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//{TimeLiteral} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
		//"second"))? | {TimeLiteral} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//{TimeLiteral} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))? | {TimeLiteral} (second=NUMBER ("s" |
		//"second"))
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TimeLiteralNow} "now"
		public Group getGroup_0() { return cGroup_0; }

		//{TimeLiteralNow}
		public Action getTimeLiteralNowAction_0_0() { return cTimeLiteralNowAction_0_0; }

		//"now"
		public Keyword getNowKeyword_0_1() { return cNowKeyword_0_1; }

		//{TimeLiteral} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m"
		//| "minute"))? (second=NUMBER ("s" | "second"))?
		public Group getGroup_1() { return cGroup_1; }

		//{TimeLiteral}
		public Action getTimeLiteralAction_1_0() { return cTimeLiteralAction_1_0; }

		//year=NUMBER "year"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//year=NUMBER
		public Assignment getYearAssignment_1_1_0() { return cYearAssignment_1_1_0; }

		//NUMBER
		public RuleCall getYearNUMBERParserRuleCall_1_1_0_0() { return cYearNUMBERParserRuleCall_1_1_0_0; }

		//"year"
		public Keyword getYearKeyword_1_1_1() { return cYearKeyword_1_1_1; }

		//(month=NUMBER "month")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//month=NUMBER
		public Assignment getMonthAssignment_1_2_0() { return cMonthAssignment_1_2_0; }

		//NUMBER
		public RuleCall getMonthNUMBERParserRuleCall_1_2_0_0() { return cMonthNUMBERParserRuleCall_1_2_0_0; }

		//"month"
		public Keyword getMonthKeyword_1_2_1() { return cMonthKeyword_1_2_1; }

		//(day=NUMBER "day")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//day=NUMBER
		public Assignment getDayAssignment_1_3_0() { return cDayAssignment_1_3_0; }

		//NUMBER
		public RuleCall getDayNUMBERParserRuleCall_1_3_0_0() { return cDayNUMBERParserRuleCall_1_3_0_0; }

		//"day"
		public Keyword getDayKeyword_1_3_1() { return cDayKeyword_1_3_1; }

		//(hour=NUMBER "hour")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//hour=NUMBER
		public Assignment getHourAssignment_1_4_0() { return cHourAssignment_1_4_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_1_4_0_0() { return cHourNUMBERParserRuleCall_1_4_0_0; }

		//"hour"
		public Keyword getHourKeyword_1_4_1() { return cHourKeyword_1_4_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_1_5_0() { return cMinuteAssignment_1_5_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_1_5_0_0() { return cMinuteNUMBERParserRuleCall_1_5_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_1_5_1() { return cAlternatives_1_5_1; }

		//"m"
		public Keyword getMKeyword_1_5_1_0() { return cMKeyword_1_5_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_1_5_1_1() { return cMinuteKeyword_1_5_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_1_6() { return cGroup_1_6; }

		//second=NUMBER
		public Assignment getSecondAssignment_1_6_0() { return cSecondAssignment_1_6_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_1_6_0_0() { return cSecondNUMBERParserRuleCall_1_6_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_1_6_1() { return cAlternatives_1_6_1; }

		//"s"
		public Keyword getSKeyword_1_6_1_0() { return cSKeyword_1_6_1_0; }

		//"second"
		public Keyword getSecondKeyword_1_6_1_1() { return cSecondKeyword_1_6_1_1; }

		//{TimeLiteral} (month=NUMBER "month") (day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))?
		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_2() { return cGroup_2; }

		//{TimeLiteral}
		public Action getTimeLiteralAction_2_0() { return cTimeLiteralAction_2_0; }

		//month=NUMBER "month"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//month=NUMBER
		public Assignment getMonthAssignment_2_1_0() { return cMonthAssignment_2_1_0; }

		//NUMBER
		public RuleCall getMonthNUMBERParserRuleCall_2_1_0_0() { return cMonthNUMBERParserRuleCall_2_1_0_0; }

		//"month"
		public Keyword getMonthKeyword_2_1_1() { return cMonthKeyword_2_1_1; }

		//(day=NUMBER "day")?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//day=NUMBER
		public Assignment getDayAssignment_2_2_0() { return cDayAssignment_2_2_0; }

		//NUMBER
		public RuleCall getDayNUMBERParserRuleCall_2_2_0_0() { return cDayNUMBERParserRuleCall_2_2_0_0; }

		//"day"
		public Keyword getDayKeyword_2_2_1() { return cDayKeyword_2_2_1; }

		//(hour=NUMBER "hour")?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//hour=NUMBER
		public Assignment getHourAssignment_2_3_0() { return cHourAssignment_2_3_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_2_3_0_0() { return cHourNUMBERParserRuleCall_2_3_0_0; }

		//"hour"
		public Keyword getHourKeyword_2_3_1() { return cHourKeyword_2_3_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_2_4_0() { return cMinuteAssignment_2_4_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_2_4_0_0() { return cMinuteNUMBERParserRuleCall_2_4_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_2_4_1() { return cAlternatives_2_4_1; }

		//"m"
		public Keyword getMKeyword_2_4_1_0() { return cMKeyword_2_4_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_2_4_1_1() { return cMinuteKeyword_2_4_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//second=NUMBER
		public Assignment getSecondAssignment_2_5_0() { return cSecondAssignment_2_5_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_2_5_0_0() { return cSecondNUMBERParserRuleCall_2_5_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_2_5_1() { return cAlternatives_2_5_1; }

		//"s"
		public Keyword getSKeyword_2_5_1_0() { return cSKeyword_2_5_1_0; }

		//"second"
		public Keyword getSecondKeyword_2_5_1_1() { return cSecondKeyword_2_5_1_1; }

		//{TimeLiteral} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
		//"second"))?
		public Group getGroup_3() { return cGroup_3; }

		//{TimeLiteral}
		public Action getTimeLiteralAction_3_0() { return cTimeLiteralAction_3_0; }

		//day=NUMBER "day"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//day=NUMBER
		public Assignment getDayAssignment_3_1_0() { return cDayAssignment_3_1_0; }

		//NUMBER
		public RuleCall getDayNUMBERParserRuleCall_3_1_0_0() { return cDayNUMBERParserRuleCall_3_1_0_0; }

		//"day"
		public Keyword getDayKeyword_3_1_1() { return cDayKeyword_3_1_1; }

		//(hour=NUMBER "hour")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//hour=NUMBER
		public Assignment getHourAssignment_3_2_0() { return cHourAssignment_3_2_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_3_2_0_0() { return cHourNUMBERParserRuleCall_3_2_0_0; }

		//"hour"
		public Keyword getHourKeyword_3_2_1() { return cHourKeyword_3_2_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_3_3_0() { return cMinuteAssignment_3_3_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_3_3_0_0() { return cMinuteNUMBERParserRuleCall_3_3_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_3_3_1() { return cAlternatives_3_3_1; }

		//"m"
		public Keyword getMKeyword_3_3_1_0() { return cMKeyword_3_3_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_3_3_1_1() { return cMinuteKeyword_3_3_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//second=NUMBER
		public Assignment getSecondAssignment_3_4_0() { return cSecondAssignment_3_4_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_3_4_0_0() { return cSecondNUMBERParserRuleCall_3_4_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_3_4_1() { return cAlternatives_3_4_1; }

		//"s"
		public Keyword getSKeyword_3_4_1_0() { return cSKeyword_3_4_1_0; }

		//"second"
		public Keyword getSecondKeyword_3_4_1_1() { return cSecondKeyword_3_4_1_1; }

		//{TimeLiteral} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))?
		public Group getGroup_4() { return cGroup_4; }

		//{TimeLiteral}
		public Action getTimeLiteralAction_4_0() { return cTimeLiteralAction_4_0; }

		//hour=NUMBER "hour"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//hour=NUMBER
		public Assignment getHourAssignment_4_1_0() { return cHourAssignment_4_1_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_4_1_0_0() { return cHourNUMBERParserRuleCall_4_1_0_0; }

		//"hour"
		public Keyword getHourKeyword_4_1_1() { return cHourKeyword_4_1_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_4_2_0() { return cMinuteAssignment_4_2_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_4_2_0_0() { return cMinuteNUMBERParserRuleCall_4_2_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_4_2_1() { return cAlternatives_4_2_1; }

		//"m"
		public Keyword getMKeyword_4_2_1_0() { return cMKeyword_4_2_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_4_2_1_1() { return cMinuteKeyword_4_2_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//second=NUMBER
		public Assignment getSecondAssignment_4_3_0() { return cSecondAssignment_4_3_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_4_3_0_0() { return cSecondNUMBERParserRuleCall_4_3_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_4_3_1() { return cAlternatives_4_3_1; }

		//"s"
		public Keyword getSKeyword_4_3_1_0() { return cSKeyword_4_3_1_0; }

		//"second"
		public Keyword getSecondKeyword_4_3_1_1() { return cSecondKeyword_4_3_1_1; }

		//{TimeLiteral} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))?
		public Group getGroup_5() { return cGroup_5; }

		//{TimeLiteral}
		public Action getTimeLiteralAction_5_0() { return cTimeLiteralAction_5_0; }

		//minute=NUMBER ("m" | "minute")
		public Group getGroup_5_1() { return cGroup_5_1; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_5_1_0() { return cMinuteAssignment_5_1_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_5_1_0_0() { return cMinuteNUMBERParserRuleCall_5_1_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_5_1_1() { return cAlternatives_5_1_1; }

		//"m"
		public Keyword getMKeyword_5_1_1_0() { return cMKeyword_5_1_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_5_1_1_1() { return cMinuteKeyword_5_1_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//second=NUMBER
		public Assignment getSecondAssignment_5_2_0() { return cSecondAssignment_5_2_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_5_2_0_0() { return cSecondNUMBERParserRuleCall_5_2_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_5_2_1() { return cAlternatives_5_2_1; }

		//"s"
		public Keyword getSKeyword_5_2_1_0() { return cSKeyword_5_2_1_0; }

		//"second"
		public Keyword getSecondKeyword_5_2_1_1() { return cSecondKeyword_5_2_1_1; }

		//{TimeLiteral} (second=NUMBER ("s" | "second"))
		public Group getGroup_6() { return cGroup_6; }

		//{TimeLiteral}
		public Action getTimeLiteralAction_6_0() { return cTimeLiteralAction_6_0; }

		//second=NUMBER ("s" | "second")
		public Group getGroup_6_1() { return cGroup_6_1; }

		//second=NUMBER
		public Assignment getSecondAssignment_6_1_0() { return cSecondAssignment_6_1_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_6_1_0_0() { return cSecondNUMBERParserRuleCall_6_1_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_6_1_1() { return cAlternatives_6_1_1; }

		//"s"
		public Keyword getSKeyword_6_1_1_0() { return cSKeyword_6_1_1_0; }

		//"second"
		public Keyword getSecondKeyword_6_1_1_1() { return cSecondKeyword_6_1_1_1; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////QualifiedName:
		////  ValidID (=>'.' ValidID)*;
		////Xtext Data types
		//NUMBER returns ecore::EDouble:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private LilModelElements pLilModel;
	private InteractorElements pInteractor;
	private AccessibleEntityElements pAccessibleEntity;
	private GenericEntityElements pGenericEntity;
	private EntityElements pEntity;
	private ActorElements pActor;
	private ActorAliasElements pActorAlias;
	private ComponentElements pComponent;
	private SignalReceptionElements pSignalReception;
	private SignalEmissionElements pSignalEmission;
	private SignalElements pSignal;
	private DefinitionSetElements pDefinitionSet;
	private SignalAliasElements pSignalAlias;
	private SignalModeElements pSignalMode;
	private DataTypeElements pDataType;
	private TypeBaseElements pTypeBase;
	private DataTypeDefinitionElements pDataTypeDefinition;
	private DataTypeStructureElements pDataTypeStructure;
	private DataTypeStructureFieldElements pDataTypeStructureField;
	private BehaviorElements pBehavior;
	private CauseElements pCause;
	private OnCauseElements pOnCause;
	private WhenCauseElements pWhenCause;
	private EffectElements pEffect;
	private AlwaysEffectElements pAlwaysEffect;
	private SetEffectElements pSetEffect;
	private TriggerEffectElements pTriggerEffect;
	private ExpressionElements pExpression;
	private OrExpressionElements pOrExpression;
	private OpOrElements pOpOr;
	private AndExpressionElements pAndExpression;
	private OpAndElements pOpAnd;
	private EqualityExpressionElements pEqualityExpression;
	private OpEqualityElements pOpEquality;
	private RelationalExpressionElements pRelationalExpression;
	private OpCompareElements pOpCompare;
	private OtherOperatorExpressionElements pOtherOperatorExpression;
	private OpOtherElements pOpOther;
	private AdditiveExpressionElements pAdditiveExpression;
	private OpAddElements pOpAdd;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private OpMultiElements pOpMulti;
	private UnaryOperationElements pUnaryOperation;
	private OpUnaryElements pOpUnary;
	private PrimaryExpressionElements pPrimaryExpression;
	private LiteralElements pLiteral;
	private CollectionLiteralElements pCollectionLiteral;
	private SetLiteralElements pSetLiteral;
	private ListLiteralElements pListLiteral;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private IfExpressionElements pIfExpression;
	private SwitchExpressionElements pSwitchExpression;
	private CasePartElements pCasePart;
	private ForEachExpressionElements pForEachExpression;
	private FunctionCallExpressionElements pFunctionCallExpression;
	private BuiltInFunctionElements pBuiltInFunction;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private NumberLiteralElements pNumberLiteral;
	private StringLiteralElements pStringLiteral;
	private EnumElementElements pEnumElement;
	private TimeLiteralElements pTimeLiteral;
	private NUMBERElements pNUMBER;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public LilGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.crubier.lil.Lil".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Model
	//LilModel:
	//	(interactors+=Interactor | dataTypes+=DataTypeDefinition)*;
	public LilModelElements getLilModelAccess() {
		return (pLilModel != null) ? pLilModel : (pLilModel = new LilModelElements());
	}
	
	public ParserRule getLilModelRule() {
		return getLilModelAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor
	//Interactor:
	//	"interactor" name=ID ":" (entities+=Entity | signals+=Signal | behaviors+=Behavior)*;
	public InteractorElements getInteractorAccess() {
		return (pInteractor != null) ? pInteractor : (pInteractor = new InteractorElements());
	}
	
	public ParserRule getInteractorRule() {
		return getInteractorAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Entities
	//AccessibleEntity:
	//	generic=GenericEntity | specific=[Entity];
	public AccessibleEntityElements getAccessibleEntityAccess() {
		return (pAccessibleEntity != null) ? pAccessibleEntity : (pAccessibleEntity = new AccessibleEntityElements());
	}
	
	public ParserRule getAccessibleEntityRule() {
		return getAccessibleEntityAccess().getRule();
	}

	//GenericEntity:
	//	"any" | "self" | "other" | "parent" | "child" | "all" | "actors";
	public GenericEntityElements getGenericEntityAccess() {
		return (pGenericEntity != null) ? pGenericEntity : (pGenericEntity = new GenericEntityElements());
	}
	
	public ParserRule getGenericEntityRule() {
		return getGenericEntityAccess().getRule();
	}

	//Entity:
	//	Actor | Component;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Actor:
	//	name=ID ":" "actor";
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//ActorAlias:
	//	source=[Actor] "as" alias=[Actor];
	public ActorAliasElements getActorAliasAccess() {
		return (pActorAlias != null) ? pActorAlias : (pActorAlias = new ActorAliasElements());
	}
	
	public ParserRule getActorAliasRule() {
		return getActorAliasAccess().getRule();
	}

	//Component:
	//	name=ID ":" interactor=[Interactor] ("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?;
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Signals
	//SignalReception:
	//	instance=[Signal] ("from" source=SignalAlias)? | init?="init";
	public SignalReceptionElements getSignalReceptionAccess() {
		return (pSignalReception != null) ? pSignalReception : (pSignalReception = new SignalReceptionElements());
	}
	
	public ParserRule getSignalReceptionRule() {
		return getSignalReceptionAccess().getRule();
	}

	//SignalEmission:
	//	instance=[Signal] ("to" destination=SignalAlias)?;
	public SignalEmissionElements getSignalEmissionAccess() {
		return (pSignalEmission != null) ? pSignalEmission : (pSignalEmission = new SignalEmissionElements());
	}
	
	public ParserRule getSignalEmissionRule() {
		return getSignalEmissionAccess().getRule();
	}

	//Signal:
	//	name=ID ":" type=DataType mode=SignalMode ("from" source=SignalAlias)? ("to" destinations+=SignalAlias)*;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//DefinitionSet:
	//	{EnumDefinitionSet} "{" elements+=EnumElement ("," elements+=EnumElement)* "}" | {NumberDefinitionSet} "{"
	//	elements+=NumberLiteral ("," elements+=NumberLiteral)* "}" | {NumberDefinitionInterval} "[" inf=NumberLiteral ","
	//	sup=NumberLiteral "]";
	public DefinitionSetElements getDefinitionSetAccess() {
		return (pDefinitionSet != null) ? pDefinitionSet : (pDefinitionSet = new DefinitionSetElements());
	}
	
	public ParserRule getDefinitionSetRule() {
		return getDefinitionSetAccess().getRule();
	}

	//SignalAlias:
	//	source=AccessibleEntity ("as" alias=[Signal])?;
	public SignalAliasElements getSignalAliasAccess() {
		return (pSignalAlias != null) ? pSignalAlias : (pSignalAlias = new SignalAliasElements());
	}
	
	public ParserRule getSignalAliasRule() {
		return getSignalAliasAccess().getRule();
	}

	//SignalMode:
	//	"event" | "flow" | "constant";
	public SignalModeElements getSignalModeAccess() {
		return (pSignalMode != null) ? pSignalMode : (pSignalMode = new SignalModeElements());
	}
	
	public ParserRule getSignalModeRule() {
		return getSignalModeAccess().getRule();
	}

	//DataType:
	//	{DataTypeBase} type=TypeBase ("in" definitionSet=DefinitionSet)? | {DataTypeCollection} mode=("set" | "list" | "map")
	//	"of" type=[DataType] ("in" definitionSet=DefinitionSet)? | {DataTypeCompound} compound=[DataTypeStructure];
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//TypeBase:
	//	"void" | "symbol" | "number" | "text" | "time" | "identifier";
	public TypeBaseElements getTypeBaseAccess() {
		return (pTypeBase != null) ? pTypeBase : (pTypeBase = new TypeBaseElements());
	}
	
	public ParserRule getTypeBaseRule() {
		return getTypeBaseAccess().getRule();
	}

	//DataTypeDefinition:
	//	DataTypeStructure;
	public DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return (pDataTypeDefinition != null) ? pDataTypeDefinition : (pDataTypeDefinition = new DataTypeDefinitionElements());
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}

	//DataTypeStructure:
	//	"structure" name=ID ":" fields+=DataTypeStructureField*;
	public DataTypeStructureElements getDataTypeStructureAccess() {
		return (pDataTypeStructure != null) ? pDataTypeStructure : (pDataTypeStructure = new DataTypeStructureElements());
	}
	
	public ParserRule getDataTypeStructureRule() {
		return getDataTypeStructureAccess().getRule();
	}

	//DataTypeStructureField:
	//	name=ID ":" type=DataType;
	public DataTypeStructureFieldElements getDataTypeStructureFieldAccess() {
		return (pDataTypeStructureField != null) ? pDataTypeStructureField : (pDataTypeStructureField = new DataTypeStructureFieldElements());
	}
	
	public ParserRule getDataTypeStructureFieldRule() {
		return getDataTypeStructureFieldAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Behaviors
	//Behavior:
	//	cause=Cause ":" effects+=Effect+;
	public BehaviorElements getBehaviorAccess() {
		return (pBehavior != null) ? pBehavior : (pBehavior = new BehaviorElements());
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//Cause:
	//	OnCause | WhenCause;
	public CauseElements getCauseAccess() {
		return (pCause != null) ? pCause : (pCause = new CauseElements());
	}
	
	public ParserRule getCauseRule() {
		return getCauseAccess().getRule();
	}

	//OnCause:
	//	"on" event=SignalReception ("if" guard=Expression)?;
	public OnCauseElements getOnCauseAccess() {
		return (pOnCause != null) ? pOnCause : (pOnCause = new OnCauseElements());
	}
	
	public ParserRule getOnCauseRule() {
		return getOnCauseAccess().getRule();
	}

	//WhenCause:
	//	"when" condition=Expression ("if" guard=Expression)?;
	public WhenCauseElements getWhenCauseAccess() {
		return (pWhenCause != null) ? pWhenCause : (pWhenCause = new WhenCauseElements());
	}
	
	public ParserRule getWhenCauseRule() {
		return getWhenCauseAccess().getRule();
	}

	//Effect:
	//	AlwaysEffect | SetEffect | TriggerEffect;
	public EffectElements getEffectAccess() {
		return (pEffect != null) ? pEffect : (pEffect = new EffectElements());
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//AlwaysEffect:
	//	"always" target=SignalEmission "=" value=Expression;
	public AlwaysEffectElements getAlwaysEffectAccess() {
		return (pAlwaysEffect != null) ? pAlwaysEffect : (pAlwaysEffect = new AlwaysEffectElements());
	}
	
	public ParserRule getAlwaysEffectRule() {
		return getAlwaysEffectAccess().getRule();
	}

	//SetEffect:
	//	"set" target=SignalEmission "=" value=Expression;
	public SetEffectElements getSetEffectAccess() {
		return (pSetEffect != null) ? pSetEffect : (pSetEffect = new SetEffectElements());
	}
	
	public ParserRule getSetEffectRule() {
		return getSetEffectAccess().getRule();
	}

	//TriggerEffect:
	//	"trigger" target=SignalEmission "=" value=Expression;
	public TriggerEffectElements getTriggerEffectAccess() {
		return (pTriggerEffect != null) ? pTriggerEffect : (pTriggerEffect = new TriggerEffectElements());
	}
	
	public ParserRule getTriggerEffectRule() {
		return getTriggerEffectAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Expressions
	////We do not use xbase because we only need a subset of it in order to be able to generate C code and in order to simplify the language
	////So we are going to construct the expressions language we need. It is similar to xbase on certain points, but still clearly different, semantically and syntaxically
	//Expression:
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"or";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//AndExpression returns Expression:
	//	EqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"and";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
	//	rightOperand=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	OtherOperatorExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
	//	rightOperand=OtherOperatorExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	"<=" | ">=" | "<" | ">";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//	AdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*;
	public OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return (pOtherOperatorExpression != null) ? pOtherOperatorExpression : (pOtherOperatorExpression = new OtherOperatorExpressionElements());
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	////String join and groovy elvis operator for null checking
	//OpOther:
	//	"<>" | "?:";
	public OpOtherElements getOpOtherAccess() {
		return (pOpOther != null) ? pOpOther : (pOpOther = new OpOtherElements());
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
	//	rightOperand=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	UnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return (pOpMulti != null) ? pOpMulti : (pOpMulti = new OpMultiElements());
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{UnaryOperation} feature=OpUnary operand=PrimaryExpression | PrimaryExpression;
	public UnaryOperationElements getUnaryOperationAccess() {
		return (pUnaryOperation != null) ? pUnaryOperation : (pUnaryOperation = new UnaryOperationElements());
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	SwitchExpression | IfExpression | Literal | ForEachExpression | FunctionCallExpression | ParenthesizedExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal returns Expression:
	//	CollectionLiteral | BooleanLiteral | NumberLiteral | NullLiteral | StringLiteral | TimeLiteral | {EnumLiteral} "#"
	//	element=[EnumElement] | {SignalLiteral} signal=[Signal];
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//CollectionLiteral:
	//	SetLiteral | ListLiteral;
	public CollectionLiteralElements getCollectionLiteralAccess() {
		return (pCollectionLiteral != null) ? pCollectionLiteral : (pCollectionLiteral = new CollectionLiteralElements());
	}
	
	public ParserRule getCollectionLiteralRule() {
		return getCollectionLiteralAccess().getRule();
	}

	//SetLiteral:
	//	{SetLiteral} "{" (elements+=Expression ("," elements+=Expression)*)? "}";
	public SetLiteralElements getSetLiteralAccess() {
		return (pSetLiteral != null) ? pSetLiteral : (pSetLiteral = new SetLiteralElements());
	}
	
	public ParserRule getSetLiteralRule() {
		return getSetLiteralAccess().getRule();
	}

	//ListLiteral:
	//	{ListLiteral} "[" (elements+=Expression ("," elements+=Expression)*)? "]";
	public ListLiteralElements getListLiteralAccess() {
		return (pListLiteral != null) ? pListLiteral : (pListLiteral = new ListLiteralElements());
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//	"(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//IfExpression returns Expression:
	//	{IfExpression} "if" "(" if=Expression => ")" then=Expression ("else" else=Expression);
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression returns Expression:
	//	{SwitchExpression} "switch" "(" switch=Expression => ")" => cases+=CasePart+ ("default" ":" default=Expression)?;
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return (pSwitchExpression != null) ? pSwitchExpression : (pSwitchExpression = new SwitchExpressionElements());
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//CasePart:
	//	"case" case=Expression ":" then=Expression;
	public CasePartElements getCasePartAccess() {
		return (pCasePart != null) ? pCasePart : (pCasePart = new CasePartElements());
	}
	
	public ParserRule getCasePartRule() {
		return getCasePartAccess().getRule();
	}

	//ForEachExpression returns Expression:
	//	{ForEachExpression} "for" "each" "(" forExpression=Expression ")" eachExpression=Expression;
	public ForEachExpressionElements getForEachExpressionAccess() {
		return (pForEachExpression != null) ? pForEachExpression : (pForEachExpression = new ForEachExpressionElements());
	}
	
	public ParserRule getForEachExpressionRule() {
		return getForEachExpressionAccess().getRule();
	}

	//FunctionCallExpression returns Expression:
	//	{FunctionCallExpression} function=BuiltInFunction "(" arguments+=Expression? ("," arguments+=Expression)* ")";
	public FunctionCallExpressionElements getFunctionCallExpressionAccess() {
		return (pFunctionCallExpression != null) ? pFunctionCallExpression : (pFunctionCallExpression = new FunctionCallExpressionElements());
	}
	
	public ParserRule getFunctionCallExpressionRule() {
		return getFunctionCallExpressionAccess().getRule();
	}

	////Same functions as c math.*
	//BuiltInFunction:
	//	"Math.abs" | "Math.acos" | "Math.acosh" | "Math.asin" | "Math.asinh" | "Math.atan" | "Math.atanh" | "Math.atan2" |
	//	"Math.ceil" | "Math.clip" | "Math.cos" | "Math.cosh" | "Math.exp" | "Math.floor" | "Math.fround" | "Math.hypot" |
	//	"Math.log" | "Math.log10" | "Math.log2" | "Math.max" | "Math.min" | "Math.pow" | "Math.random" | "Math.round" |
	//	"Math.sign" | "Math.sin" | "Math.sinh" | "Math.sqrt" | "Math.tan" | "Math.tanh" | "Math.trunc" | "Set.orderby" |
	//	"Set.add" | "Set.find" | "Set.change" | "Set.remove";
	public BuiltInFunctionElements getBuiltInFunctionAccess() {
		return (pBuiltInFunction != null) ? pBuiltInFunction : (pBuiltInFunction = new BuiltInFunctionElements());
	}
	
	public ParserRule getBuiltInFunctionRule() {
		return getBuiltInFunctionAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Literals
	//BooleanLiteral returns Expression:
	//	{BooleanLiteral} ("false" | isTrue?="true");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral returns Expression:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//NumberLiteral returns Expression:
	//	{NumberLiteral} value=NUMBER;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//StringLiteral returns Expression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//EnumElement:
	//	{EnumLiteral} "#" name=ID;
	public EnumElementElements getEnumElementAccess() {
		return (pEnumElement != null) ? pEnumElement : (pEnumElement = new EnumElementElements());
	}
	
	public ParserRule getEnumElementRule() {
		return getEnumElementAccess().getRule();
	}

	////	| {TimeLiteral} (year=NUMBER ':')? (month=NUMBER ':')? (day=NUMBER ':')? (hour=NUMBER ':')? (minute=NUMBER ':')? (second=NUMBER )? ;
	//TimeLiteral returns Expression:
	//	{TimeLiteralNow} "now" | {TimeLiteral} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER
	//	"hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? | {TimeLiteral} (month=NUMBER "month")
	//	(day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
	//	{TimeLiteral} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
	//	"second"))? | {TimeLiteral} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
	//	{TimeLiteral} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))? | {TimeLiteral} (second=NUMBER ("s" |
	//	"second"));
	public TimeLiteralElements getTimeLiteralAccess() {
		return (pTimeLiteral != null) ? pTimeLiteral : (pTimeLiteral = new TimeLiteralElements());
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}

	////QualifiedName:
	////  ValidID (=>'.' ValidID)*;
	////Xtext Data types
	//NUMBER returns ecore::EDouble:
	//	INT ("." INT)?;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//// Terminals
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
