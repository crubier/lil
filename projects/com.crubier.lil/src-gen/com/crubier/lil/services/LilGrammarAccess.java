/*
* generated by Xtext
*/
package com.crubier.lil.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class LilGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInteractorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInteractorsInteractorDeclarationParserRuleCall_0_0 = (RuleCall)cInteractorsAssignment_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypesDataTypeCompoundDeclarationParserRuleCall_1_0 = (RuleCall)cDataTypesAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Model
		//Model:
		//	(interactors+=InteractorDeclaration | dataTypes+=DataTypeCompoundDeclaration)*;
		public ParserRule getRule() { return rule; }

		//(interactors+=InteractorDeclaration | dataTypes+=DataTypeCompoundDeclaration)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//interactors+=InteractorDeclaration
		public Assignment getInteractorsAssignment_0() { return cInteractorsAssignment_0; }

		//InteractorDeclaration
		public RuleCall getInteractorsInteractorDeclarationParserRuleCall_0_0() { return cInteractorsInteractorDeclarationParserRuleCall_0_0; }

		//dataTypes+=DataTypeCompoundDeclaration
		public Assignment getDataTypesAssignment_1() { return cDataTypesAssignment_1; }

		//DataTypeCompoundDeclaration
		public RuleCall getDataTypesDataTypeCompoundDeclarationParserRuleCall_1_0() { return cDataTypesDataTypeCompoundDeclarationParserRuleCall_1_0; }
	}

	public class InteractorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEntitiesEntityDeclarationParserRuleCall_3_0_0 = (RuleCall)cEntitiesAssignment_3_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSignalsSignalDeclarationParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Assignment cBehaviorsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cBehaviorsBehaviorDeclarationParserRuleCall_3_2_0 = (RuleCall)cBehaviorsAssignment_3_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor
		//InteractorDeclaration:
		//	"interactor" name=ID ":" (entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*;
		public ParserRule getRule() { return rule; }

		//"interactor" name=ID ":" (entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*
		public Group getGroup() { return cGroup; }

		//"interactor"
		public Keyword getInteractorKeyword_0() { return cInteractorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//entities+=EntityDeclaration
		public Assignment getEntitiesAssignment_3_0() { return cEntitiesAssignment_3_0; }

		//EntityDeclaration
		public RuleCall getEntitiesEntityDeclarationParserRuleCall_3_0_0() { return cEntitiesEntityDeclarationParserRuleCall_3_0_0; }

		//signals+=SignalDeclaration
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//SignalDeclaration
		public RuleCall getSignalsSignalDeclarationParserRuleCall_3_1_0() { return cSignalsSignalDeclarationParserRuleCall_3_1_0; }

		//behaviors+=BehaviorDeclaration
		public Assignment getBehaviorsAssignment_3_2() { return cBehaviorsAssignment_3_2; }

		//BehaviorDeclaration
		public RuleCall getBehaviorsBehaviorDeclarationParserRuleCall_3_2_0() { return cBehaviorsBehaviorDeclarationParserRuleCall_3_2_0; }
	}

	public class AccessibleEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessibleEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenericAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cGenericAlternatives_0_0 = (Alternatives)cGenericAssignment_0.eContents().get(0);
		private final Keyword cGenericAnyKeyword_0_0_0 = (Keyword)cGenericAlternatives_0_0.eContents().get(0);
		private final Keyword cGenericSelfKeyword_0_0_1 = (Keyword)cGenericAlternatives_0_0.eContents().get(1);
		private final Keyword cGenericOtherKeyword_0_0_2 = (Keyword)cGenericAlternatives_0_0.eContents().get(2);
		private final Keyword cGenericParentKeyword_0_0_3 = (Keyword)cGenericAlternatives_0_0.eContents().get(3);
		private final Keyword cGenericChildKeyword_0_0_4 = (Keyword)cGenericAlternatives_0_0.eContents().get(4);
		private final Keyword cGenericAllKeyword_0_0_5 = (Keyword)cGenericAlternatives_0_0.eContents().get(5);
		private final Keyword cGenericActorsKeyword_0_0_6 = (Keyword)cGenericAlternatives_0_0.eContents().get(6);
		private final Assignment cSpecificAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSpecificEntityParserRuleCall_1_0 = (RuleCall)cSpecificAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Entities
		//AccessibleEntity:
		//	generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors") | specific=Entity;
		public ParserRule getRule() { return rule; }

		//generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors") | specific=Entity
		public Alternatives getAlternatives() { return cAlternatives; }

		//generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors")
		public Assignment getGenericAssignment_0() { return cGenericAssignment_0; }

		//"any" | "self" | "other" | "parent" | "child" | "all" | "actors"
		public Alternatives getGenericAlternatives_0_0() { return cGenericAlternatives_0_0; }

		//"any"
		public Keyword getGenericAnyKeyword_0_0_0() { return cGenericAnyKeyword_0_0_0; }

		//"self"
		public Keyword getGenericSelfKeyword_0_0_1() { return cGenericSelfKeyword_0_0_1; }

		//"other"
		public Keyword getGenericOtherKeyword_0_0_2() { return cGenericOtherKeyword_0_0_2; }

		//"parent"
		public Keyword getGenericParentKeyword_0_0_3() { return cGenericParentKeyword_0_0_3; }

		//"child"
		public Keyword getGenericChildKeyword_0_0_4() { return cGenericChildKeyword_0_0_4; }

		//"all"
		public Keyword getGenericAllKeyword_0_0_5() { return cGenericAllKeyword_0_0_5; }

		//"actors"
		public Keyword getGenericActorsKeyword_0_0_6() { return cGenericActorsKeyword_0_0_6; }

		//specific=Entity
		public Assignment getSpecificAssignment_1() { return cSpecificAssignment_1; }

		//Entity
		public RuleCall getSpecificEntityParserRuleCall_1_0() { return cSpecificEntityParserRuleCall_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Assignment cInstanceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cInstanceEntityDeclarationCrossReference_0 = (CrossReference)cInstanceAssignment.eContents().get(0);
		private final RuleCall cInstanceEntityDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cInstanceEntityDeclarationCrossReference_0.eContents().get(1);
		
		//Entity:
		//	instance=[EntityDeclaration];
		public ParserRule getRule() { return rule; }

		//instance=[EntityDeclaration]
		public Assignment getInstanceAssignment() { return cInstanceAssignment; }

		//[EntityDeclaration]
		public CrossReference getInstanceEntityDeclarationCrossReference_0() { return cInstanceEntityDeclarationCrossReference_0; }

		//ID
		public RuleCall getInstanceEntityDeclarationIDTerminalRuleCall_0_1() { return cInstanceEntityDeclarationIDTerminalRuleCall_0_1; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Assignment cInstanceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cInstanceActorDeclarationCrossReference_0 = (CrossReference)cInstanceAssignment.eContents().get(0);
		private final RuleCall cInstanceActorDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cInstanceActorDeclarationCrossReference_0.eContents().get(1);
		
		//Actor:
		//	instance=[ActorDeclaration];
		public ParserRule getRule() { return rule; }

		//instance=[ActorDeclaration]
		public Assignment getInstanceAssignment() { return cInstanceAssignment; }

		//[ActorDeclaration]
		public CrossReference getInstanceActorDeclarationCrossReference_0() { return cInstanceActorDeclarationCrossReference_0; }

		//ID
		public RuleCall getInstanceActorDeclarationIDTerminalRuleCall_0_1() { return cInstanceActorDeclarationIDTerminalRuleCall_0_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Assignment cInstanceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cInstanceComponentDeclarationCrossReference_0 = (CrossReference)cInstanceAssignment.eContents().get(0);
		private final RuleCall cInstanceComponentDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cInstanceComponentDeclarationCrossReference_0.eContents().get(1);
		
		//Component:
		//	instance=[ComponentDeclaration];
		public ParserRule getRule() { return rule; }

		//instance=[ComponentDeclaration]
		public Assignment getInstanceAssignment() { return cInstanceAssignment; }

		//[ComponentDeclaration]
		public CrossReference getInstanceComponentDeclarationCrossReference_0() { return cInstanceComponentDeclarationCrossReference_0; }

		//ID
		public RuleCall getInstanceComponentDeclarationIDTerminalRuleCall_0_1() { return cInstanceComponentDeclarationIDTerminalRuleCall_0_1; }
	}

	public class EntityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityDeclaration:
		//	ActorDeclaration | ComponentDeclaration;
		public ParserRule getRule() { return rule; }

		//ActorDeclaration | ComponentDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActorDeclaration
		public RuleCall getActorDeclarationParserRuleCall_0() { return cActorDeclarationParserRuleCall_0; }

		//ComponentDeclaration
		public RuleCall getComponentDeclarationParserRuleCall_1() { return cComponentDeclarationParserRuleCall_1; }
	}

	public class ActorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ActorDeclaration:
		//	"actor" name=ID;
		public ParserRule getRule() { return rule; }

		//"actor" name=ID
		public Group getGroup() { return cGroup; }

		//"actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ActorAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceActorParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRemoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRemoteActorParserRuleCall_2_0 = (RuleCall)cRemoteAssignment_2.eContents().get(0);
		
		//ActorAlias:
		//	source=Actor "as" remote=Actor;
		public ParserRule getRule() { return rule; }

		//source=Actor "as" remote=Actor
		public Group getGroup() { return cGroup; }

		//source=Actor
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//Actor
		public RuleCall getSourceActorParserRuleCall_0_0() { return cSourceActorParserRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//remote=Actor
		public Assignment getRemoteAssignment_2() { return cRemoteAssignment_2; }

		//Actor
		public RuleCall getRemoteActorParserRuleCall_2_0() { return cRemoteActorParserRuleCall_2_0; }
	}

	public class ComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInteractorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInteractorInteractorDeclarationCrossReference_0_0 = (CrossReference)cInteractorAssignment_0.eContents().get(0);
		private final RuleCall cInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInteractorInteractorDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesActorAliasParserRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAliasesActorAliasParserRuleCall_2_2_1_0 = (RuleCall)cAliasesAssignment_2_2_1.eContents().get(0);
		
		//ComponentDeclaration:
		//	interactor=[InteractorDeclaration] name=ID ("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?;
		public ParserRule getRule() { return rule; }

		//interactor=[InteractorDeclaration] name=ID ("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?
		public Group getGroup() { return cGroup; }

		//interactor=[InteractorDeclaration]
		public Assignment getInteractorAssignment_0() { return cInteractorAssignment_0; }

		//[InteractorDeclaration]
		public CrossReference getInteractorInteractorDeclarationCrossReference_0_0() { return cInteractorInteractorDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1() { return cInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//aliases+=ActorAlias
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }

		//ActorAlias
		public RuleCall getAliasesActorAliasParserRuleCall_2_1_0() { return cAliasesActorAliasParserRuleCall_2_1_0; }

		//("," aliases+=ActorAlias)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//aliases+=ActorAlias
		public Assignment getAliasesAssignment_2_2_1() { return cAliasesAssignment_2_2_1; }

		//ActorAlias
		public RuleCall getAliasesActorAliasParserRuleCall_2_2_1_0() { return cAliasesActorAliasParserRuleCall_2_2_1_0; }
	}

	public class EventReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventReception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstanceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cInstanceEventDeclarationCrossReference_0_0_0 = (CrossReference)cInstanceAssignment_0_0.eContents().get(0);
		private final RuleCall cInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cInstanceEventDeclarationCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFromKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSourceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSourceComponentParserRuleCall_0_1_1_0 = (RuleCall)cSourceAssignment_0_1_1.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBaseInitKeyword_1_0 = (Keyword)cBaseAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Signals
		//EventReception:
		//	instance=[EventDeclaration] ("from" source=Component)? | base="init";
		public ParserRule getRule() { return rule; }

		//instance=[EventDeclaration] ("from" source=Component)? | base="init"
		public Alternatives getAlternatives() { return cAlternatives; }

		//instance=[EventDeclaration] ("from" source=Component)?
		public Group getGroup_0() { return cGroup_0; }

		//instance=[EventDeclaration]
		public Assignment getInstanceAssignment_0_0() { return cInstanceAssignment_0_0; }

		//[EventDeclaration]
		public CrossReference getInstanceEventDeclarationCrossReference_0_0_0() { return cInstanceEventDeclarationCrossReference_0_0_0; }

		//ID
		public RuleCall getInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1() { return cInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1; }

		//("from" source=Component)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"from"
		public Keyword getFromKeyword_0_1_0() { return cFromKeyword_0_1_0; }

		//source=Component
		public Assignment getSourceAssignment_0_1_1() { return cSourceAssignment_0_1_1; }

		//Component
		public RuleCall getSourceComponentParserRuleCall_0_1_1_0() { return cSourceComponentParserRuleCall_0_1_1_0; }

		//base="init"
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//"init"
		public Keyword getBaseInitKeyword_1_0() { return cBaseInitKeyword_1_0; }
	}

	public class FlowReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowReception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceFlowDeclarationCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceFlowDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSourceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSourceComponentParserRuleCall_1_1_0 = (RuleCall)cSourceAssignment_1_1.eContents().get(0);
		
		//FlowReception:
		//	instance=[FlowDeclaration] ("from" source=Component)?;
		public ParserRule getRule() { return rule; }

		//instance=[FlowDeclaration] ("from" source=Component)?
		public Group getGroup() { return cGroup; }

		//instance=[FlowDeclaration]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[FlowDeclaration]
		public CrossReference getInstanceFlowDeclarationCrossReference_0_0() { return cInstanceFlowDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInstanceFlowDeclarationIDTerminalRuleCall_0_0_1() { return cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1; }

		//("from" source=Component)?
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//source=Component
		public Assignment getSourceAssignment_1_1() { return cSourceAssignment_1_1; }

		//Component
		public RuleCall getSourceComponentParserRuleCall_1_1_0() { return cSourceComponentParserRuleCall_1_1_0; }
	}

	public class EventEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventEmission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceEventDeclarationCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceEventDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceEventDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDestinationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDestinationComponentParserRuleCall_1_1_0 = (RuleCall)cDestinationAssignment_1_1.eContents().get(0);
		
		//EventEmission:
		//	instance=[EventDeclaration] ("to" destination=Component)?;
		public ParserRule getRule() { return rule; }

		//instance=[EventDeclaration] ("to" destination=Component)?
		public Group getGroup() { return cGroup; }

		//instance=[EventDeclaration]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[EventDeclaration]
		public CrossReference getInstanceEventDeclarationCrossReference_0_0() { return cInstanceEventDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInstanceEventDeclarationIDTerminalRuleCall_0_0_1() { return cInstanceEventDeclarationIDTerminalRuleCall_0_0_1; }

		//("to" destination=Component)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//destination=Component
		public Assignment getDestinationAssignment_1_1() { return cDestinationAssignment_1_1; }

		//Component
		public RuleCall getDestinationComponentParserRuleCall_1_1_0() { return cDestinationComponentParserRuleCall_1_1_0; }
	}

	public class FlowEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowEmission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceFlowDeclarationCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceFlowDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDestinationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDestinationComponentParserRuleCall_1_1_0 = (RuleCall)cDestinationAssignment_1_1.eContents().get(0);
		
		//FlowEmission:
		//	instance=[FlowDeclaration] ("to" destination=Component)?;
		public ParserRule getRule() { return rule; }

		//instance=[FlowDeclaration] ("to" destination=Component)?
		public Group getGroup() { return cGroup; }

		//instance=[FlowDeclaration]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[FlowDeclaration]
		public CrossReference getInstanceFlowDeclarationCrossReference_0_0() { return cInstanceFlowDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInstanceFlowDeclarationIDTerminalRuleCall_0_0_1() { return cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1; }

		//("to" destination=Component)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//destination=Component
		public Assignment getDestinationAssignment_1_1() { return cDestinationAssignment_1_1; }

		//Component
		public RuleCall getDestinationComponentParserRuleCall_1_1_0() { return cDestinationComponentParserRuleCall_1_1_0; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlowDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalDeclaration:
		//	EventDeclaration | FlowDeclaration;
		public ParserRule getRule() { return rule; }

		//EventDeclaration | FlowDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_0() { return cEventDeclarationParserRuleCall_0; }

		//FlowDeclaration
		public RuleCall getFlowDeclarationParserRuleCall_1() { return cFlowDeclarationParserRuleCall_1; }
	}

	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceAccessibleEntityParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDestinationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDestinationsAccessibleEntityParserRuleCall_4_1_0 = (RuleCall)cDestinationsAssignment_4_1.eContents().get(0);
		
		//EventDeclaration:
		//	type=DataType "event" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
		public ParserRule getRule() { return rule; }

		//type=DataType "event" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("from" source=AccessibleEntity)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//source=AccessibleEntity
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//AccessibleEntity
		public RuleCall getSourceAccessibleEntityParserRuleCall_3_1_0() { return cSourceAccessibleEntityParserRuleCall_3_1_0; }

		//("to" destinations+=AccessibleEntity)*
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//destinations+=AccessibleEntity
		public Assignment getDestinationsAssignment_4_1() { return cDestinationsAssignment_4_1; }

		//AccessibleEntity
		public RuleCall getDestinationsAccessibleEntityParserRuleCall_4_1_0() { return cDestinationsAccessibleEntityParserRuleCall_4_1_0; }
	}

	public class FlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceAccessibleEntityParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDestinationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDestinationsAccessibleEntityParserRuleCall_4_1_0 = (RuleCall)cDestinationsAssignment_4_1.eContents().get(0);
		
		//FlowDeclaration:
		//	type=DataType "flow" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
		public ParserRule getRule() { return rule; }

		//type=DataType "flow" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//"flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("from" source=AccessibleEntity)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//source=AccessibleEntity
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//AccessibleEntity
		public RuleCall getSourceAccessibleEntityParserRuleCall_3_1_0() { return cSourceAccessibleEntityParserRuleCall_3_1_0; }

		//("to" destinations+=AccessibleEntity)*
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//destinations+=AccessibleEntity
		public Assignment getDestinationsAssignment_4_1() { return cDestinationsAssignment_4_1; }

		//AccessibleEntity
		public RuleCall getDestinationsAccessibleEntityParserRuleCall_4_1_0() { return cDestinationsAccessibleEntityParserRuleCall_4_1_0; }
	}

	public class BehaviorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCauseCauseParserRuleCall_0_0 = (RuleCall)cCauseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffectsEffectParserRuleCall_2_0 = (RuleCall)cEffectsAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Behaviors
		//BehaviorDeclaration:
		//	cause=Cause ":" effects+=Effect+;
		public ParserRule getRule() { return rule; }

		//cause=Cause ":" effects+=Effect+
		public Group getGroup() { return cGroup; }

		//cause=Cause
		public Assignment getCauseAssignment_0() { return cCauseAssignment_0; }

		//Cause
		public RuleCall getCauseCauseParserRuleCall_0_0() { return cCauseCauseParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//effects+=Effect+
		public Assignment getEffectsAssignment_2() { return cEffectsAssignment_2; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_2_0() { return cEffectsEffectParserRuleCall_2_0; }
	}

	public class CauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnCauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenCauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Cause:
		//	OnCause | WhenCause;
		public ParserRule getRule() { return rule; }

		//OnCause | WhenCause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OnCause
		public RuleCall getOnCauseParserRuleCall_0() { return cOnCauseParserRuleCall_0; }

		//WhenCause
		public RuleCall getWhenCauseParserRuleCall_1() { return cWhenCauseParserRuleCall_1; }
	}

	public class OnCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventReceptionParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//OnCause:
		//	"on" event=EventReception ("if" guard=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"on" event=EventReception ("if" guard=XExpression)?
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=EventReception
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//EventReception
		public RuleCall getEventEventReceptionParserRuleCall_1_0() { return cEventEventReceptionParserRuleCall_1_0; }

		//("if" guard=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_1_0() { return cGuardXExpressionParserRuleCall_2_1_0; }
	}

	public class WhenCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionXExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//WhenCause:
		//	"when" condition=XExpression ("if" guard=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"when" condition=XExpression ("if" guard=XExpression)?
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=XExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_1_0() { return cConditionXExpressionParserRuleCall_1_0; }

		//("if" guard=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_1_0() { return cGuardXExpressionParserRuleCall_2_1_0; }
	}

	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlwaysEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect:
		//	AlwaysEffect | SetEffect | TriggerEffect;
		public ParserRule getRule() { return rule; }

		//AlwaysEffect | SetEffect | TriggerEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//AlwaysEffect
		public RuleCall getAlwaysEffectParserRuleCall_0() { return cAlwaysEffectParserRuleCall_0; }

		//SetEffect
		public RuleCall getSetEffectParserRuleCall_1() { return cSetEffectParserRuleCall_1; }

		//TriggerEffect
		public RuleCall getTriggerEffectParserRuleCall_2() { return cTriggerEffectParserRuleCall_2; }
	}

	public class AlwaysEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlwaysEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlwaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetFlowEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AlwaysEffect:
		//	"always" target=FlowEmission "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//"always" target=FlowEmission "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//"always"
		public Keyword getAlwaysKeyword_0() { return cAlwaysKeyword_0; }

		//target=FlowEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//FlowEmission
		public RuleCall getTargetFlowEmissionParserRuleCall_1_0() { return cTargetFlowEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class SetEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetFlowEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SetEffect:
		//	"set" target=FlowEmission "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//"set" target=FlowEmission "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//target=FlowEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//FlowEmission
		public RuleCall getTargetFlowEmissionParserRuleCall_1_0() { return cTargetFlowEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class TriggerEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEventEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//TriggerEffect:
		//	"trigger" target=EventEmission "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//"trigger" target=EventEmission "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//target=EventEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//EventEmission
		public RuleCall getTargetEventEmissionParserRuleCall_1_0() { return cTargetEventEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class DataTypeCompoundDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeCompoundDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsDataTypeCompoundFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Compound data types
		//DataTypeCompoundDeclaration:
		//	"structure" name=ID ":" fields+=DataTypeCompoundField*;
		public ParserRule getRule() { return rule; }

		//"structure" name=ID ":" fields+=DataTypeCompoundField*
		public Group getGroup() { return cGroup; }

		//"structure"
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//fields+=DataTypeCompoundField*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//DataTypeCompoundField
		public RuleCall getFieldsDataTypeCompoundFieldParserRuleCall_3_0() { return cFieldsDataTypeCompoundFieldParserRuleCall_3_0; }
	}

	public class DataTypeCompoundFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeCompoundField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataTypeCompoundField:
		//	type=DataType name=ID;
		public ParserRule getRule() { return rule; }

		//type=DataType name=ID
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeCompoundAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeDataTypeCompoundDeclarationCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeDataTypeCompoundDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTypeDataTypeCompoundDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeBaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_1_0 = (Alternatives)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cTypeVoidKeyword_1_1_0_0 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTypeSymbolKeyword_1_1_0_1 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(1);
		private final Keyword cTypeNumberKeyword_1_1_0_2 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(2);
		private final Keyword cTypeTextKeyword_1_1_0_3 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(3);
		private final Keyword cTypeTimeKeyword_1_1_0_4 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(4);
		private final Keyword cTypeReferenceKeyword_1_1_0_5 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(5);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a small subset of it in order to be able to generate C code and in order to simplify the language
		////So we are going to construct the expressions we need
		//DataType:
		//	{DataTypeCompound} type=[DataTypeCompoundDeclaration] | {DataTypeBase} type=("void" | "symbol" | "number" | "text" |
		//	"time" | "reference");
		public ParserRule getRule() { return rule; }

		//{DataTypeCompound} type=[DataTypeCompoundDeclaration] /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a small subset of it in order to be able to generate C code and in order to simplify the language
		////So we are going to construct the expressions we need
		//| {DataTypeBase} type=("void" | "symbol" | "number" | "text" | "time" | "reference")
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DataTypeCompound} type=[DataTypeCompoundDeclaration]
		public Group getGroup_0() { return cGroup_0; }

		//{DataTypeCompound}
		public Action getDataTypeCompoundAction_0_0() { return cDataTypeCompoundAction_0_0; }

		//type=[DataTypeCompoundDeclaration]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//[DataTypeCompoundDeclaration]
		public CrossReference getTypeDataTypeCompoundDeclarationCrossReference_0_1_0() { return cTypeDataTypeCompoundDeclarationCrossReference_0_1_0; }

		//ID
		public RuleCall getTypeDataTypeCompoundDeclarationIDTerminalRuleCall_0_1_0_1() { return cTypeDataTypeCompoundDeclarationIDTerminalRuleCall_0_1_0_1; }

		//{DataTypeBase} type=("void" | "symbol" | "number" | "text" | "time" | "reference") /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a small subset of it in order to be able to generate C code and in order to simplify the language
		////So we are going to construct the expressions we need
		public Group getGroup_1() { return cGroup_1; }

		//{DataTypeBase}
		public Action getDataTypeBaseAction_1_0() { return cDataTypeBaseAction_1_0; }

		//type=("void" | "symbol" | "number" | "text" | "time" | "reference")
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//"void" | "symbol" | "number" | "text" | "time" | "reference"
		public Alternatives getTypeAlternatives_1_1_0() { return cTypeAlternatives_1_1_0; }

		//"void"
		public Keyword getTypeVoidKeyword_1_1_0_0() { return cTypeVoidKeyword_1_1_0_0; }

		//"symbol"
		public Keyword getTypeSymbolKeyword_1_1_0_1() { return cTypeSymbolKeyword_1_1_0_1; }

		//"number"
		public Keyword getTypeNumberKeyword_1_1_0_2() { return cTypeNumberKeyword_1_1_0_2; }

		//"text"
		public Keyword getTypeTextKeyword_1_1_0_3() { return cTypeTextKeyword_1_1_0_3; }

		//"time"
		public Keyword getTypeTimeKeyword_1_1_0_4() { return cTypeTimeKeyword_1_1_0_4; }

		//"reference"
		public Keyword getTypeReferenceKeyword_1_1_0_5() { return cTypeReferenceKeyword_1_1_0_5; }
	}
	
	
	private ModelElements pModel;
	private InteractorDeclarationElements pInteractorDeclaration;
	private AccessibleEntityElements pAccessibleEntity;
	private EntityElements pEntity;
	private ActorElements pActor;
	private ComponentElements pComponent;
	private EntityDeclarationElements pEntityDeclaration;
	private ActorDeclarationElements pActorDeclaration;
	private ActorAliasElements pActorAlias;
	private ComponentDeclarationElements pComponentDeclaration;
	private EventReceptionElements pEventReception;
	private FlowReceptionElements pFlowReception;
	private EventEmissionElements pEventEmission;
	private FlowEmissionElements pFlowEmission;
	private SignalDeclarationElements pSignalDeclaration;
	private EventDeclarationElements pEventDeclaration;
	private FlowDeclarationElements pFlowDeclaration;
	private BehaviorDeclarationElements pBehaviorDeclaration;
	private CauseElements pCause;
	private OnCauseElements pOnCause;
	private WhenCauseElements pWhenCause;
	private EffectElements pEffect;
	private AlwaysEffectElements pAlwaysEffect;
	private SetEffectElements pSetEffect;
	private TriggerEffectElements pTriggerEffect;
	private DataTypeCompoundDeclarationElements pDataTypeCompoundDeclaration;
	private DataTypeCompoundFieldElements pDataTypeCompoundField;
	private DataTypeElements pDataType;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public LilGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.crubier.lil.Lil".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Model
	//Model:
	//	(interactors+=InteractorDeclaration | dataTypes+=DataTypeCompoundDeclaration)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor
	//InteractorDeclaration:
	//	"interactor" name=ID ":" (entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*;
	public InteractorDeclarationElements getInteractorDeclarationAccess() {
		return (pInteractorDeclaration != null) ? pInteractorDeclaration : (pInteractorDeclaration = new InteractorDeclarationElements());
	}
	
	public ParserRule getInteractorDeclarationRule() {
		return getInteractorDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Entities
	//AccessibleEntity:
	//	generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors") | specific=Entity;
	public AccessibleEntityElements getAccessibleEntityAccess() {
		return (pAccessibleEntity != null) ? pAccessibleEntity : (pAccessibleEntity = new AccessibleEntityElements());
	}
	
	public ParserRule getAccessibleEntityRule() {
		return getAccessibleEntityAccess().getRule();
	}

	//Entity:
	//	instance=[EntityDeclaration];
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Actor:
	//	instance=[ActorDeclaration];
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Component:
	//	instance=[ComponentDeclaration];
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//EntityDeclaration:
	//	ActorDeclaration | ComponentDeclaration;
	public EntityDeclarationElements getEntityDeclarationAccess() {
		return (pEntityDeclaration != null) ? pEntityDeclaration : (pEntityDeclaration = new EntityDeclarationElements());
	}
	
	public ParserRule getEntityDeclarationRule() {
		return getEntityDeclarationAccess().getRule();
	}

	//ActorDeclaration:
	//	"actor" name=ID;
	public ActorDeclarationElements getActorDeclarationAccess() {
		return (pActorDeclaration != null) ? pActorDeclaration : (pActorDeclaration = new ActorDeclarationElements());
	}
	
	public ParserRule getActorDeclarationRule() {
		return getActorDeclarationAccess().getRule();
	}

	//ActorAlias:
	//	source=Actor "as" remote=Actor;
	public ActorAliasElements getActorAliasAccess() {
		return (pActorAlias != null) ? pActorAlias : (pActorAlias = new ActorAliasElements());
	}
	
	public ParserRule getActorAliasRule() {
		return getActorAliasAccess().getRule();
	}

	//ComponentDeclaration:
	//	interactor=[InteractorDeclaration] name=ID ("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?;
	public ComponentDeclarationElements getComponentDeclarationAccess() {
		return (pComponentDeclaration != null) ? pComponentDeclaration : (pComponentDeclaration = new ComponentDeclarationElements());
	}
	
	public ParserRule getComponentDeclarationRule() {
		return getComponentDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Signals
	//EventReception:
	//	instance=[EventDeclaration] ("from" source=Component)? | base="init";
	public EventReceptionElements getEventReceptionAccess() {
		return (pEventReception != null) ? pEventReception : (pEventReception = new EventReceptionElements());
	}
	
	public ParserRule getEventReceptionRule() {
		return getEventReceptionAccess().getRule();
	}

	//FlowReception:
	//	instance=[FlowDeclaration] ("from" source=Component)?;
	public FlowReceptionElements getFlowReceptionAccess() {
		return (pFlowReception != null) ? pFlowReception : (pFlowReception = new FlowReceptionElements());
	}
	
	public ParserRule getFlowReceptionRule() {
		return getFlowReceptionAccess().getRule();
	}

	//EventEmission:
	//	instance=[EventDeclaration] ("to" destination=Component)?;
	public EventEmissionElements getEventEmissionAccess() {
		return (pEventEmission != null) ? pEventEmission : (pEventEmission = new EventEmissionElements());
	}
	
	public ParserRule getEventEmissionRule() {
		return getEventEmissionAccess().getRule();
	}

	//FlowEmission:
	//	instance=[FlowDeclaration] ("to" destination=Component)?;
	public FlowEmissionElements getFlowEmissionAccess() {
		return (pFlowEmission != null) ? pFlowEmission : (pFlowEmission = new FlowEmissionElements());
	}
	
	public ParserRule getFlowEmissionRule() {
		return getFlowEmissionAccess().getRule();
	}

	//SignalDeclaration:
	//	EventDeclaration | FlowDeclaration;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//EventDeclaration:
	//	type=DataType "event" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
	public EventDeclarationElements getEventDeclarationAccess() {
		return (pEventDeclaration != null) ? pEventDeclaration : (pEventDeclaration = new EventDeclarationElements());
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}

	//FlowDeclaration:
	//	type=DataType "flow" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
	public FlowDeclarationElements getFlowDeclarationAccess() {
		return (pFlowDeclaration != null) ? pFlowDeclaration : (pFlowDeclaration = new FlowDeclarationElements());
	}
	
	public ParserRule getFlowDeclarationRule() {
		return getFlowDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Behaviors
	//BehaviorDeclaration:
	//	cause=Cause ":" effects+=Effect+;
	public BehaviorDeclarationElements getBehaviorDeclarationAccess() {
		return (pBehaviorDeclaration != null) ? pBehaviorDeclaration : (pBehaviorDeclaration = new BehaviorDeclarationElements());
	}
	
	public ParserRule getBehaviorDeclarationRule() {
		return getBehaviorDeclarationAccess().getRule();
	}

	//Cause:
	//	OnCause | WhenCause;
	public CauseElements getCauseAccess() {
		return (pCause != null) ? pCause : (pCause = new CauseElements());
	}
	
	public ParserRule getCauseRule() {
		return getCauseAccess().getRule();
	}

	//OnCause:
	//	"on" event=EventReception ("if" guard=XExpression)?;
	public OnCauseElements getOnCauseAccess() {
		return (pOnCause != null) ? pOnCause : (pOnCause = new OnCauseElements());
	}
	
	public ParserRule getOnCauseRule() {
		return getOnCauseAccess().getRule();
	}

	//WhenCause:
	//	"when" condition=XExpression ("if" guard=XExpression)?;
	public WhenCauseElements getWhenCauseAccess() {
		return (pWhenCause != null) ? pWhenCause : (pWhenCause = new WhenCauseElements());
	}
	
	public ParserRule getWhenCauseRule() {
		return getWhenCauseAccess().getRule();
	}

	//Effect:
	//	AlwaysEffect | SetEffect | TriggerEffect;
	public EffectElements getEffectAccess() {
		return (pEffect != null) ? pEffect : (pEffect = new EffectElements());
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//AlwaysEffect:
	//	"always" target=FlowEmission "=" value=XExpression;
	public AlwaysEffectElements getAlwaysEffectAccess() {
		return (pAlwaysEffect != null) ? pAlwaysEffect : (pAlwaysEffect = new AlwaysEffectElements());
	}
	
	public ParserRule getAlwaysEffectRule() {
		return getAlwaysEffectAccess().getRule();
	}

	//SetEffect:
	//	"set" target=FlowEmission "=" value=XExpression;
	public SetEffectElements getSetEffectAccess() {
		return (pSetEffect != null) ? pSetEffect : (pSetEffect = new SetEffectElements());
	}
	
	public ParserRule getSetEffectRule() {
		return getSetEffectAccess().getRule();
	}

	//TriggerEffect:
	//	"trigger" target=EventEmission "=" value=XExpression;
	public TriggerEffectElements getTriggerEffectAccess() {
		return (pTriggerEffect != null) ? pTriggerEffect : (pTriggerEffect = new TriggerEffectElements());
	}
	
	public ParserRule getTriggerEffectRule() {
		return getTriggerEffectAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Compound data types
	//DataTypeCompoundDeclaration:
	//	"structure" name=ID ":" fields+=DataTypeCompoundField*;
	public DataTypeCompoundDeclarationElements getDataTypeCompoundDeclarationAccess() {
		return (pDataTypeCompoundDeclaration != null) ? pDataTypeCompoundDeclaration : (pDataTypeCompoundDeclaration = new DataTypeCompoundDeclarationElements());
	}
	
	public ParserRule getDataTypeCompoundDeclarationRule() {
		return getDataTypeCompoundDeclarationAccess().getRule();
	}

	//DataTypeCompoundField:
	//	type=DataType name=ID;
	public DataTypeCompoundFieldElements getDataTypeCompoundFieldAccess() {
		return (pDataTypeCompoundField != null) ? pDataTypeCompoundField : (pDataTypeCompoundField = new DataTypeCompoundFieldElements());
	}
	
	public ParserRule getDataTypeCompoundFieldRule() {
		return getDataTypeCompoundFieldAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Expressions
	////We do not use xbase because we only need a small subset of it in order to be able to generate C code and in order to simplify the language
	////So we are going to construct the expressions we need
	//DataType:
	//	{DataTypeCompound} type=[DataTypeCompoundDeclaration] | {DataTypeBase} type=("void" | "symbol" | "number" | "text" |
	//	"time" | "reference");
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
