/*
* generated by Xtext
*/
package com.crubier.lil.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class LilGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LilModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LilModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportStatementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cActorTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cActorTypeActorTypeDefinitionParserRuleCall_3_0_0 = (RuleCall)cActorTypeAssignment_3_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDataTypeDataTypeDefinitionParserRuleCall_3_1_0 = (RuleCall)cDataTypeAssignment_3_1.eContents().get(0);
		private final Assignment cInteractorTypeAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cInteractorTypeInteractorTypeDefinitionParserRuleCall_3_2_0 = (RuleCall)cInteractorTypeAssignment_3_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Model
		//LilModel:
		//	"package" name=QualifiedName imports+=ImportStatement* (actorType+=ActorTypeDefinition | dataType+=DataTypeDefinition
		//	| interactorType+=InteractorTypeDefinition)*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName imports+=ImportStatement* (actorType+=ActorTypeDefinition | dataType+=DataTypeDefinition |
		//interactorType+=InteractorTypeDefinition)*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=ImportStatement*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_2_0() { return cImportsImportStatementParserRuleCall_2_0; }

		//(actorType+=ActorTypeDefinition | dataType+=DataTypeDefinition | interactorType+=InteractorTypeDefinition)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//actorType+=ActorTypeDefinition
		public Assignment getActorTypeAssignment_3_0() { return cActorTypeAssignment_3_0; }

		//ActorTypeDefinition
		public RuleCall getActorTypeActorTypeDefinitionParserRuleCall_3_0_0() { return cActorTypeActorTypeDefinitionParserRuleCall_3_0_0; }

		//dataType+=DataTypeDefinition
		public Assignment getDataTypeAssignment_3_1() { return cDataTypeAssignment_3_1; }

		//DataTypeDefinition
		public RuleCall getDataTypeDataTypeDefinitionParserRuleCall_3_1_0() { return cDataTypeDataTypeDefinitionParserRuleCall_3_1_0; }

		//interactorType+=InteractorTypeDefinition
		public Assignment getInteractorTypeAssignment_3_2() { return cInteractorTypeAssignment_3_2; }

		//InteractorTypeDefinition
		public RuleCall getInteractorTypeInteractorTypeDefinitionParserRuleCall_3_2_0() { return cInteractorTypeInteractorTypeDefinitionParserRuleCall_3_2_0; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportStatement:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ActorTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentActorComponentDeclarationParserRuleCall_3_0 = (RuleCall)cComponentAssignment_3.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Actor
		//ActorTypeDefinition:
		//	name=ID "actor" ":" component+=ActorComponentDeclaration*;
		public ParserRule getRule() { return rule; }

		//name=ID "actor" ":" component+=ActorComponentDeclaration*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"actor"
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//component+=ActorComponentDeclaration*
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }

		//ActorComponentDeclaration
		public RuleCall getComponentActorComponentDeclarationParserRuleCall_3_0() { return cComponentActorComponentDeclarationParserRuleCall_3_0; }
	}

	public class ActorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cActorTypeInputAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cInputKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cActorTypeOutputAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOutputKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cActorTypeCustomAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cDefinitionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDefinitionActorTypeDefinitionCrossReference_2_1_0 = (CrossReference)cDefinitionAssignment_2_1.eContents().get(0);
		private final RuleCall cDefinitionActorTypeDefinitionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cDefinitionActorTypeDefinitionCrossReference_2_1_0.eContents().get(1);
		
		//ActorType:
		//	{ActorTypeInput} "input" | {ActorTypeOutput} "output" | {ActorTypeCustom} definition=[ActorTypeDefinition];
		public ParserRule getRule() { return rule; }

		//{ActorTypeInput} "input" | {ActorTypeOutput} "output" | {ActorTypeCustom} definition=[ActorTypeDefinition]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ActorTypeInput} "input"
		public Group getGroup_0() { return cGroup_0; }

		//{ActorTypeInput}
		public Action getActorTypeInputAction_0_0() { return cActorTypeInputAction_0_0; }

		//"input"
		public Keyword getInputKeyword_0_1() { return cInputKeyword_0_1; }

		//{ActorTypeOutput} "output"
		public Group getGroup_1() { return cGroup_1; }

		//{ActorTypeOutput}
		public Action getActorTypeOutputAction_1_0() { return cActorTypeOutputAction_1_0; }

		//"output"
		public Keyword getOutputKeyword_1_1() { return cOutputKeyword_1_1; }

		//{ActorTypeCustom} definition=[ActorTypeDefinition]
		public Group getGroup_2() { return cGroup_2; }

		//{ActorTypeCustom}
		public Action getActorTypeCustomAction_2_0() { return cActorTypeCustomAction_2_0; }

		//definition=[ActorTypeDefinition]
		public Assignment getDefinitionAssignment_2_1() { return cDefinitionAssignment_2_1; }

		//[ActorTypeDefinition]
		public CrossReference getDefinitionActorTypeDefinitionCrossReference_2_1_0() { return cDefinitionActorTypeDefinitionCrossReference_2_1_0; }

		//ID
		public RuleCall getDefinitionActorTypeDefinitionIDTerminalRuleCall_2_1_0_1() { return cDefinitionActorTypeDefinitionIDTerminalRuleCall_2_1_0_1; }
	}

	public class ActorComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeActorTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ActorComponentDeclaration:
		//	name=ID ":" type=ActorType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ActorType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ActorType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ActorType
		public RuleCall getTypeActorTypeParserRuleCall_2_0() { return cTypeActorTypeParserRuleCall_2_0; }
	}

	public class DataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeDefinitionCompoundAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cDataKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cComponentAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cComponentDataComponentDeclarationParserRuleCall_0_4_0 = (RuleCall)cComponentAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeDefinitionAliasAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cDataKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cAliasAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cAliasDataTypeParserRuleCall_1_4_0 = (RuleCall)cAliasAssignment_1_4.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Data
		//DataTypeDefinition:
		//	{DataTypeDefinitionCompound} name=ID "data" ":" component+=DataComponentDeclaration* | {DataTypeDefinitionAlias}
		//	name=ID "data" ":" alias=DataType;
		public ParserRule getRule() { return rule; }

		//{DataTypeDefinitionCompound} name=ID "data" ":" component+=DataComponentDeclaration* | {DataTypeDefinitionAlias} name=ID
		//"data" ":" alias=DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DataTypeDefinitionCompound} name=ID "data" ":" component+=DataComponentDeclaration*
		public Group getGroup_0() { return cGroup_0; }

		//{DataTypeDefinitionCompound}
		public Action getDataTypeDefinitionCompoundAction_0_0() { return cDataTypeDefinitionCompoundAction_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"data"
		public Keyword getDataKeyword_0_2() { return cDataKeyword_0_2; }

		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }

		//component+=DataComponentDeclaration*
		public Assignment getComponentAssignment_0_4() { return cComponentAssignment_0_4; }

		//DataComponentDeclaration
		public RuleCall getComponentDataComponentDeclarationParserRuleCall_0_4_0() { return cComponentDataComponentDeclarationParserRuleCall_0_4_0; }

		//{DataTypeDefinitionAlias} name=ID "data" ":" alias=DataType
		public Group getGroup_1() { return cGroup_1; }

		//{DataTypeDefinitionAlias}
		public Action getDataTypeDefinitionAliasAction_1_0() { return cDataTypeDefinitionAliasAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"data"
		public Keyword getDataKeyword_1_2() { return cDataKeyword_1_2; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//alias=DataType
		public Assignment getAliasAssignment_1_4() { return cAliasAssignment_1_4; }

		//DataType
		public RuleCall getAliasDataTypeParserRuleCall_1_4_0() { return cAliasDataTypeParserRuleCall_1_4_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cDataTypeVoidAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cVoidKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cDataTypeSymbolAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cSymbolKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cInKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cDefinitionSetDataTypeSymbolDefinitionSetParserRuleCall_0_1_2_1_0 = (RuleCall)cDefinitionSetAssignment_0_1_2_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cDataTypeNumberAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cNumberKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cInKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cDefinitionSetDataTypeNumberDefinitionSetParserRuleCall_0_2_2_1_0 = (RuleCall)cDefinitionSetAssignment_0_2_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cDataTypeTextAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Keyword cTextKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Group cGroup_0_3_2 = (Group)cGroup_0_3.eContents().get(2);
		private final Keyword cInKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_0_3_2_1 = (Assignment)cGroup_0_3_2.eContents().get(1);
		private final RuleCall cDefinitionSetDataTypeTextDefinitionSetParserRuleCall_0_3_2_1_0 = (RuleCall)cDefinitionSetAssignment_0_3_2_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Action cDataTypeTimeAction_0_4_0 = (Action)cGroup_0_4.eContents().get(0);
		private final Keyword cTimeKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cInKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cDefinitionSetDataTypeTimeDefinitionSetParserRuleCall_0_4_2_1_0 = (RuleCall)cDefinitionSetAssignment_0_4_2_1.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Action cDataTypeIdentifierAction_0_5_0 = (Action)cGroup_0_5.eContents().get(0);
		private final Keyword cIdentifierKeyword_0_5_1 = (Keyword)cGroup_0_5.eContents().get(1);
		private final Group cGroup_0_5_2 = (Group)cGroup_0_5.eContents().get(2);
		private final Keyword cInKeyword_0_5_2_0 = (Keyword)cGroup_0_5_2.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_0_5_2_1 = (Assignment)cGroup_0_5_2.eContents().get(1);
		private final RuleCall cDefinitionSetDataTypeIdentifierDefinitionSetParserRuleCall_0_5_2_1_0 = (RuleCall)cDefinitionSetAssignment_0_5_2_1.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final Action cDataTypeCustomAction_0_6_0 = (Action)cGroup_0_6.eContents().get(0);
		private final Assignment cDefinitionAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final CrossReference cDefinitionDataTypeDefinitionCrossReference_0_6_1_0 = (CrossReference)cDefinitionAssignment_0_6_1.eContents().get(0);
		private final RuleCall cDefinitionDataTypeDefinitionIDTerminalRuleCall_0_6_1_0_1 = (RuleCall)cDefinitionDataTypeDefinitionCrossReference_0_6_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cDataTypeCollectionElementTypeAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCollectionKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Action cDataTypeSetElementTypeAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Keyword cSetKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Action cDataTypeListElementTypeAction_3_0_0 = (Action)cGroup_3_0.eContents().get(0);
		private final Keyword cListKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Action cDataTypeQueueElementTypeAction_4_0_0 = (Action)cGroup_4_0.eContents().get(0);
		private final Keyword cQueueKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		
		//DataType:
		//	({DataTypeVoid} "void" | {DataTypeSymbol} "symbol" ("in" definitionSet=DataTypeSymbolDefinitionSet)? |
		//	{DataTypeNumber} "number" ("in" definitionSet=DataTypeNumberDefinitionSet)? | {DataTypeText} "text" ("in"
		//	definitionSet=DataTypeTextDefinitionSet)? | {DataTypeTime} "time" ("in" definitionSet=DataTypeTimeDefinitionSet)? |
		//	{DataTypeIdentifier} "identifier" ("in" definitionSet=DataTypeIdentifierDefinitionSet)? | {DataTypeCustom}
		//	definition=[DataTypeDefinition]) => ({DataTypeCollection.elementType=current} "collection")* =>
		//	({DataTypeSet.elementType=current} "set")* => ({DataTypeList.elementType=current} "list")* =>
		//	({DataTypeQueue.elementType=current} "queue")*;
		public ParserRule getRule() { return rule; }

		//({DataTypeVoid} "void" | {DataTypeSymbol} "symbol" ("in" definitionSet=DataTypeSymbolDefinitionSet)? | {DataTypeNumber}
		//"number" ("in" definitionSet=DataTypeNumberDefinitionSet)? | {DataTypeText} "text" ("in"
		//definitionSet=DataTypeTextDefinitionSet)? | {DataTypeTime} "time" ("in" definitionSet=DataTypeTimeDefinitionSet)? |
		//{DataTypeIdentifier} "identifier" ("in" definitionSet=DataTypeIdentifierDefinitionSet)? | {DataTypeCustom}
		//definition=[DataTypeDefinition]) => ({DataTypeCollection.elementType=current} "collection")* =>
		//({DataTypeSet.elementType=current} "set")* => ({DataTypeList.elementType=current} "list")* =>
		//({DataTypeQueue.elementType=current} "queue")*
		public Group getGroup() { return cGroup; }

		//{DataTypeVoid} "void" | {DataTypeSymbol} "symbol" ("in" definitionSet=DataTypeSymbolDefinitionSet)? | {DataTypeNumber}
		//"number" ("in" definitionSet=DataTypeNumberDefinitionSet)? | {DataTypeText} "text" ("in"
		//definitionSet=DataTypeTextDefinitionSet)? | {DataTypeTime} "time" ("in" definitionSet=DataTypeTimeDefinitionSet)? |
		//{DataTypeIdentifier} "identifier" ("in" definitionSet=DataTypeIdentifierDefinitionSet)? | {DataTypeCustom}
		//definition=[DataTypeDefinition]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{DataTypeVoid} "void"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{DataTypeVoid}
		public Action getDataTypeVoidAction_0_0_0() { return cDataTypeVoidAction_0_0_0; }

		//"void"
		public Keyword getVoidKeyword_0_0_1() { return cVoidKeyword_0_0_1; }

		//{DataTypeSymbol} "symbol" ("in" definitionSet=DataTypeSymbolDefinitionSet)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{DataTypeSymbol}
		public Action getDataTypeSymbolAction_0_1_0() { return cDataTypeSymbolAction_0_1_0; }

		//"symbol"
		public Keyword getSymbolKeyword_0_1_1() { return cSymbolKeyword_0_1_1; }

		//("in" definitionSet=DataTypeSymbolDefinitionSet)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//"in"
		public Keyword getInKeyword_0_1_2_0() { return cInKeyword_0_1_2_0; }

		//definitionSet=DataTypeSymbolDefinitionSet
		public Assignment getDefinitionSetAssignment_0_1_2_1() { return cDefinitionSetAssignment_0_1_2_1; }

		//DataTypeSymbolDefinitionSet
		public RuleCall getDefinitionSetDataTypeSymbolDefinitionSetParserRuleCall_0_1_2_1_0() { return cDefinitionSetDataTypeSymbolDefinitionSetParserRuleCall_0_1_2_1_0; }

		//{DataTypeNumber} "number" ("in" definitionSet=DataTypeNumberDefinitionSet)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//{DataTypeNumber}
		public Action getDataTypeNumberAction_0_2_0() { return cDataTypeNumberAction_0_2_0; }

		//"number"
		public Keyword getNumberKeyword_0_2_1() { return cNumberKeyword_0_2_1; }

		//("in" definitionSet=DataTypeNumberDefinitionSet)?
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//"in"
		public Keyword getInKeyword_0_2_2_0() { return cInKeyword_0_2_2_0; }

		//definitionSet=DataTypeNumberDefinitionSet
		public Assignment getDefinitionSetAssignment_0_2_2_1() { return cDefinitionSetAssignment_0_2_2_1; }

		//DataTypeNumberDefinitionSet
		public RuleCall getDefinitionSetDataTypeNumberDefinitionSetParserRuleCall_0_2_2_1_0() { return cDefinitionSetDataTypeNumberDefinitionSetParserRuleCall_0_2_2_1_0; }

		//{DataTypeText} "text" ("in" definitionSet=DataTypeTextDefinitionSet)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//{DataTypeText}
		public Action getDataTypeTextAction_0_3_0() { return cDataTypeTextAction_0_3_0; }

		//"text"
		public Keyword getTextKeyword_0_3_1() { return cTextKeyword_0_3_1; }

		//("in" definitionSet=DataTypeTextDefinitionSet)?
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }

		//"in"
		public Keyword getInKeyword_0_3_2_0() { return cInKeyword_0_3_2_0; }

		//definitionSet=DataTypeTextDefinitionSet
		public Assignment getDefinitionSetAssignment_0_3_2_1() { return cDefinitionSetAssignment_0_3_2_1; }

		//DataTypeTextDefinitionSet
		public RuleCall getDefinitionSetDataTypeTextDefinitionSetParserRuleCall_0_3_2_1_0() { return cDefinitionSetDataTypeTextDefinitionSetParserRuleCall_0_3_2_1_0; }

		//{DataTypeTime} "time" ("in" definitionSet=DataTypeTimeDefinitionSet)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//{DataTypeTime}
		public Action getDataTypeTimeAction_0_4_0() { return cDataTypeTimeAction_0_4_0; }

		//"time"
		public Keyword getTimeKeyword_0_4_1() { return cTimeKeyword_0_4_1; }

		//("in" definitionSet=DataTypeTimeDefinitionSet)?
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }

		//"in"
		public Keyword getInKeyword_0_4_2_0() { return cInKeyword_0_4_2_0; }

		//definitionSet=DataTypeTimeDefinitionSet
		public Assignment getDefinitionSetAssignment_0_4_2_1() { return cDefinitionSetAssignment_0_4_2_1; }

		//DataTypeTimeDefinitionSet
		public RuleCall getDefinitionSetDataTypeTimeDefinitionSetParserRuleCall_0_4_2_1_0() { return cDefinitionSetDataTypeTimeDefinitionSetParserRuleCall_0_4_2_1_0; }

		//{DataTypeIdentifier} "identifier" ("in" definitionSet=DataTypeIdentifierDefinitionSet)?
		public Group getGroup_0_5() { return cGroup_0_5; }

		//{DataTypeIdentifier}
		public Action getDataTypeIdentifierAction_0_5_0() { return cDataTypeIdentifierAction_0_5_0; }

		//"identifier"
		public Keyword getIdentifierKeyword_0_5_1() { return cIdentifierKeyword_0_5_1; }

		//("in" definitionSet=DataTypeIdentifierDefinitionSet)?
		public Group getGroup_0_5_2() { return cGroup_0_5_2; }

		//"in"
		public Keyword getInKeyword_0_5_2_0() { return cInKeyword_0_5_2_0; }

		//definitionSet=DataTypeIdentifierDefinitionSet
		public Assignment getDefinitionSetAssignment_0_5_2_1() { return cDefinitionSetAssignment_0_5_2_1; }

		//DataTypeIdentifierDefinitionSet
		public RuleCall getDefinitionSetDataTypeIdentifierDefinitionSetParserRuleCall_0_5_2_1_0() { return cDefinitionSetDataTypeIdentifierDefinitionSetParserRuleCall_0_5_2_1_0; }

		//{DataTypeCustom} definition=[DataTypeDefinition]
		public Group getGroup_0_6() { return cGroup_0_6; }

		//{DataTypeCustom}
		public Action getDataTypeCustomAction_0_6_0() { return cDataTypeCustomAction_0_6_0; }

		//definition=[DataTypeDefinition]
		public Assignment getDefinitionAssignment_0_6_1() { return cDefinitionAssignment_0_6_1; }

		//[DataTypeDefinition]
		public CrossReference getDefinitionDataTypeDefinitionCrossReference_0_6_1_0() { return cDefinitionDataTypeDefinitionCrossReference_0_6_1_0; }

		//ID
		public RuleCall getDefinitionDataTypeDefinitionIDTerminalRuleCall_0_6_1_0_1() { return cDefinitionDataTypeDefinitionIDTerminalRuleCall_0_6_1_0_1; }

		//=> ({DataTypeCollection.elementType=current} "collection")*
		public Group getGroup_1() { return cGroup_1; }

		//{DataTypeCollection.elementType=current} "collection"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{DataTypeCollection.elementType=current}
		public Action getDataTypeCollectionElementTypeAction_1_0_0() { return cDataTypeCollectionElementTypeAction_1_0_0; }

		//"collection"
		public Keyword getCollectionKeyword_1_0_1() { return cCollectionKeyword_1_0_1; }

		//=> ({DataTypeSet.elementType=current} "set")*
		public Group getGroup_2() { return cGroup_2; }

		//{DataTypeSet.elementType=current} "set"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{DataTypeSet.elementType=current}
		public Action getDataTypeSetElementTypeAction_2_0_0() { return cDataTypeSetElementTypeAction_2_0_0; }

		//"set"
		public Keyword getSetKeyword_2_0_1() { return cSetKeyword_2_0_1; }

		//=> ({DataTypeList.elementType=current} "list")*
		public Group getGroup_3() { return cGroup_3; }

		//{DataTypeList.elementType=current} "list"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//{DataTypeList.elementType=current}
		public Action getDataTypeListElementTypeAction_3_0_0() { return cDataTypeListElementTypeAction_3_0_0; }

		//"list"
		public Keyword getListKeyword_3_0_1() { return cListKeyword_3_0_1; }

		//=> ({DataTypeQueue.elementType=current} "queue")*
		public Group getGroup_4() { return cGroup_4; }

		//{DataTypeQueue.elementType=current} "queue"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//{DataTypeQueue.elementType=current}
		public Action getDataTypeQueueElementTypeAction_4_0_0() { return cDataTypeQueueElementTypeAction_4_0_0; }

		//"queue"
		public Keyword getQueueKeyword_4_0_1() { return cQueueKeyword_4_0_1; }
	}

	public class DataTypeSymbolDefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeSymbolDefinitionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementDataTypeSymbolDefinitionSetElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementDataTypeSymbolDefinitionSetElementParserRuleCall_2_1_0 = (RuleCall)cElementAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataTypeSymbolDefinitionSet:
		//	"{" element+=DataTypeSymbolDefinitionSetElement ("," element+=DataTypeSymbolDefinitionSetElement)* "}";
		public ParserRule getRule() { return rule; }

		//"{" element+=DataTypeSymbolDefinitionSetElement ("," element+=DataTypeSymbolDefinitionSetElement)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//element+=DataTypeSymbolDefinitionSetElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//DataTypeSymbolDefinitionSetElement
		public RuleCall getElementDataTypeSymbolDefinitionSetElementParserRuleCall_1_0() { return cElementDataTypeSymbolDefinitionSetElementParserRuleCall_1_0; }

		//("," element+=DataTypeSymbolDefinitionSetElement)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//element+=DataTypeSymbolDefinitionSetElement
		public Assignment getElementAssignment_2_1() { return cElementAssignment_2_1; }

		//DataTypeSymbolDefinitionSetElement
		public RuleCall getElementDataTypeSymbolDefinitionSetElementParserRuleCall_2_1_0() { return cElementDataTypeSymbolDefinitionSetElementParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DataTypeSymbolDefinitionSetElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeSymbolDefinitionSetElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeSymbolDefinitionSetElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DataTypeSymbolDefinitionSetElement:
		//	{DataTypeSymbolDefinitionSetElement} "#" name=ID;
		public ParserRule getRule() { return rule; }

		//{DataTypeSymbolDefinitionSetElement} "#" name=ID
		public Group getGroup() { return cGroup; }

		//{DataTypeSymbolDefinitionSetElement}
		public Action getDataTypeSymbolDefinitionSetElementAction_0() { return cDataTypeSymbolDefinitionSetElementAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class DataTypeNumberDefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeNumberDefinitionSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeNumberDefinitionSetSetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementLiteralNumberParserRuleCall_0_2_0 = (RuleCall)cElementAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cElementAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cElementLiteralNumberParserRuleCall_0_3_1_0 = (RuleCall)cElementAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeNumberDefinitionSetIntervalAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInfAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInfLiteralNumberParserRuleCall_1_2_0 = (RuleCall)cInfAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSupAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSupLiteralNumberParserRuleCall_1_4_0 = (RuleCall)cSupAssignment_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//DataTypeNumberDefinitionSet:
		//	{DataTypeNumberDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}" |
		//	{DataTypeNumberDefinitionSetInterval} "[" inf=LiteralNumber "," sup=LiteralNumber "]";
		public ParserRule getRule() { return rule; }

		//{DataTypeNumberDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}" |
		//{DataTypeNumberDefinitionSetInterval} "[" inf=LiteralNumber "," sup=LiteralNumber "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DataTypeNumberDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}"
		public Group getGroup_0() { return cGroup_0; }

		//{DataTypeNumberDefinitionSetSet}
		public Action getDataTypeNumberDefinitionSetSetAction_0_0() { return cDataTypeNumberDefinitionSetSetAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//element+=LiteralNumber
		public Assignment getElementAssignment_0_2() { return cElementAssignment_0_2; }

		//LiteralNumber
		public RuleCall getElementLiteralNumberParserRuleCall_0_2_0() { return cElementLiteralNumberParserRuleCall_0_2_0; }

		//("," element+=LiteralNumber)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//element+=LiteralNumber
		public Assignment getElementAssignment_0_3_1() { return cElementAssignment_0_3_1; }

		//LiteralNumber
		public RuleCall getElementLiteralNumberParserRuleCall_0_3_1_0() { return cElementLiteralNumberParserRuleCall_0_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//{DataTypeNumberDefinitionSetInterval} "[" inf=LiteralNumber "," sup=LiteralNumber "]"
		public Group getGroup_1() { return cGroup_1; }

		//{DataTypeNumberDefinitionSetInterval}
		public Action getDataTypeNumberDefinitionSetIntervalAction_1_0() { return cDataTypeNumberDefinitionSetIntervalAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//inf=LiteralNumber
		public Assignment getInfAssignment_1_2() { return cInfAssignment_1_2; }

		//LiteralNumber
		public RuleCall getInfLiteralNumberParserRuleCall_1_2_0() { return cInfLiteralNumberParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//sup=LiteralNumber
		public Assignment getSupAssignment_1_4() { return cSupAssignment_1_4; }

		//LiteralNumber
		public RuleCall getSupLiteralNumberParserRuleCall_1_4_0() { return cSupLiteralNumberParserRuleCall_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}

	public class DataTypeTextDefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeTextDefinitionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeTextDefinitionSetSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementLiteralTextParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementLiteralTextParserRuleCall_3_1_0 = (RuleCall)cElementAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataTypeTextDefinitionSet:
		//	{DataTypeTextDefinitionSetSet} "{" element+=LiteralText ("," element+=LiteralText)* "}";
		public ParserRule getRule() { return rule; }

		//{DataTypeTextDefinitionSetSet} "{" element+=LiteralText ("," element+=LiteralText)* "}"
		public Group getGroup() { return cGroup; }

		//{DataTypeTextDefinitionSetSet}
		public Action getDataTypeTextDefinitionSetSetAction_0() { return cDataTypeTextDefinitionSetSetAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//element+=LiteralText
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//LiteralText
		public RuleCall getElementLiteralTextParserRuleCall_2_0() { return cElementLiteralTextParserRuleCall_2_0; }

		//("," element+=LiteralText)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//element+=LiteralText
		public Assignment getElementAssignment_3_1() { return cElementAssignment_3_1; }

		//LiteralText
		public RuleCall getElementLiteralTextParserRuleCall_3_1_0() { return cElementLiteralTextParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DataTypeTimeDefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeTimeDefinitionSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeTimeDefinitionSetSetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementLiteralTimeParserRuleCall_0_2_0 = (RuleCall)cElementAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cElementAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cElementLiteralTimeParserRuleCall_0_3_1_0 = (RuleCall)cElementAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeTimeDefinitionSetIntervalAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInfAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInfLiteralTimeParserRuleCall_1_2_0 = (RuleCall)cInfAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSupAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSupLiteralTimeParserRuleCall_1_4_0 = (RuleCall)cSupAssignment_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//DataTypeTimeDefinitionSet:
		//	{DataTypeTimeDefinitionSetSet} "{" element+=LiteralTime ("," element+=LiteralTime)* "}" |
		//	{DataTypeTimeDefinitionSetInterval} "[" inf=LiteralTime "," sup=LiteralTime "]";
		public ParserRule getRule() { return rule; }

		//{DataTypeTimeDefinitionSetSet} "{" element+=LiteralTime ("," element+=LiteralTime)* "}" |
		//{DataTypeTimeDefinitionSetInterval} "[" inf=LiteralTime "," sup=LiteralTime "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DataTypeTimeDefinitionSetSet} "{" element+=LiteralTime ("," element+=LiteralTime)* "}"
		public Group getGroup_0() { return cGroup_0; }

		//{DataTypeTimeDefinitionSetSet}
		public Action getDataTypeTimeDefinitionSetSetAction_0_0() { return cDataTypeTimeDefinitionSetSetAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//element+=LiteralTime
		public Assignment getElementAssignment_0_2() { return cElementAssignment_0_2; }

		//LiteralTime
		public RuleCall getElementLiteralTimeParserRuleCall_0_2_0() { return cElementLiteralTimeParserRuleCall_0_2_0; }

		//("," element+=LiteralTime)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//element+=LiteralTime
		public Assignment getElementAssignment_0_3_1() { return cElementAssignment_0_3_1; }

		//LiteralTime
		public RuleCall getElementLiteralTimeParserRuleCall_0_3_1_0() { return cElementLiteralTimeParserRuleCall_0_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//{DataTypeTimeDefinitionSetInterval} "[" inf=LiteralTime "," sup=LiteralTime "]"
		public Group getGroup_1() { return cGroup_1; }

		//{DataTypeTimeDefinitionSetInterval}
		public Action getDataTypeTimeDefinitionSetIntervalAction_1_0() { return cDataTypeTimeDefinitionSetIntervalAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//inf=LiteralTime
		public Assignment getInfAssignment_1_2() { return cInfAssignment_1_2; }

		//LiteralTime
		public RuleCall getInfLiteralTimeParserRuleCall_1_2_0() { return cInfLiteralTimeParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//sup=LiteralTime
		public Assignment getSupAssignment_1_4() { return cSupAssignment_1_4; }

		//LiteralTime
		public RuleCall getSupLiteralTimeParserRuleCall_1_4_0() { return cSupLiteralTimeParserRuleCall_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}

	public class DataTypeIdentifierDefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeIdentifierDefinitionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeIdentifierDefinitionSetSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementLiteralNumberParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementLiteralNumberParserRuleCall_3_1_0 = (RuleCall)cElementAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataTypeIdentifierDefinitionSet:
		//	{DataTypeIdentifierDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}";
		public ParserRule getRule() { return rule; }

		//{DataTypeIdentifierDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}"
		public Group getGroup() { return cGroup; }

		//{DataTypeIdentifierDefinitionSetSet}
		public Action getDataTypeIdentifierDefinitionSetSetAction_0() { return cDataTypeIdentifierDefinitionSetSetAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//element+=LiteralNumber
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//LiteralNumber
		public RuleCall getElementLiteralNumberParserRuleCall_2_0() { return cElementLiteralNumberParserRuleCall_2_0; }

		//("," element+=LiteralNumber)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//element+=LiteralNumber
		public Assignment getElementAssignment_3_1() { return cElementAssignment_3_1; }

		//LiteralNumber
		public RuleCall getElementLiteralNumberParserRuleCall_3_1_0() { return cElementLiteralNumberParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DataComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//DataComponentDeclaration:
		//	name=ID ":" type=DataType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=DataType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
	}

	public class InteractorTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cInteractorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cActorAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cActorInteractorActorDeclarationParserRuleCall_3_0_0 = (RuleCall)cActorAssignment_3_0.eContents().get(0);
		private final Assignment cDataAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDataInteractorDataDeclarationParserRuleCall_3_1_0 = (RuleCall)cDataAssignment_3_1.eContents().get(0);
		private final Assignment cComponentAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cComponentInteractorComponentDeclarationParserRuleCall_3_2_0 = (RuleCall)cComponentAssignment_3_2.eContents().get(0);
		private final Assignment cBehaviorAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cBehaviorInteractorBehaviorDeclarationParserRuleCall_3_3_0 = (RuleCall)cBehaviorAssignment_3_3.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor
		//InteractorTypeDefinition:
		//	name=ID "interactor" ":" (actor+=InteractorActorDeclaration | data+=InteractorDataDeclaration |
		//	component+=InteractorComponentDeclaration | behavior+=InteractorBehaviorDeclaration)*;
		public ParserRule getRule() { return rule; }

		//name=ID "interactor" ":" (actor+=InteractorActorDeclaration | data+=InteractorDataDeclaration |
		//component+=InteractorComponentDeclaration | behavior+=InteractorBehaviorDeclaration)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"interactor"
		public Keyword getInteractorKeyword_1() { return cInteractorKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(actor+=InteractorActorDeclaration | data+=InteractorDataDeclaration | component+=InteractorComponentDeclaration |
		//behavior+=InteractorBehaviorDeclaration)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//actor+=InteractorActorDeclaration
		public Assignment getActorAssignment_3_0() { return cActorAssignment_3_0; }

		//InteractorActorDeclaration
		public RuleCall getActorInteractorActorDeclarationParserRuleCall_3_0_0() { return cActorInteractorActorDeclarationParserRuleCall_3_0_0; }

		//data+=InteractorDataDeclaration
		public Assignment getDataAssignment_3_1() { return cDataAssignment_3_1; }

		//InteractorDataDeclaration
		public RuleCall getDataInteractorDataDeclarationParserRuleCall_3_1_0() { return cDataInteractorDataDeclarationParserRuleCall_3_1_0; }

		//component+=InteractorComponentDeclaration
		public Assignment getComponentAssignment_3_2() { return cComponentAssignment_3_2; }

		//InteractorComponentDeclaration
		public RuleCall getComponentInteractorComponentDeclarationParserRuleCall_3_2_0() { return cComponentInteractorComponentDeclarationParserRuleCall_3_2_0; }

		//behavior+=InteractorBehaviorDeclaration
		public Assignment getBehaviorAssignment_3_3() { return cBehaviorAssignment_3_3; }

		//InteractorBehaviorDeclaration
		public RuleCall getBehaviorInteractorBehaviorDeclarationParserRuleCall_3_3_0() { return cBehaviorInteractorBehaviorDeclarationParserRuleCall_3_3_0; }
	}

	public class InteractorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteractorTypeCustomAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefinitionInteractorTypeDefinitionCrossReference_1_0 = (CrossReference)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cDefinitionInteractorTypeDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cDefinitionInteractorTypeDefinitionCrossReference_1_0.eContents().get(1);
		
		//InteractorType:
		//	{InteractorTypeCustom} definition=[InteractorTypeDefinition];
		public ParserRule getRule() { return rule; }

		//{InteractorTypeCustom} definition=[InteractorTypeDefinition]
		public Group getGroup() { return cGroup; }

		//{InteractorTypeCustom}
		public Action getInteractorTypeCustomAction_0() { return cInteractorTypeCustomAction_0; }

		//definition=[InteractorTypeDefinition]
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//[InteractorTypeDefinition]
		public CrossReference getDefinitionInteractorTypeDefinitionCrossReference_1_0() { return cDefinitionInteractorTypeDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getDefinitionInteractorTypeDefinitionIDTerminalRuleCall_1_0_1() { return cDefinitionInteractorTypeDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class InteractorActorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorActorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteractorActorDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeActorTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cActorKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//InteractorActorDeclaration returns InteractorEntityDeclaration:
		//	{InteractorActorDeclaration} (name=ID ":" type=ActorType "actor");
		public ParserRule getRule() { return rule; }

		//{InteractorActorDeclaration} (name=ID ":" type=ActorType "actor")
		public Group getGroup() { return cGroup; }

		//{InteractorActorDeclaration}
		public Action getInteractorActorDeclarationAction_0() { return cInteractorActorDeclarationAction_0; }

		//name=ID ":" type=ActorType "actor"
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type=ActorType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//ActorType
		public RuleCall getTypeActorTypeParserRuleCall_1_2_0() { return cTypeActorTypeParserRuleCall_1_2_0; }

		//"actor"
		public Keyword getActorKeyword_1_3() { return cActorKeyword_1_3; }
	}

	public class InteractorComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteractorComponentDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeInteractorTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cInteractorKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cWithKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cActorsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cActorsInteractorActorAliasParserRuleCall_1_4_1_0 = (RuleCall)cActorsAssignment_1_4_1.eContents().get(0);
		
		//InteractorComponentDeclaration returns InteractorEntityDeclaration:
		//	{InteractorComponentDeclaration} (name=ID ":" type=InteractorType "interactor" ("with"
		//	actors+=InteractorActorAlias)*);
		public ParserRule getRule() { return rule; }

		//{InteractorComponentDeclaration} (name=ID ":" type=InteractorType "interactor" ("with" actors+=InteractorActorAlias)*)
		public Group getGroup() { return cGroup; }

		//{InteractorComponentDeclaration}
		public Action getInteractorComponentDeclarationAction_0() { return cInteractorComponentDeclarationAction_0; }

		//name=ID ":" type=InteractorType "interactor" ("with" actors+=InteractorActorAlias)*
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type=InteractorType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//InteractorType
		public RuleCall getTypeInteractorTypeParserRuleCall_1_2_0() { return cTypeInteractorTypeParserRuleCall_1_2_0; }

		//"interactor"
		public Keyword getInteractorKeyword_1_3() { return cInteractorKeyword_1_3; }

		//("with" actors+=InteractorActorAlias)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"with"
		public Keyword getWithKeyword_1_4_0() { return cWithKeyword_1_4_0; }

		//actors+=InteractorActorAlias
		public Assignment getActorsAssignment_1_4_1() { return cActorsAssignment_1_4_1; }

		//InteractorActorAlias
		public RuleCall getActorsInteractorActorAliasParserRuleCall_1_4_1_0() { return cActorsInteractorActorAliasParserRuleCall_1_4_1_0; }
	}

	public class InteractorDataDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorDataDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInteractorDataDeclarationEventAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_0_1_2_0 = (RuleCall)cTypeAssignment_0_1_2.eContents().get(0);
		private final Keyword cEventKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_0_1_4 = (Group)cGroup_0_1.eContents().get(4);
		private final Keyword cFromKeyword_0_1_4_0 = (Keyword)cGroup_0_1_4.eContents().get(0);
		private final Assignment cSourceAssignment_0_1_4_1 = (Assignment)cGroup_0_1_4.eContents().get(1);
		private final RuleCall cSourceInteractorDataAliasParserRuleCall_0_1_4_1_0 = (RuleCall)cSourceAssignment_0_1_4_1.eContents().get(0);
		private final Group cGroup_0_1_5 = (Group)cGroup_0_1.eContents().get(5);
		private final Keyword cToKeyword_0_1_5_0 = (Keyword)cGroup_0_1_5.eContents().get(0);
		private final Assignment cDestinationsAssignment_0_1_5_1 = (Assignment)cGroup_0_1_5.eContents().get(1);
		private final RuleCall cDestinationsInteractorDataAliasParserRuleCall_0_1_5_1_0 = (RuleCall)cDestinationsAssignment_0_1_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInteractorDataDeclarationFlowAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_1_1_2_0 = (RuleCall)cTypeAssignment_1_1_2.eContents().get(0);
		private final Keyword cFlowKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Keyword cFromKeyword_1_1_4_0 = (Keyword)cGroup_1_1_4.eContents().get(0);
		private final Assignment cSourceAssignment_1_1_4_1 = (Assignment)cGroup_1_1_4.eContents().get(1);
		private final RuleCall cSourceInteractorDataAliasParserRuleCall_1_1_4_1_0 = (RuleCall)cSourceAssignment_1_1_4_1.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cGroup_1_1.eContents().get(5);
		private final Keyword cToKeyword_1_1_5_0 = (Keyword)cGroup_1_1_5.eContents().get(0);
		private final Assignment cDestinationsAssignment_1_1_5_1 = (Assignment)cGroup_1_1_5.eContents().get(1);
		private final RuleCall cDestinationsInteractorDataAliasParserRuleCall_1_1_5_1_0 = (RuleCall)cDestinationsAssignment_1_1_5_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInteractorDataDeclarationConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_1_2_0 = (RuleCall)cTypeAssignment_2_1_2.eContents().get(0);
		private final Keyword cConstantKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		////InteractorEntityDeclaration :
		////	InteractorComponentDeclaration | InteractorActorDeclaration
		////;
		//InteractorDataDeclaration:
		//	{InteractorDataDeclarationEvent} (name=ID ":" type=DataType "event" ("from" source=InteractorDataAlias)? ("to"
		//	destinations+=InteractorDataAlias)*) | {InteractorDataDeclarationFlow} (name=ID ":" type=DataType "flow" ("from"
		//	source=InteractorDataAlias)? ("to" destinations+=InteractorDataAlias)*) | {InteractorDataDeclarationConstant} (name=ID
		//	":" type=DataType "constant");
		public ParserRule getRule() { return rule; }

		//{InteractorDataDeclarationEvent} (name=ID ":" type=DataType "event" ("from" source=InteractorDataAlias)? ("to"
		//destinations+=InteractorDataAlias)*) | {InteractorDataDeclarationFlow} (name=ID ":" type=DataType "flow" ("from"
		//source=InteractorDataAlias)? ("to" destinations+=InteractorDataAlias)*) | {InteractorDataDeclarationConstant} (name=ID
		//":" type=DataType "constant")
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InteractorDataDeclarationEvent} (name=ID ":" type=DataType "event" ("from" source=InteractorDataAlias)? ("to"
		//destinations+=InteractorDataAlias)*)
		public Group getGroup_0() { return cGroup_0; }

		//{InteractorDataDeclarationEvent}
		public Action getInteractorDataDeclarationEventAction_0_0() { return cInteractorDataDeclarationEventAction_0_0; }

		//name=ID ":" type=DataType "event" ("from" source=InteractorDataAlias)? ("to" destinations+=InteractorDataAlias)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }

		//":"
		public Keyword getColonKeyword_0_1_1() { return cColonKeyword_0_1_1; }

		//type=DataType
		public Assignment getTypeAssignment_0_1_2() { return cTypeAssignment_0_1_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_1_2_0() { return cTypeDataTypeParserRuleCall_0_1_2_0; }

		//"event"
		public Keyword getEventKeyword_0_1_3() { return cEventKeyword_0_1_3; }

		//("from" source=InteractorDataAlias)?
		public Group getGroup_0_1_4() { return cGroup_0_1_4; }

		//"from"
		public Keyword getFromKeyword_0_1_4_0() { return cFromKeyword_0_1_4_0; }

		//source=InteractorDataAlias
		public Assignment getSourceAssignment_0_1_4_1() { return cSourceAssignment_0_1_4_1; }

		//InteractorDataAlias
		public RuleCall getSourceInteractorDataAliasParserRuleCall_0_1_4_1_0() { return cSourceInteractorDataAliasParserRuleCall_0_1_4_1_0; }

		//("to" destinations+=InteractorDataAlias)*
		public Group getGroup_0_1_5() { return cGroup_0_1_5; }

		//"to"
		public Keyword getToKeyword_0_1_5_0() { return cToKeyword_0_1_5_0; }

		//destinations+=InteractorDataAlias
		public Assignment getDestinationsAssignment_0_1_5_1() { return cDestinationsAssignment_0_1_5_1; }

		//InteractorDataAlias
		public RuleCall getDestinationsInteractorDataAliasParserRuleCall_0_1_5_1_0() { return cDestinationsInteractorDataAliasParserRuleCall_0_1_5_1_0; }

		//{InteractorDataDeclarationFlow} (name=ID ":" type=DataType "flow" ("from" source=InteractorDataAlias)? ("to"
		//destinations+=InteractorDataAlias)*)
		public Group getGroup_1() { return cGroup_1; }

		//{InteractorDataDeclarationFlow}
		public Action getInteractorDataDeclarationFlowAction_1_0() { return cInteractorDataDeclarationFlowAction_1_0; }

		//name=ID ":" type=DataType "flow" ("from" source=InteractorDataAlias)? ("to" destinations+=InteractorDataAlias)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0_0() { return cNameIDTerminalRuleCall_1_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }

		//type=DataType
		public Assignment getTypeAssignment_1_1_2() { return cTypeAssignment_1_1_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_1_2_0() { return cTypeDataTypeParserRuleCall_1_1_2_0; }

		//"flow"
		public Keyword getFlowKeyword_1_1_3() { return cFlowKeyword_1_1_3; }

		//("from" source=InteractorDataAlias)?
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }

		//"from"
		public Keyword getFromKeyword_1_1_4_0() { return cFromKeyword_1_1_4_0; }

		//source=InteractorDataAlias
		public Assignment getSourceAssignment_1_1_4_1() { return cSourceAssignment_1_1_4_1; }

		//InteractorDataAlias
		public RuleCall getSourceInteractorDataAliasParserRuleCall_1_1_4_1_0() { return cSourceInteractorDataAliasParserRuleCall_1_1_4_1_0; }

		//("to" destinations+=InteractorDataAlias)*
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }

		//"to"
		public Keyword getToKeyword_1_1_5_0() { return cToKeyword_1_1_5_0; }

		//destinations+=InteractorDataAlias
		public Assignment getDestinationsAssignment_1_1_5_1() { return cDestinationsAssignment_1_1_5_1; }

		//InteractorDataAlias
		public RuleCall getDestinationsInteractorDataAliasParserRuleCall_1_1_5_1_0() { return cDestinationsInteractorDataAliasParserRuleCall_1_1_5_1_0; }

		//{InteractorDataDeclarationConstant} (name=ID ":" type=DataType "constant")
		public Group getGroup_2() { return cGroup_2; }

		//{InteractorDataDeclarationConstant}
		public Action getInteractorDataDeclarationConstantAction_2_0() { return cInteractorDataDeclarationConstantAction_2_0; }

		//name=ID ":" type=DataType "constant"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//name=ID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0_0() { return cNameIDTerminalRuleCall_2_1_0_0; }

		//":"
		public Keyword getColonKeyword_2_1_1() { return cColonKeyword_2_1_1; }

		//type=DataType
		public Assignment getTypeAssignment_2_1_2() { return cTypeAssignment_2_1_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_1_2_0() { return cTypeDataTypeParserRuleCall_2_1_2_0; }

		//"constant"
		public Keyword getConstantKeyword_2_1_3() { return cConstantKeyword_2_1_3; }
	}

	public class InteractorActorAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorActorAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActorInteractorActorDeclarationCrossReference_0_0 = (CrossReference)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorInteractorActorDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cActorInteractorActorDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAliasInteractorActorDeclarationCrossReference_2_0 = (CrossReference)cAliasAssignment_2.eContents().get(0);
		private final RuleCall cAliasInteractorActorDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cAliasInteractorActorDeclarationCrossReference_2_0.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor Entities
		//InteractorActorAlias:
		//	actor=[InteractorActorDeclaration] "as" alias=[InteractorActorDeclaration];
		public ParserRule getRule() { return rule; }

		//actor=[InteractorActorDeclaration] "as" alias=[InteractorActorDeclaration]
		public Group getGroup() { return cGroup; }

		//actor=[InteractorActorDeclaration]
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }

		//[InteractorActorDeclaration]
		public CrossReference getActorInteractorActorDeclarationCrossReference_0_0() { return cActorInteractorActorDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getActorInteractorActorDeclarationIDTerminalRuleCall_0_0_1() { return cActorInteractorActorDeclarationIDTerminalRuleCall_0_0_1; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//alias=[InteractorActorDeclaration]
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//[InteractorActorDeclaration]
		public CrossReference getAliasInteractorActorDeclarationCrossReference_2_0() { return cAliasInteractorActorDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getAliasInteractorActorDeclarationIDTerminalRuleCall_2_0_1() { return cAliasInteractorActorDeclarationIDTerminalRuleCall_2_0_1; }
	}

	public class InteractorDataAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorDataAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityInteractorEntityParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAliasInteractorDataDeclarationCrossReference_1_1_0 = (CrossReference)cAliasAssignment_1_1.eContents().get(0);
		private final RuleCall cAliasInteractorDataDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAliasInteractorDataDeclarationCrossReference_1_1_0.eContents().get(1);
		
		//InteractorDataAlias:
		//	entity=InteractorEntity ("as" alias=[InteractorDataDeclaration])?;
		public ParserRule getRule() { return rule; }

		//entity=InteractorEntity ("as" alias=[InteractorDataDeclaration])?
		public Group getGroup() { return cGroup; }

		//entity=InteractorEntity
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }

		//InteractorEntity
		public RuleCall getEntityInteractorEntityParserRuleCall_0_0() { return cEntityInteractorEntityParserRuleCall_0_0; }

		//("as" alias=[InteractorDataDeclaration])?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=[InteractorDataDeclaration]
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//[InteractorDataDeclaration]
		public CrossReference getAliasInteractorDataDeclarationCrossReference_1_1_0() { return cAliasInteractorDataDeclarationCrossReference_1_1_0; }

		//ID
		public RuleCall getAliasInteractorDataDeclarationIDTerminalRuleCall_1_1_0_1() { return cAliasInteractorDataDeclarationIDTerminalRuleCall_1_1_0_1; }
	}

	public class InteractorEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInteractorEntityAnyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAnyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInteractorEntitySelfAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSelfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInteractorEntityOtherAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cOtherKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInteractorEntityParentAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cParentKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cInteractorEntityChildAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cChildKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cInteractorEntityAllAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cAllKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cInteractorEntityActorsAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cActorsKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cInteractorEntitySpecificAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cEntityAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cEntityInteractorEntityDeclarationCrossReference_7_1_0 = (CrossReference)cEntityAssignment_7_1.eContents().get(0);
		private final RuleCall cEntityInteractorEntityDeclarationIDTerminalRuleCall_7_1_0_1 = (RuleCall)cEntityInteractorEntityDeclarationCrossReference_7_1_0.eContents().get(1);
		
		//InteractorEntity:
		//	{InteractorEntityAny} "any" | {InteractorEntitySelf} "self" | {InteractorEntityOther} "other" |
		//	{InteractorEntityParent} "parent" | {InteractorEntityChild} "child" | {InteractorEntityAll} "all" |
		//	{InteractorEntityActors} "actors" | {InteractorEntitySpecific} entity=[InteractorEntityDeclaration];
		public ParserRule getRule() { return rule; }

		//{InteractorEntityAny} "any" | {InteractorEntitySelf} "self" | {InteractorEntityOther} "other" | {InteractorEntityParent}
		//"parent" | {InteractorEntityChild} "child" | {InteractorEntityAll} "all" | {InteractorEntityActors} "actors" |
		//{InteractorEntitySpecific} entity=[InteractorEntityDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InteractorEntityAny} "any"
		public Group getGroup_0() { return cGroup_0; }

		//{InteractorEntityAny}
		public Action getInteractorEntityAnyAction_0_0() { return cInteractorEntityAnyAction_0_0; }

		//"any"
		public Keyword getAnyKeyword_0_1() { return cAnyKeyword_0_1; }

		//{InteractorEntitySelf} "self"
		public Group getGroup_1() { return cGroup_1; }

		//{InteractorEntitySelf}
		public Action getInteractorEntitySelfAction_1_0() { return cInteractorEntitySelfAction_1_0; }

		//"self"
		public Keyword getSelfKeyword_1_1() { return cSelfKeyword_1_1; }

		//{InteractorEntityOther} "other"
		public Group getGroup_2() { return cGroup_2; }

		//{InteractorEntityOther}
		public Action getInteractorEntityOtherAction_2_0() { return cInteractorEntityOtherAction_2_0; }

		//"other"
		public Keyword getOtherKeyword_2_1() { return cOtherKeyword_2_1; }

		//{InteractorEntityParent} "parent"
		public Group getGroup_3() { return cGroup_3; }

		//{InteractorEntityParent}
		public Action getInteractorEntityParentAction_3_0() { return cInteractorEntityParentAction_3_0; }

		//"parent"
		public Keyword getParentKeyword_3_1() { return cParentKeyword_3_1; }

		//{InteractorEntityChild} "child"
		public Group getGroup_4() { return cGroup_4; }

		//{InteractorEntityChild}
		public Action getInteractorEntityChildAction_4_0() { return cInteractorEntityChildAction_4_0; }

		//"child"
		public Keyword getChildKeyword_4_1() { return cChildKeyword_4_1; }

		//{InteractorEntityAll} "all"
		public Group getGroup_5() { return cGroup_5; }

		//{InteractorEntityAll}
		public Action getInteractorEntityAllAction_5_0() { return cInteractorEntityAllAction_5_0; }

		//"all"
		public Keyword getAllKeyword_5_1() { return cAllKeyword_5_1; }

		//{InteractorEntityActors} "actors"
		public Group getGroup_6() { return cGroup_6; }

		//{InteractorEntityActors}
		public Action getInteractorEntityActorsAction_6_0() { return cInteractorEntityActorsAction_6_0; }

		//"actors"
		public Keyword getActorsKeyword_6_1() { return cActorsKeyword_6_1; }

		//{InteractorEntitySpecific} entity=[InteractorEntityDeclaration]
		public Group getGroup_7() { return cGroup_7; }

		//{InteractorEntitySpecific}
		public Action getInteractorEntitySpecificAction_7_0() { return cInteractorEntitySpecificAction_7_0; }

		//entity=[InteractorEntityDeclaration]
		public Assignment getEntityAssignment_7_1() { return cEntityAssignment_7_1; }

		//[InteractorEntityDeclaration]
		public CrossReference getEntityInteractorEntityDeclarationCrossReference_7_1_0() { return cEntityInteractorEntityDeclarationCrossReference_7_1_0; }

		//ID
		public RuleCall getEntityInteractorEntityDeclarationIDTerminalRuleCall_7_1_0_1() { return cEntityInteractorEntityDeclarationIDTerminalRuleCall_7_1_0_1; }
	}

	public class InteractorDataReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorDataReception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInteractorDataReceptionInternalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDataAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cDataInteractorDataDeclarationCrossReference_0_1_0 = (CrossReference)cDataAssignment_0_1.eContents().get(0);
		private final RuleCall cDataInteractorDataDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cDataInteractorDataDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInteractorDataReceptionExternalAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cDataAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cDataInteractorDataDeclarationCrossReference_1_1_0_0 = (CrossReference)cDataAssignment_1_1_0.eContents().get(0);
		private final RuleCall cDataInteractorDataDeclarationIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cDataInteractorDataDeclarationCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cFromKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSourceAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSourceInteractorDataAliasParserRuleCall_1_1_2_0 = (RuleCall)cSourceAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInteractorDataReceptionInitAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cInitKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		////	|
		////	{InteractorEntityActor} actor=[InteractorActor] ;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor Data
		//InteractorDataReception:
		//	{InteractorDataReceptionInternal} data=[InteractorDataDeclaration] | {InteractorDataReceptionExternal}
		//	(data=[InteractorDataDeclaration] "from" source=InteractorDataAlias) | {InteractorDataReceptionInit} "init";
		public ParserRule getRule() { return rule; }

		//{InteractorDataReceptionInternal} data=[InteractorDataDeclaration] | {InteractorDataReceptionExternal}
		//(data=[InteractorDataDeclaration] "from" source=InteractorDataAlias) | {InteractorDataReceptionInit} "init"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InteractorDataReceptionInternal} data=[InteractorDataDeclaration]
		public Group getGroup_0() { return cGroup_0; }

		//{InteractorDataReceptionInternal}
		public Action getInteractorDataReceptionInternalAction_0_0() { return cInteractorDataReceptionInternalAction_0_0; }

		//data=[InteractorDataDeclaration]
		public Assignment getDataAssignment_0_1() { return cDataAssignment_0_1; }

		//[InteractorDataDeclaration]
		public CrossReference getDataInteractorDataDeclarationCrossReference_0_1_0() { return cDataInteractorDataDeclarationCrossReference_0_1_0; }

		//ID
		public RuleCall getDataInteractorDataDeclarationIDTerminalRuleCall_0_1_0_1() { return cDataInteractorDataDeclarationIDTerminalRuleCall_0_1_0_1; }

		//{InteractorDataReceptionExternal} (data=[InteractorDataDeclaration] "from" source=InteractorDataAlias)
		public Group getGroup_1() { return cGroup_1; }

		//{InteractorDataReceptionExternal}
		public Action getInteractorDataReceptionExternalAction_1_0() { return cInteractorDataReceptionExternalAction_1_0; }

		//data=[InteractorDataDeclaration] "from" source=InteractorDataAlias
		public Group getGroup_1_1() { return cGroup_1_1; }

		//data=[InteractorDataDeclaration]
		public Assignment getDataAssignment_1_1_0() { return cDataAssignment_1_1_0; }

		//[InteractorDataDeclaration]
		public CrossReference getDataInteractorDataDeclarationCrossReference_1_1_0_0() { return cDataInteractorDataDeclarationCrossReference_1_1_0_0; }

		//ID
		public RuleCall getDataInteractorDataDeclarationIDTerminalRuleCall_1_1_0_0_1() { return cDataInteractorDataDeclarationIDTerminalRuleCall_1_1_0_0_1; }

		//"from"
		public Keyword getFromKeyword_1_1_1() { return cFromKeyword_1_1_1; }

		//source=InteractorDataAlias
		public Assignment getSourceAssignment_1_1_2() { return cSourceAssignment_1_1_2; }

		//InteractorDataAlias
		public RuleCall getSourceInteractorDataAliasParserRuleCall_1_1_2_0() { return cSourceInteractorDataAliasParserRuleCall_1_1_2_0; }

		//{InteractorDataReceptionInit} "init"
		public Group getGroup_2() { return cGroup_2; }

		//{InteractorDataReceptionInit}
		public Action getInteractorDataReceptionInitAction_2_0() { return cInteractorDataReceptionInitAction_2_0; }

		//"init"
		public Keyword getInitKeyword_2_1() { return cInitKeyword_2_1; }
	}

	public class InteractorDataEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorDataEmission");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInteractorDataEmissionInternalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDataAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cDataInteractorDataDeclarationCrossReference_0_1_0 = (CrossReference)cDataAssignment_0_1.eContents().get(0);
		private final RuleCall cDataInteractorDataDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cDataInteractorDataDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInteractorDataEmissionExternalAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cDataAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cDataInteractorDataDeclarationCrossReference_1_1_0_0 = (CrossReference)cDataAssignment_1_1_0.eContents().get(0);
		private final RuleCall cDataInteractorDataDeclarationIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cDataInteractorDataDeclarationCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cToKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDestinationAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDestinationInteractorDataAliasParserRuleCall_1_1_2_0 = (RuleCall)cDestinationAssignment_1_1_2.eContents().get(0);
		
		//InteractorDataEmission:
		//	{InteractorDataEmissionInternal} data=[InteractorDataDeclaration] | {InteractorDataEmissionExternal}
		//	(data=[InteractorDataDeclaration] "to" destination=InteractorDataAlias);
		public ParserRule getRule() { return rule; }

		//{InteractorDataEmissionInternal} data=[InteractorDataDeclaration] | {InteractorDataEmissionExternal}
		//(data=[InteractorDataDeclaration] "to" destination=InteractorDataAlias)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InteractorDataEmissionInternal} data=[InteractorDataDeclaration]
		public Group getGroup_0() { return cGroup_0; }

		//{InteractorDataEmissionInternal}
		public Action getInteractorDataEmissionInternalAction_0_0() { return cInteractorDataEmissionInternalAction_0_0; }

		//data=[InteractorDataDeclaration]
		public Assignment getDataAssignment_0_1() { return cDataAssignment_0_1; }

		//[InteractorDataDeclaration]
		public CrossReference getDataInteractorDataDeclarationCrossReference_0_1_0() { return cDataInteractorDataDeclarationCrossReference_0_1_0; }

		//ID
		public RuleCall getDataInteractorDataDeclarationIDTerminalRuleCall_0_1_0_1() { return cDataInteractorDataDeclarationIDTerminalRuleCall_0_1_0_1; }

		//{InteractorDataEmissionExternal} (data=[InteractorDataDeclaration] "to" destination=InteractorDataAlias)
		public Group getGroup_1() { return cGroup_1; }

		//{InteractorDataEmissionExternal}
		public Action getInteractorDataEmissionExternalAction_1_0() { return cInteractorDataEmissionExternalAction_1_0; }

		//data=[InteractorDataDeclaration] "to" destination=InteractorDataAlias
		public Group getGroup_1_1() { return cGroup_1_1; }

		//data=[InteractorDataDeclaration]
		public Assignment getDataAssignment_1_1_0() { return cDataAssignment_1_1_0; }

		//[InteractorDataDeclaration]
		public CrossReference getDataInteractorDataDeclarationCrossReference_1_1_0_0() { return cDataInteractorDataDeclarationCrossReference_1_1_0_0; }

		//ID
		public RuleCall getDataInteractorDataDeclarationIDTerminalRuleCall_1_1_0_0_1() { return cDataInteractorDataDeclarationIDTerminalRuleCall_1_1_0_0_1; }

		//"to"
		public Keyword getToKeyword_1_1_1() { return cToKeyword_1_1_1; }

		//destination=InteractorDataAlias
		public Assignment getDestinationAssignment_1_1_2() { return cDestinationAssignment_1_1_2; }

		//InteractorDataAlias
		public RuleCall getDestinationInteractorDataAliasParserRuleCall_1_1_2_0() { return cDestinationInteractorDataAliasParserRuleCall_1_1_2_0; }
	}

	public class InteractorBehaviorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorBehaviorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteractorBehaviorDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCauseInteractorBehaviorCauseParserRuleCall_1_0 = (RuleCall)cCauseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffectInteractorBehaviorEffectParserRuleCall_3_0 = (RuleCall)cEffectAssignment_3.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor Behaviors
		//InteractorBehaviorDeclaration:
		//	{InteractorBehaviorDeclaration} cause=InteractorBehaviorCause ":" effect+=InteractorBehaviorEffect+;
		public ParserRule getRule() { return rule; }

		//{InteractorBehaviorDeclaration} cause=InteractorBehaviorCause ":" effect+=InteractorBehaviorEffect+
		public Group getGroup() { return cGroup; }

		//{InteractorBehaviorDeclaration}
		public Action getInteractorBehaviorDeclarationAction_0() { return cInteractorBehaviorDeclarationAction_0; }

		//cause=InteractorBehaviorCause
		public Assignment getCauseAssignment_1() { return cCauseAssignment_1; }

		//InteractorBehaviorCause
		public RuleCall getCauseInteractorBehaviorCauseParserRuleCall_1_0() { return cCauseInteractorBehaviorCauseParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//effect+=InteractorBehaviorEffect+
		public Assignment getEffectAssignment_3() { return cEffectAssignment_3; }

		//InteractorBehaviorEffect
		public RuleCall getEffectInteractorBehaviorEffectParserRuleCall_3_0() { return cEffectInteractorBehaviorEffectParserRuleCall_3_0; }
	}

	public class InteractorBehaviorCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorBehaviorCause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInteractorBehaviorCauseOnAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cOnKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEventInteractorDataReceptionParserRuleCall_0_2_0 = (RuleCall)cEventAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cIfKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cGuardAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_0_3_1_0 = (RuleCall)cGuardAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInteractorBehaviorCauseWhenAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWhenKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cIfKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cGuardAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_1_3_1_0 = (RuleCall)cGuardAssignment_1_3_1.eContents().get(0);
		
		//InteractorBehaviorCause:
		//	{InteractorBehaviorCauseOn} "on" event=InteractorDataReception ("if" guard=Expression)? |
		//	{InteractorBehaviorCauseWhen} "when" condition=Expression ("if" guard=Expression)?;
		public ParserRule getRule() { return rule; }

		//{InteractorBehaviorCauseOn} "on" event=InteractorDataReception ("if" guard=Expression)? | {InteractorBehaviorCauseWhen}
		//"when" condition=Expression ("if" guard=Expression)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InteractorBehaviorCauseOn} "on" event=InteractorDataReception ("if" guard=Expression)?
		public Group getGroup_0() { return cGroup_0; }

		//{InteractorBehaviorCauseOn}
		public Action getInteractorBehaviorCauseOnAction_0_0() { return cInteractorBehaviorCauseOnAction_0_0; }

		//"on"
		public Keyword getOnKeyword_0_1() { return cOnKeyword_0_1; }

		//event=InteractorDataReception
		public Assignment getEventAssignment_0_2() { return cEventAssignment_0_2; }

		//InteractorDataReception
		public RuleCall getEventInteractorDataReceptionParserRuleCall_0_2_0() { return cEventInteractorDataReceptionParserRuleCall_0_2_0; }

		//("if" guard=Expression)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"if"
		public Keyword getIfKeyword_0_3_0() { return cIfKeyword_0_3_0; }

		//guard=Expression
		public Assignment getGuardAssignment_0_3_1() { return cGuardAssignment_0_3_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_0_3_1_0() { return cGuardExpressionParserRuleCall_0_3_1_0; }

		//{InteractorBehaviorCauseWhen} "when" condition=Expression ("if" guard=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{InteractorBehaviorCauseWhen}
		public Action getInteractorBehaviorCauseWhenAction_1_0() { return cInteractorBehaviorCauseWhenAction_1_0; }

		//"when"
		public Keyword getWhenKeyword_1_1() { return cWhenKeyword_1_1; }

		//condition=Expression
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_2_0() { return cConditionExpressionParserRuleCall_1_2_0; }

		//("if" guard=Expression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"if"
		public Keyword getIfKeyword_1_3_0() { return cIfKeyword_1_3_0; }

		//guard=Expression
		public Assignment getGuardAssignment_1_3_1() { return cGuardAssignment_1_3_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_1_3_1_0() { return cGuardExpressionParserRuleCall_1_3_1_0; }
	}

	public class InteractorBehaviorEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorBehaviorEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInteractorBehaviorEffectAlwaysAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAlwaysKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTargetAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTargetInteractorDataEmissionParserRuleCall_0_1_1_0 = (RuleCall)cTargetAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cValueAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_0_1_3_0 = (RuleCall)cValueAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInteractorBehaviorEffectSetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSetKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTargetInteractorDataEmissionParserRuleCall_1_1_1_0 = (RuleCall)cTargetAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cValueAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_1_1_3_0 = (RuleCall)cValueAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInteractorBehaviorEffectTriggerAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cTriggerKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTargetAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTargetInteractorDataEmissionParserRuleCall_2_1_1_0 = (RuleCall)cTargetAssignment_2_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cValueAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_2_1_3_0 = (RuleCall)cValueAssignment_2_1_3.eContents().get(0);
		
		//InteractorBehaviorEffect:
		//	{InteractorBehaviorEffectAlways} ("always" target=InteractorDataEmission "=" value=Expression) |
		//	{InteractorBehaviorEffectSet} ("set" target=InteractorDataEmission "=" value=Expression) |
		//	{InteractorBehaviorEffectTrigger} ("trigger" target=InteractorDataEmission "=" value=Expression);
		public ParserRule getRule() { return rule; }

		//{InteractorBehaviorEffectAlways} ("always" target=InteractorDataEmission "=" value=Expression) |
		//{InteractorBehaviorEffectSet} ("set" target=InteractorDataEmission "=" value=Expression) |
		//{InteractorBehaviorEffectTrigger} ("trigger" target=InteractorDataEmission "=" value=Expression)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InteractorBehaviorEffectAlways} ("always" target=InteractorDataEmission "=" value=Expression)
		public Group getGroup_0() { return cGroup_0; }

		//{InteractorBehaviorEffectAlways}
		public Action getInteractorBehaviorEffectAlwaysAction_0_0() { return cInteractorBehaviorEffectAlwaysAction_0_0; }

		//"always" target=InteractorDataEmission "=" value=Expression
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"always"
		public Keyword getAlwaysKeyword_0_1_0() { return cAlwaysKeyword_0_1_0; }

		//target=InteractorDataEmission
		public Assignment getTargetAssignment_0_1_1() { return cTargetAssignment_0_1_1; }

		//InteractorDataEmission
		public RuleCall getTargetInteractorDataEmissionParserRuleCall_0_1_1_0() { return cTargetInteractorDataEmissionParserRuleCall_0_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_2() { return cEqualsSignKeyword_0_1_2; }

		//value=Expression
		public Assignment getValueAssignment_0_1_3() { return cValueAssignment_0_1_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_1_3_0() { return cValueExpressionParserRuleCall_0_1_3_0; }

		//{InteractorBehaviorEffectSet} ("set" target=InteractorDataEmission "=" value=Expression)
		public Group getGroup_1() { return cGroup_1; }

		//{InteractorBehaviorEffectSet}
		public Action getInteractorBehaviorEffectSetAction_1_0() { return cInteractorBehaviorEffectSetAction_1_0; }

		//"set" target=InteractorDataEmission "=" value=Expression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"set"
		public Keyword getSetKeyword_1_1_0() { return cSetKeyword_1_1_0; }

		//target=InteractorDataEmission
		public Assignment getTargetAssignment_1_1_1() { return cTargetAssignment_1_1_1; }

		//InteractorDataEmission
		public RuleCall getTargetInteractorDataEmissionParserRuleCall_1_1_1_0() { return cTargetInteractorDataEmissionParserRuleCall_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_2() { return cEqualsSignKeyword_1_1_2; }

		//value=Expression
		public Assignment getValueAssignment_1_1_3() { return cValueAssignment_1_1_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_1_3_0() { return cValueExpressionParserRuleCall_1_1_3_0; }

		//{InteractorBehaviorEffectTrigger} ("trigger" target=InteractorDataEmission "=" value=Expression)
		public Group getGroup_2() { return cGroup_2; }

		//{InteractorBehaviorEffectTrigger}
		public Action getInteractorBehaviorEffectTriggerAction_2_0() { return cInteractorBehaviorEffectTriggerAction_2_0; }

		//"trigger" target=InteractorDataEmission "=" value=Expression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"trigger"
		public Keyword getTriggerKeyword_2_1_0() { return cTriggerKeyword_2_1_0; }

		//target=InteractorDataEmission
		public Assignment getTargetAssignment_2_1_1() { return cTargetAssignment_2_1_1; }

		//InteractorDataEmission
		public RuleCall getTargetInteractorDataEmissionParserRuleCall_2_1_1_0() { return cTargetInteractorDataEmissionParserRuleCall_2_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_2() { return cEqualsSignKeyword_2_1_2; }

		//value=Expression
		public Assignment getValueAssignment_2_1_3() { return cValueAssignment_2_1_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_3_0() { return cValueExpressionParserRuleCall_2_1_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cExpressionOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a subset of it in order to be able to generate C code and in order to simplify the language
		////So we are going to construct the expressions language we need. It is similar to xbase on certain points, but still clearly different, semantically and syntaxically
		//Expression:
		//	ExpressionOr;
		public ParserRule getRule() { return rule; }

		//ExpressionOr
		public RuleCall getExpressionOrParserRuleCall() { return cExpressionOrParserRuleCall; }
	}

	public class ExpressionOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionOrOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionAndParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		////Composition of expressions
		//ExpressionOr returns Expression:
		//	ExpressionAnd (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOrOp)
		//	rightOperand=ExpressionAnd)*;
		public ParserRule getRule() { return rule; }

		//ExpressionAnd (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOrOp) rightOperand=ExpressionAnd)*
		public Group getGroup() { return cGroup; }

		//ExpressionAnd
		public RuleCall getExpressionAndParserRuleCall_0() { return cExpressionAndParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOrOp) rightOperand=ExpressionAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOrOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOrOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionOrOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionOrOp
		public RuleCall getFeatureExpressionOrOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionOrOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionAnd
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionAnd
		public RuleCall getRightOperandExpressionAndParserRuleCall_1_1_0() { return cRightOperandExpressionAndParserRuleCall_1_1_0; }
	}

	public class ExpressionOrOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOrOp");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//ExpressionOrOp:
		//	"or";
		public ParserRule getRule() { return rule; }

		//"or"
		public Keyword getOrKeyword() { return cOrKeyword; }
	}

	public class ExpressionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionAndOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionEqualityParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ExpressionAnd returns Expression:
		//	ExpressionEquality (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAndOp)
		//	rightOperand=ExpressionEquality)*;
		public ParserRule getRule() { return rule; }

		//ExpressionEquality (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAndOp)
		//rightOperand=ExpressionEquality)*
		public Group getGroup() { return cGroup; }

		//ExpressionEquality
		public RuleCall getExpressionEqualityParserRuleCall_0() { return cExpressionEqualityParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAndOp) rightOperand=ExpressionEquality)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAndOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAndOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionAndOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionAndOp
		public RuleCall getFeatureExpressionAndOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionAndOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionEquality
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionEquality
		public RuleCall getRightOperandExpressionEqualityParserRuleCall_1_1_0() { return cRightOperandExpressionEqualityParserRuleCall_1_1_0; }
	}

	public class ExpressionAndOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionAndOp");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//ExpressionAndOp:
		//	"and";
		public ParserRule getRule() { return rule; }

		//"and"
		public Keyword getAndKeyword() { return cAndKeyword; }
	}

	public class ExpressionEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionEqualityOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionCompareParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ExpressionEquality returns Expression:
		//	ExpressionCompare (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionEqualityOp)
		//	rightOperand=ExpressionCompare)*;
		public ParserRule getRule() { return rule; }

		//ExpressionCompare (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionEqualityOp)
		//rightOperand=ExpressionCompare)*
		public Group getGroup() { return cGroup; }

		//ExpressionCompare
		public RuleCall getExpressionCompareParserRuleCall_0() { return cExpressionCompareParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionEqualityOp) rightOperand=ExpressionCompare)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionEqualityOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionEqualityOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionEqualityOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionEqualityOp
		public RuleCall getFeatureExpressionEqualityOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionEqualityOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionCompare
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionCompare
		public RuleCall getRightOperandExpressionCompareParserRuleCall_1_1_0() { return cRightOperandExpressionCompareParserRuleCall_1_1_0; }
	}

	public class ExpressionEqualityOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionEqualityOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExpressionEqualityOp:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class ExpressionCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionOtherParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionCompareOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionOtherParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ExpressionCompare returns Expression:
		//	ExpressionOther (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionCompareOp)
		//	rightOperand=ExpressionOther)*;
		public ParserRule getRule() { return rule; }

		//ExpressionOther (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionCompareOp)
		//rightOperand=ExpressionOther)*
		public Group getGroup() { return cGroup; }

		//ExpressionOther
		public RuleCall getExpressionOtherParserRuleCall_0() { return cExpressionOtherParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionCompareOp) rightOperand=ExpressionOther)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionCompareOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionCompareOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionCompareOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionCompareOp
		public RuleCall getFeatureExpressionCompareOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionCompareOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionOther
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionOther
		public RuleCall getRightOperandExpressionOtherParserRuleCall_1_1_0() { return cRightOperandExpressionOtherParserRuleCall_1_1_0; }
	}

	public class ExpressionCompareOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionCompareOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ExpressionCompareOp:
		//	"<=" | ">=" | "<" | ">";
		public ParserRule getRule() { return rule; }

		//"<=" | ">=" | "<" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class ExpressionOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOther");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionOtherOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionAdditionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ExpressionOther returns Expression:
		//	ExpressionAddition (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOtherOp)
		//	rightOperand=ExpressionAddition)*;
		public ParserRule getRule() { return rule; }

		//ExpressionAddition (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOtherOp)
		//rightOperand=ExpressionAddition)*
		public Group getGroup() { return cGroup; }

		//ExpressionAddition
		public RuleCall getExpressionAdditionParserRuleCall_0() { return cExpressionAdditionParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOtherOp) rightOperand=ExpressionAddition)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOtherOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOtherOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionOtherOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionOtherOp
		public RuleCall getFeatureExpressionOtherOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionOtherOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionAddition
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionAddition
		public RuleCall getRightOperandExpressionAdditionParserRuleCall_1_1_0() { return cRightOperandExpressionAdditionParserRuleCall_1_1_0; }
	}

	public class ExpressionOtherOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOtherOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQuestionMarkColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////String join and groovy elvis operator for null checking
		//ExpressionOtherOp:
		//	"<>" | "?:";
		public ParserRule getRule() { return rule; }

		//"<>" | "?:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_0() { return cLessThanSignGreaterThanSignKeyword_0; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_1() { return cQuestionMarkColonKeyword_1; }
	}

	public class ExpressionAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionAdditionOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ExpressionAddition returns Expression:
		//	ExpressionMultiplication (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAdditionOp)
		//	rightOperand=ExpressionMultiplication)*;
		public ParserRule getRule() { return rule; }

		//ExpressionMultiplication (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAdditionOp)
		//rightOperand=ExpressionMultiplication)*
		public Group getGroup() { return cGroup; }

		//ExpressionMultiplication
		public RuleCall getExpressionMultiplicationParserRuleCall_0() { return cExpressionMultiplicationParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAdditionOp)
		//rightOperand=ExpressionMultiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAdditionOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAdditionOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionAdditionOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionAdditionOp
		public RuleCall getFeatureExpressionAdditionOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionAdditionOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionMultiplication
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionMultiplication
		public RuleCall getRightOperandExpressionMultiplicationParserRuleCall_1_1_0() { return cRightOperandExpressionMultiplicationParserRuleCall_1_1_0; }
	}

	public class ExpressionAdditionOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionAdditionOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExpressionAdditionOp:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class ExpressionMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionMultiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureExpressionMultiplicationOpParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionUnaryParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ExpressionMultiplication returns Expression:
		//	ExpressionUnary (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionMultiplicationOp)
		//	rightOperand=ExpressionUnary)*;
		public ParserRule getRule() { return rule; }

		//ExpressionUnary (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionMultiplicationOp)
		//rightOperand=ExpressionUnary)*
		public Group getGroup() { return cGroup; }

		//ExpressionUnary
		public RuleCall getExpressionUnaryParserRuleCall_0() { return cExpressionUnaryParserRuleCall_0; }

		//(=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionMultiplicationOp) rightOperand=ExpressionUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionMultiplicationOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExpressionBinaryOperation.leftOperand=current} feature=ExpressionMultiplicationOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpressionBinaryOperation.leftOperand=current}
		public Action getExpressionBinaryOperationLeftOperandAction_1_0_0_0() { return cExpressionBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=ExpressionMultiplicationOp
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//ExpressionMultiplicationOp
		public RuleCall getFeatureExpressionMultiplicationOpParserRuleCall_1_0_0_1_0() { return cFeatureExpressionMultiplicationOpParserRuleCall_1_0_0_1_0; }

		//rightOperand=ExpressionUnary
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ExpressionUnary
		public RuleCall getRightOperandExpressionUnaryParserRuleCall_1_1_0() { return cRightOperandExpressionUnaryParserRuleCall_1_1_0; }
	}

	public class ExpressionMultiplicationOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionMultiplicationOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ExpressionMultiplicationOp:
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class ExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureExpressionUnaryOpParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandExpressionPrimaryParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cExpressionPrimaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionUnary returns Expression:
		//	{UnaryOperation} feature=ExpressionUnaryOp operand=ExpressionPrimary | ExpressionPrimary;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} feature=ExpressionUnaryOp operand=ExpressionPrimary | ExpressionPrimary
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} feature=ExpressionUnaryOp operand=ExpressionPrimary
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//feature=ExpressionUnaryOp
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//ExpressionUnaryOp
		public RuleCall getFeatureExpressionUnaryOpParserRuleCall_0_1_0() { return cFeatureExpressionUnaryOpParserRuleCall_0_1_0; }

		//operand=ExpressionPrimary
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//ExpressionPrimary
		public RuleCall getOperandExpressionPrimaryParserRuleCall_0_2_0() { return cOperandExpressionPrimaryParserRuleCall_0_2_0; }

		//ExpressionPrimary
		public RuleCall getExpressionPrimaryParserRuleCall_1() { return cExpressionPrimaryParserRuleCall_1; }
	}

	public class ExpressionUnaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionUnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ExpressionUnaryOp:
		//	"!" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class ExpressionPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionSwitchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionForEachParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionParenthesizedParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ExpressionPrimary returns Expression:
		//	ExpressionSwitch | ExpressionIf | ExpressionLiteral | ExpressionForEach | ExpressionFunctionCall |
		//	ExpressionParenthesized;
		public ParserRule getRule() { return rule; }

		//ExpressionSwitch | ExpressionIf | ExpressionLiteral | ExpressionForEach | ExpressionFunctionCall |
		//ExpressionParenthesized
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionSwitch
		public RuleCall getExpressionSwitchParserRuleCall_0() { return cExpressionSwitchParserRuleCall_0; }

		//ExpressionIf
		public RuleCall getExpressionIfParserRuleCall_1() { return cExpressionIfParserRuleCall_1; }

		//ExpressionLiteral
		public RuleCall getExpressionLiteralParserRuleCall_2() { return cExpressionLiteralParserRuleCall_2; }

		//ExpressionForEach
		public RuleCall getExpressionForEachParserRuleCall_3() { return cExpressionForEachParserRuleCall_3; }

		//ExpressionFunctionCall
		public RuleCall getExpressionFunctionCallParserRuleCall_4() { return cExpressionFunctionCallParserRuleCall_4; }

		//ExpressionParenthesized
		public RuleCall getExpressionParenthesizedParserRuleCall_5() { return cExpressionParenthesizedParserRuleCall_5; }
	}

	public class ExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionLiteralCollectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralNumberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralNullParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLiteralTimeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLiteralEnumParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInteractorDataReceptionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ExpressionLiteral returns Expression:
		//	ExpressionLiteralCollection | LiteralBoolean | LiteralNumber | LiteralNull | LiteralText | LiteralTime | LiteralEnum |
		//	InteractorDataReception;
		public ParserRule getRule() { return rule; }

		//ExpressionLiteralCollection | LiteralBoolean | LiteralNumber | LiteralNull | LiteralText | LiteralTime | LiteralEnum |
		//InteractorDataReception
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionLiteralCollection
		public RuleCall getExpressionLiteralCollectionParserRuleCall_0() { return cExpressionLiteralCollectionParserRuleCall_0; }

		//LiteralBoolean
		public RuleCall getLiteralBooleanParserRuleCall_1() { return cLiteralBooleanParserRuleCall_1; }

		//LiteralNumber
		public RuleCall getLiteralNumberParserRuleCall_2() { return cLiteralNumberParserRuleCall_2; }

		//LiteralNull
		public RuleCall getLiteralNullParserRuleCall_3() { return cLiteralNullParserRuleCall_3; }

		//LiteralText
		public RuleCall getLiteralTextParserRuleCall_4() { return cLiteralTextParserRuleCall_4; }

		//LiteralTime
		public RuleCall getLiteralTimeParserRuleCall_5() { return cLiteralTimeParserRuleCall_5; }

		//LiteralEnum
		public RuleCall getLiteralEnumParserRuleCall_6() { return cLiteralEnumParserRuleCall_6; }

		//InteractorDataReception
		public RuleCall getInteractorDataReceptionParserRuleCall_7() { return cInteractorDataReceptionParserRuleCall_7; }
	}

	public class ExpressionLiteralCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionLiteralCollection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionLiteralSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionLiteralListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////	| {LiteralData} data=[InteractorData];
		//ExpressionLiteralCollection:
		//	ExpressionLiteralSet | ExpressionLiteralList;
		public ParserRule getRule() { return rule; }

		//ExpressionLiteralSet | ExpressionLiteralList
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionLiteralSet
		public RuleCall getExpressionLiteralSetParserRuleCall_0() { return cExpressionLiteralSetParserRuleCall_0; }

		//ExpressionLiteralList
		public RuleCall getExpressionLiteralListParserRuleCall_1() { return cExpressionLiteralListParserRuleCall_1; }
	}

	public class ExpressionLiteralSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionLiteralSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionLiteralSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExpressionLiteralSet:
		//	{ExpressionLiteralSet} "{" (elements+=Expression ("," elements+=Expression)*)? "}";
		public ParserRule getRule() { return rule; }

		//{ExpressionLiteralSet} "{" (elements+=Expression ("," elements+=Expression)*)? "}"
		public Group getGroup() { return cGroup; }

		//{ExpressionLiteralSet}
		public Action getExpressionLiteralSetAction_0() { return cExpressionLiteralSetAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=Expression ("," elements+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0_0() { return cElementsExpressionParserRuleCall_2_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_1_0() { return cElementsExpressionParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionLiteralListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionLiteralList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionLiteralListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExpressionLiteralList:
		//	{ExpressionLiteralList} "[" (elements+=Expression ("," elements+=Expression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{ExpressionLiteralList} "[" (elements+=Expression ("," elements+=Expression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{ExpressionLiteralList}
		public Action getExpressionLiteralListAction_0() { return cExpressionLiteralListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=Expression ("," elements+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0_0() { return cElementsExpressionParserRuleCall_2_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_1_0() { return cElementsExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExpressionParenthesizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionParenthesized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionParenthesized returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//ExpressionIf returns Expression:
		//	{ExpressionIf} "if" "(" if=Expression => ")" then=Expression ("else" else=Expression);
		public ParserRule getRule() { return rule; }

		//{ExpressionIf} "if" "(" if=Expression => ")" then=Expression ("else" else=Expression)
		public Group getGroup() { return cGroup; }

		//{ExpressionIf}
		public Action getExpressionIfAction_0() { return cExpressionIfAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=Expression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//Expression
		public RuleCall getIfExpressionParserRuleCall_3_0() { return cIfExpressionParserRuleCall_3_0; }

		//=> ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=Expression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_5_0() { return cThenExpressionParserRuleCall_5_0; }

		//=> "else" else=Expression
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=Expression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_6_1_0() { return cElseExpressionParserRuleCall_6_1_0; }
	}

	public class ExpressionSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSwitchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchExpressionParserRuleCall_3_0 = (RuleCall)cSwitchAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCaseExpressionCaseParserRuleCall_5_0 = (RuleCall)cCaseAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDefaultKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDefaultAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDefaultExpressionParserRuleCall_6_2_0 = (RuleCall)cDefaultAssignment_6_2.eContents().get(0);
		
		//ExpressionSwitch returns Expression:
		//	{ExpressionSwitch} "switch" "(" switch=Expression => ")" => case+=ExpressionCase+ ("default" ":" default=Expression)?;
		public ParserRule getRule() { return rule; }

		//{ExpressionSwitch} "switch" "(" switch=Expression => ")" => case+=ExpressionCase+ ("default" ":" default=Expression)?
		public Group getGroup() { return cGroup; }

		//{ExpressionSwitch}
		public Action getExpressionSwitchAction_0() { return cExpressionSwitchAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//switch=Expression
		public Assignment getSwitchAssignment_3() { return cSwitchAssignment_3; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_3_0() { return cSwitchExpressionParserRuleCall_3_0; }

		//=> ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//=> case+=ExpressionCase+
		public Assignment getCaseAssignment_5() { return cCaseAssignment_5; }

		//ExpressionCase
		public RuleCall getCaseExpressionCaseParserRuleCall_5_0() { return cCaseExpressionCaseParserRuleCall_5_0; }

		//(=> "default" ":" default=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "default"
		public Keyword getDefaultKeyword_6_0() { return cDefaultKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//default=Expression
		public Assignment getDefaultAssignment_6_2() { return cDefaultAssignment_6_2; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_6_2_0() { return cDefaultExpressionParserRuleCall_6_2_0; }
	}

	public class ExpressionCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//ExpressionCase:
		//	"case" case=Expression ":" then=Expression;
		public ParserRule getRule() { return rule; }

		//"case" case=Expression ":" then=Expression
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=Expression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//Expression
		public RuleCall getCaseExpressionParserRuleCall_1_0() { return cCaseExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=Expression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0() { return cThenExpressionParserRuleCall_3_0; }
	}

	public class ExpressionForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionForEachAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEachKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForExpressionExpressionParserRuleCall_4_0 = (RuleCall)cForExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEachExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEachExpressionExpressionParserRuleCall_6_0 = (RuleCall)cEachExpressionAssignment_6.eContents().get(0);
		
		//ExpressionForEach returns Expression:
		//	{ExpressionForEach} "for" "each" "(" forExpression=Expression ")" eachExpression=Expression;
		public ParserRule getRule() { return rule; }

		//{ExpressionForEach} "for" "each" "(" forExpression=Expression ")" eachExpression=Expression
		public Group getGroup() { return cGroup; }

		//{ExpressionForEach}
		public Action getExpressionForEachAction_0() { return cExpressionForEachAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"each"
		public Keyword getEachKeyword_2() { return cEachKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//forExpression=Expression
		public Assignment getForExpressionAssignment_4() { return cForExpressionAssignment_4; }

		//Expression
		public RuleCall getForExpressionExpressionParserRuleCall_4_0() { return cForExpressionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//eachExpression=Expression
		public Assignment getEachExpressionAssignment_6() { return cEachExpressionAssignment_6; }

		//Expression
		public RuleCall getEachExpressionExpressionParserRuleCall_6_0() { return cEachExpressionExpressionParserRuleCall_6_0; }
	}

	public class ExpressionFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionExpressionFunctionCallBaseParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_1_0 = (RuleCall)cArgumentsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExpressionFunctionCall returns Expression:
		//	{ExpressionFunctionCall} function=ExpressionFunctionCallBase "(" arguments+=Expression? ("," arguments+=Expression)*
		//	")";
		public ParserRule getRule() { return rule; }

		//{ExpressionFunctionCall} function=ExpressionFunctionCallBase "(" arguments+=Expression? ("," arguments+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//{ExpressionFunctionCall}
		public Action getExpressionFunctionCallAction_0() { return cExpressionFunctionCallAction_0; }

		//function=ExpressionFunctionCallBase
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//ExpressionFunctionCallBase
		public RuleCall getFunctionExpressionFunctionCallBaseParserRuleCall_1_0() { return cFunctionExpressionFunctionCallBaseParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//arguments+=Expression?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0() { return cArgumentsExpressionParserRuleCall_3_0; }

		//("," arguments+=Expression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_1() { return cArgumentsAssignment_4_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_1_0() { return cArgumentsExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ExpressionFunctionCallBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFunctionCallBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMathAbsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMathAcosKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMathAcoshKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMathAsinKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMathAsinhKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMathAtanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMathAtanhKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMathAtan2Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMathCeilKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMathClipKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMathCosKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMathCoshKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cMathExpKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cMathFloorKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cMathFroundKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMathHypotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cMathLogKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cMathLog10Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMathLog2Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cMathMaxKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cMathMinKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMathPowKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cMathRandomKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cMathRoundKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cMathSignKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cMathSinKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cMathSinhKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cMathSqrtKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cMathTanKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cMathTanhKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cMathTruncKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		
		////Insprired by standard libraries of C, Java, Javascript
		//ExpressionFunctionCallBase:
		//	"math.abs" | "math.acos" | "math.acosh" | "math.asin" | "math.asinh" | "math.atan" | "math.atanh" | "math.atan2" |
		//	"math.ceil" | "math.clip" | "math.cos" | "math.cosh" | "math.exp" | "math.floor" | "math.fround" | "math.hypot" |
		//	"math.log" | "math.log10" | "math.log2" | "math.max" | "math.min" | "math.pow" | "math.random" | "math.round" |
		//	"math.sign" | "math.sin" | "math.sinh" | "math.sqrt" | "math.tan" | "math.tanh" | "math.trunc";
		public ParserRule getRule() { return rule; }

		//"math.abs" | "math.acos" | "math.acosh" | "math.asin" | "math.asinh" | "math.atan" | "math.atanh" | "math.atan2" |
		//"math.ceil" | "math.clip" | "math.cos" | "math.cosh" | "math.exp" | "math.floor" | "math.fround" | "math.hypot" |
		//"math.log" | "math.log10" | "math.log2" | "math.max" | "math.min" | "math.pow" | "math.random" | "math.round" |
		//"math.sign" | "math.sin" | "math.sinh" | "math.sqrt" | "math.tan" | "math.tanh" | "math.trunc"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"math.abs"
		public Keyword getMathAbsKeyword_0() { return cMathAbsKeyword_0; }

		//"math.acos"
		public Keyword getMathAcosKeyword_1() { return cMathAcosKeyword_1; }

		//"math.acosh"
		public Keyword getMathAcoshKeyword_2() { return cMathAcoshKeyword_2; }

		//"math.asin"
		public Keyword getMathAsinKeyword_3() { return cMathAsinKeyword_3; }

		//"math.asinh"
		public Keyword getMathAsinhKeyword_4() { return cMathAsinhKeyword_4; }

		//"math.atan"
		public Keyword getMathAtanKeyword_5() { return cMathAtanKeyword_5; }

		//"math.atanh"
		public Keyword getMathAtanhKeyword_6() { return cMathAtanhKeyword_6; }

		//"math.atan2"
		public Keyword getMathAtan2Keyword_7() { return cMathAtan2Keyword_7; }

		//"math.ceil"
		public Keyword getMathCeilKeyword_8() { return cMathCeilKeyword_8; }

		//"math.clip"
		public Keyword getMathClipKeyword_9() { return cMathClipKeyword_9; }

		//"math.cos"
		public Keyword getMathCosKeyword_10() { return cMathCosKeyword_10; }

		//"math.cosh"
		public Keyword getMathCoshKeyword_11() { return cMathCoshKeyword_11; }

		//"math.exp"
		public Keyword getMathExpKeyword_12() { return cMathExpKeyword_12; }

		//"math.floor"
		public Keyword getMathFloorKeyword_13() { return cMathFloorKeyword_13; }

		//"math.fround"
		public Keyword getMathFroundKeyword_14() { return cMathFroundKeyword_14; }

		//"math.hypot"
		public Keyword getMathHypotKeyword_15() { return cMathHypotKeyword_15; }

		//"math.log"
		public Keyword getMathLogKeyword_16() { return cMathLogKeyword_16; }

		//"math.log10"
		public Keyword getMathLog10Keyword_17() { return cMathLog10Keyword_17; }

		//"math.log2"
		public Keyword getMathLog2Keyword_18() { return cMathLog2Keyword_18; }

		//"math.max"
		public Keyword getMathMaxKeyword_19() { return cMathMaxKeyword_19; }

		//"math.min"
		public Keyword getMathMinKeyword_20() { return cMathMinKeyword_20; }

		//"math.pow"
		public Keyword getMathPowKeyword_21() { return cMathPowKeyword_21; }

		//"math.random"
		public Keyword getMathRandomKeyword_22() { return cMathRandomKeyword_22; }

		//"math.round"
		public Keyword getMathRoundKeyword_23() { return cMathRoundKeyword_23; }

		//"math.sign"
		public Keyword getMathSignKeyword_24() { return cMathSignKeyword_24; }

		//"math.sin"
		public Keyword getMathSinKeyword_25() { return cMathSinKeyword_25; }

		//"math.sinh"
		public Keyword getMathSinhKeyword_26() { return cMathSinhKeyword_26; }

		//"math.sqrt"
		public Keyword getMathSqrtKeyword_27() { return cMathSqrtKeyword_27; }

		//"math.tan"
		public Keyword getMathTanKeyword_28() { return cMathTanKeyword_28; }

		//"math.tanh"
		public Keyword getMathTanhKeyword_29() { return cMathTanhKeyword_29; }

		//"math.trunc"
		public Keyword getMathTruncKeyword_30() { return cMathTruncKeyword_30; }
	}

	public class LiteralBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Literals
		//LiteralBoolean returns Expression:
		//	{LiteralBoolean} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{LiteralBoolean} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{LiteralBoolean}
		public Action getLiteralBooleanAction_0() { return cLiteralBooleanAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class LiteralNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralNullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralNull returns Expression:
		//	{LiteralNull} "null";
		public ParserRule getRule() { return rule; }

		//{LiteralNull} "null"
		public Group getGroup() { return cGroup; }

		//{LiteralNull}
		public Action getLiteralNullAction_0() { return cLiteralNullAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class LiteralNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralNumber returns Expression:
		//	{LiteralNumber} value=NUMBER;
		public ParserRule getRule() { return rule; }

		//{LiteralNumber} value=NUMBER
		public Group getGroup() { return cGroup; }

		//{LiteralNumber}
		public Action getLiteralNumberAction_0() { return cLiteralNumberAction_0; }

		//value=NUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_1_0() { return cValueNUMBERParserRuleCall_1_0; }
	}

	public class LiteralTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralText returns Expression:
		//	{LiteralText} value=STRING;
		public ParserRule getRule() { return rule; }

		//{LiteralText} value=STRING
		public Group getGroup() { return cGroup; }

		//{LiteralText}
		public Action getLiteralTextAction_0() { return cLiteralTextAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class LiteralEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralEnumAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueDataTypeSymbolDefinitionSetElementCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueDataTypeSymbolDefinitionSetElementIDTerminalRuleCall_2_0_1 = (RuleCall)cValueDataTypeSymbolDefinitionSetElementCrossReference_2_0.eContents().get(1);
		
		//LiteralEnum returns Expression:
		//	{LiteralEnum} "#" value=[DataTypeSymbolDefinitionSetElement];
		public ParserRule getRule() { return rule; }

		//{LiteralEnum} "#" value=[DataTypeSymbolDefinitionSetElement]
		public Group getGroup() { return cGroup; }

		//{LiteralEnum}
		public Action getLiteralEnumAction_0() { return cLiteralEnumAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//value=[DataTypeSymbolDefinitionSetElement]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[DataTypeSymbolDefinitionSetElement]
		public CrossReference getValueDataTypeSymbolDefinitionSetElementCrossReference_2_0() { return cValueDataTypeSymbolDefinitionSetElementCrossReference_2_0; }

		//ID
		public RuleCall getValueDataTypeSymbolDefinitionSetElementIDTerminalRuleCall_2_0_1() { return cValueDataTypeSymbolDefinitionSetElementIDTerminalRuleCall_2_0_1; }
	}

	public class LiteralTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralTime");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralTimeNowAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNowKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralTimeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cYearAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cYearNUMBERParserRuleCall_1_1_0_0 = (RuleCall)cYearAssignment_1_1_0.eContents().get(0);
		private final Keyword cYearKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cMonthAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cMonthNUMBERParserRuleCall_1_2_0_0 = (RuleCall)cMonthAssignment_1_2_0.eContents().get(0);
		private final Keyword cMonthKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cDayAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cDayNUMBERParserRuleCall_1_3_0_0 = (RuleCall)cDayAssignment_1_3_0.eContents().get(0);
		private final Keyword cDayKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cHourAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_1_4_0_0 = (RuleCall)cHourAssignment_1_4_0.eContents().get(0);
		private final Keyword cHourKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Assignment cMinuteAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_1_5_0_0 = (RuleCall)cMinuteAssignment_1_5_0.eContents().get(0);
		private final Alternatives cAlternatives_1_5_1 = (Alternatives)cGroup_1_5.eContents().get(1);
		private final Keyword cMKeyword_1_5_1_0 = (Keyword)cAlternatives_1_5_1.eContents().get(0);
		private final Keyword cMinuteKeyword_1_5_1_1 = (Keyword)cAlternatives_1_5_1.eContents().get(1);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Assignment cSecondAssignment_1_6_0 = (Assignment)cGroup_1_6.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_1_6_0_0 = (RuleCall)cSecondAssignment_1_6_0.eContents().get(0);
		private final Alternatives cAlternatives_1_6_1 = (Alternatives)cGroup_1_6.eContents().get(1);
		private final Keyword cSKeyword_1_6_1_0 = (Keyword)cAlternatives_1_6_1.eContents().get(0);
		private final Keyword cSecondKeyword_1_6_1_1 = (Keyword)cAlternatives_1_6_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralTimeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cMonthAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMonthNUMBERParserRuleCall_2_1_0_0 = (RuleCall)cMonthAssignment_2_1_0.eContents().get(0);
		private final Keyword cMonthKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cDayAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cDayNUMBERParserRuleCall_2_2_0_0 = (RuleCall)cDayAssignment_2_2_0.eContents().get(0);
		private final Keyword cDayKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cHourAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_2_3_0_0 = (RuleCall)cHourAssignment_2_3_0.eContents().get(0);
		private final Keyword cHourKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Assignment cMinuteAssignment_2_4_0 = (Assignment)cGroup_2_4.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_2_4_0_0 = (RuleCall)cMinuteAssignment_2_4_0.eContents().get(0);
		private final Alternatives cAlternatives_2_4_1 = (Alternatives)cGroup_2_4.eContents().get(1);
		private final Keyword cMKeyword_2_4_1_0 = (Keyword)cAlternatives_2_4_1.eContents().get(0);
		private final Keyword cMinuteKeyword_2_4_1_1 = (Keyword)cAlternatives_2_4_1.eContents().get(1);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Assignment cSecondAssignment_2_5_0 = (Assignment)cGroup_2_5.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_2_5_0_0 = (RuleCall)cSecondAssignment_2_5_0.eContents().get(0);
		private final Alternatives cAlternatives_2_5_1 = (Alternatives)cGroup_2_5.eContents().get(1);
		private final Keyword cSKeyword_2_5_1_0 = (Keyword)cAlternatives_2_5_1.eContents().get(0);
		private final Keyword cSecondKeyword_2_5_1_1 = (Keyword)cAlternatives_2_5_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLiteralTimeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cDayAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cDayNUMBERParserRuleCall_3_1_0_0 = (RuleCall)cDayAssignment_3_1_0.eContents().get(0);
		private final Keyword cDayKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cHourAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_3_2_0_0 = (RuleCall)cHourAssignment_3_2_0.eContents().get(0);
		private final Keyword cHourKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cMinuteAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_3_3_0_0 = (RuleCall)cMinuteAssignment_3_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_3_1 = (Alternatives)cGroup_3_3.eContents().get(1);
		private final Keyword cMKeyword_3_3_1_0 = (Keyword)cAlternatives_3_3_1.eContents().get(0);
		private final Keyword cMinuteKeyword_3_3_1_1 = (Keyword)cAlternatives_3_3_1.eContents().get(1);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Assignment cSecondAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_3_4_0_0 = (RuleCall)cSecondAssignment_3_4_0.eContents().get(0);
		private final Alternatives cAlternatives_3_4_1 = (Alternatives)cGroup_3_4.eContents().get(1);
		private final Keyword cSKeyword_3_4_1_0 = (Keyword)cAlternatives_3_4_1.eContents().get(0);
		private final Keyword cSecondKeyword_3_4_1_1 = (Keyword)cAlternatives_3_4_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLiteralTimeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cHourAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cHourNUMBERParserRuleCall_4_1_0_0 = (RuleCall)cHourAssignment_4_1_0.eContents().get(0);
		private final Keyword cHourKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cMinuteAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_4_2_0_0 = (RuleCall)cMinuteAssignment_4_2_0.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1 = (Alternatives)cGroup_4_2.eContents().get(1);
		private final Keyword cMKeyword_4_2_1_0 = (Keyword)cAlternatives_4_2_1.eContents().get(0);
		private final Keyword cMinuteKeyword_4_2_1_1 = (Keyword)cAlternatives_4_2_1.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cSecondAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_4_3_0_0 = (RuleCall)cSecondAssignment_4_3_0.eContents().get(0);
		private final Alternatives cAlternatives_4_3_1 = (Alternatives)cGroup_4_3.eContents().get(1);
		private final Keyword cSKeyword_4_3_1_0 = (Keyword)cAlternatives_4_3_1.eContents().get(0);
		private final Keyword cSecondKeyword_4_3_1_1 = (Keyword)cAlternatives_4_3_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cLiteralTimeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cMinuteAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cMinuteNUMBERParserRuleCall_5_1_0_0 = (RuleCall)cMinuteAssignment_5_1_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1 = (Alternatives)cGroup_5_1.eContents().get(1);
		private final Keyword cMKeyword_5_1_1_0 = (Keyword)cAlternatives_5_1_1.eContents().get(0);
		private final Keyword cMinuteKeyword_5_1_1_1 = (Keyword)cAlternatives_5_1_1.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Assignment cSecondAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_5_2_0_0 = (RuleCall)cSecondAssignment_5_2_0.eContents().get(0);
		private final Alternatives cAlternatives_5_2_1 = (Alternatives)cGroup_5_2.eContents().get(1);
		private final Keyword cSKeyword_5_2_1_0 = (Keyword)cAlternatives_5_2_1.eContents().get(0);
		private final Keyword cSecondKeyword_5_2_1_1 = (Keyword)cAlternatives_5_2_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cLiteralTimeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cSecondAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cSecondNUMBERParserRuleCall_6_1_0_0 = (RuleCall)cSecondAssignment_6_1_0.eContents().get(0);
		private final Alternatives cAlternatives_6_1_1 = (Alternatives)cGroup_6_1.eContents().get(1);
		private final Keyword cSKeyword_6_1_1_0 = (Keyword)cAlternatives_6_1_1.eContents().get(0);
		private final Keyword cSecondKeyword_6_1_1_1 = (Keyword)cAlternatives_6_1_1.eContents().get(1);
		
		//LiteralTime returns Expression:
		//	{LiteralTimeNow} "now" | {LiteralTime} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER
		//	"hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? | {LiteralTime} (month=NUMBER "month")
		//	(day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//	{LiteralTime} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
		//	"second"))? | {LiteralTime} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//	{LiteralTime} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))? | {LiteralTime} (second=NUMBER ("s" |
		//	"second"));
		public ParserRule getRule() { return rule; }

		//{LiteralTimeNow} "now" | {LiteralTime} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER
		//"hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? | {LiteralTime} (month=NUMBER "month")
		//(day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//{LiteralTime} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
		//"second"))? | {LiteralTime} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
		//{LiteralTime} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))? | {LiteralTime} (second=NUMBER ("s" |
		//"second"))
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LiteralTimeNow} "now"
		public Group getGroup_0() { return cGroup_0; }

		//{LiteralTimeNow}
		public Action getLiteralTimeNowAction_0_0() { return cLiteralTimeNowAction_0_0; }

		//"now"
		public Keyword getNowKeyword_0_1() { return cNowKeyword_0_1; }

		//{LiteralTime} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m"
		//| "minute"))? (second=NUMBER ("s" | "second"))?
		public Group getGroup_1() { return cGroup_1; }

		//{LiteralTime}
		public Action getLiteralTimeAction_1_0() { return cLiteralTimeAction_1_0; }

		//year=NUMBER "year"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//year=NUMBER
		public Assignment getYearAssignment_1_1_0() { return cYearAssignment_1_1_0; }

		//NUMBER
		public RuleCall getYearNUMBERParserRuleCall_1_1_0_0() { return cYearNUMBERParserRuleCall_1_1_0_0; }

		//"year"
		public Keyword getYearKeyword_1_1_1() { return cYearKeyword_1_1_1; }

		//(month=NUMBER "month")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//month=NUMBER
		public Assignment getMonthAssignment_1_2_0() { return cMonthAssignment_1_2_0; }

		//NUMBER
		public RuleCall getMonthNUMBERParserRuleCall_1_2_0_0() { return cMonthNUMBERParserRuleCall_1_2_0_0; }

		//"month"
		public Keyword getMonthKeyword_1_2_1() { return cMonthKeyword_1_2_1; }

		//(day=NUMBER "day")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//day=NUMBER
		public Assignment getDayAssignment_1_3_0() { return cDayAssignment_1_3_0; }

		//NUMBER
		public RuleCall getDayNUMBERParserRuleCall_1_3_0_0() { return cDayNUMBERParserRuleCall_1_3_0_0; }

		//"day"
		public Keyword getDayKeyword_1_3_1() { return cDayKeyword_1_3_1; }

		//(hour=NUMBER "hour")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//hour=NUMBER
		public Assignment getHourAssignment_1_4_0() { return cHourAssignment_1_4_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_1_4_0_0() { return cHourNUMBERParserRuleCall_1_4_0_0; }

		//"hour"
		public Keyword getHourKeyword_1_4_1() { return cHourKeyword_1_4_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_1_5_0() { return cMinuteAssignment_1_5_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_1_5_0_0() { return cMinuteNUMBERParserRuleCall_1_5_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_1_5_1() { return cAlternatives_1_5_1; }

		//"m"
		public Keyword getMKeyword_1_5_1_0() { return cMKeyword_1_5_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_1_5_1_1() { return cMinuteKeyword_1_5_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_1_6() { return cGroup_1_6; }

		//second=NUMBER
		public Assignment getSecondAssignment_1_6_0() { return cSecondAssignment_1_6_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_1_6_0_0() { return cSecondNUMBERParserRuleCall_1_6_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_1_6_1() { return cAlternatives_1_6_1; }

		//"s"
		public Keyword getSKeyword_1_6_1_0() { return cSKeyword_1_6_1_0; }

		//"second"
		public Keyword getSecondKeyword_1_6_1_1() { return cSecondKeyword_1_6_1_1; }

		//{LiteralTime} (month=NUMBER "month") (day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))?
		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_2() { return cGroup_2; }

		//{LiteralTime}
		public Action getLiteralTimeAction_2_0() { return cLiteralTimeAction_2_0; }

		//month=NUMBER "month"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//month=NUMBER
		public Assignment getMonthAssignment_2_1_0() { return cMonthAssignment_2_1_0; }

		//NUMBER
		public RuleCall getMonthNUMBERParserRuleCall_2_1_0_0() { return cMonthNUMBERParserRuleCall_2_1_0_0; }

		//"month"
		public Keyword getMonthKeyword_2_1_1() { return cMonthKeyword_2_1_1; }

		//(day=NUMBER "day")?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//day=NUMBER
		public Assignment getDayAssignment_2_2_0() { return cDayAssignment_2_2_0; }

		//NUMBER
		public RuleCall getDayNUMBERParserRuleCall_2_2_0_0() { return cDayNUMBERParserRuleCall_2_2_0_0; }

		//"day"
		public Keyword getDayKeyword_2_2_1() { return cDayKeyword_2_2_1; }

		//(hour=NUMBER "hour")?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//hour=NUMBER
		public Assignment getHourAssignment_2_3_0() { return cHourAssignment_2_3_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_2_3_0_0() { return cHourNUMBERParserRuleCall_2_3_0_0; }

		//"hour"
		public Keyword getHourKeyword_2_3_1() { return cHourKeyword_2_3_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_2_4_0() { return cMinuteAssignment_2_4_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_2_4_0_0() { return cMinuteNUMBERParserRuleCall_2_4_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_2_4_1() { return cAlternatives_2_4_1; }

		//"m"
		public Keyword getMKeyword_2_4_1_0() { return cMKeyword_2_4_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_2_4_1_1() { return cMinuteKeyword_2_4_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//second=NUMBER
		public Assignment getSecondAssignment_2_5_0() { return cSecondAssignment_2_5_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_2_5_0_0() { return cSecondNUMBERParserRuleCall_2_5_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_2_5_1() { return cAlternatives_2_5_1; }

		//"s"
		public Keyword getSKeyword_2_5_1_0() { return cSKeyword_2_5_1_0; }

		//"second"
		public Keyword getSecondKeyword_2_5_1_1() { return cSecondKeyword_2_5_1_1; }

		//{LiteralTime} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
		//"second"))?
		public Group getGroup_3() { return cGroup_3; }

		//{LiteralTime}
		public Action getLiteralTimeAction_3_0() { return cLiteralTimeAction_3_0; }

		//day=NUMBER "day"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//day=NUMBER
		public Assignment getDayAssignment_3_1_0() { return cDayAssignment_3_1_0; }

		//NUMBER
		public RuleCall getDayNUMBERParserRuleCall_3_1_0_0() { return cDayNUMBERParserRuleCall_3_1_0_0; }

		//"day"
		public Keyword getDayKeyword_3_1_1() { return cDayKeyword_3_1_1; }

		//(hour=NUMBER "hour")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//hour=NUMBER
		public Assignment getHourAssignment_3_2_0() { return cHourAssignment_3_2_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_3_2_0_0() { return cHourNUMBERParserRuleCall_3_2_0_0; }

		//"hour"
		public Keyword getHourKeyword_3_2_1() { return cHourKeyword_3_2_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_3_3_0() { return cMinuteAssignment_3_3_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_3_3_0_0() { return cMinuteNUMBERParserRuleCall_3_3_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_3_3_1() { return cAlternatives_3_3_1; }

		//"m"
		public Keyword getMKeyword_3_3_1_0() { return cMKeyword_3_3_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_3_3_1_1() { return cMinuteKeyword_3_3_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//second=NUMBER
		public Assignment getSecondAssignment_3_4_0() { return cSecondAssignment_3_4_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_3_4_0_0() { return cSecondNUMBERParserRuleCall_3_4_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_3_4_1() { return cAlternatives_3_4_1; }

		//"s"
		public Keyword getSKeyword_3_4_1_0() { return cSKeyword_3_4_1_0; }

		//"second"
		public Keyword getSecondKeyword_3_4_1_1() { return cSecondKeyword_3_4_1_1; }

		//{LiteralTime} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))?
		public Group getGroup_4() { return cGroup_4; }

		//{LiteralTime}
		public Action getLiteralTimeAction_4_0() { return cLiteralTimeAction_4_0; }

		//hour=NUMBER "hour"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//hour=NUMBER
		public Assignment getHourAssignment_4_1_0() { return cHourAssignment_4_1_0; }

		//NUMBER
		public RuleCall getHourNUMBERParserRuleCall_4_1_0_0() { return cHourNUMBERParserRuleCall_4_1_0_0; }

		//"hour"
		public Keyword getHourKeyword_4_1_1() { return cHourKeyword_4_1_1; }

		//(minute=NUMBER ("m" | "minute"))?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_4_2_0() { return cMinuteAssignment_4_2_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_4_2_0_0() { return cMinuteNUMBERParserRuleCall_4_2_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_4_2_1() { return cAlternatives_4_2_1; }

		//"m"
		public Keyword getMKeyword_4_2_1_0() { return cMKeyword_4_2_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_4_2_1_1() { return cMinuteKeyword_4_2_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//second=NUMBER
		public Assignment getSecondAssignment_4_3_0() { return cSecondAssignment_4_3_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_4_3_0_0() { return cSecondNUMBERParserRuleCall_4_3_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_4_3_1() { return cAlternatives_4_3_1; }

		//"s"
		public Keyword getSKeyword_4_3_1_0() { return cSKeyword_4_3_1_0; }

		//"second"
		public Keyword getSecondKeyword_4_3_1_1() { return cSecondKeyword_4_3_1_1; }

		//{LiteralTime} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))?
		public Group getGroup_5() { return cGroup_5; }

		//{LiteralTime}
		public Action getLiteralTimeAction_5_0() { return cLiteralTimeAction_5_0; }

		//minute=NUMBER ("m" | "minute")
		public Group getGroup_5_1() { return cGroup_5_1; }

		//minute=NUMBER
		public Assignment getMinuteAssignment_5_1_0() { return cMinuteAssignment_5_1_0; }

		//NUMBER
		public RuleCall getMinuteNUMBERParserRuleCall_5_1_0_0() { return cMinuteNUMBERParserRuleCall_5_1_0_0; }

		//"m" | "minute"
		public Alternatives getAlternatives_5_1_1() { return cAlternatives_5_1_1; }

		//"m"
		public Keyword getMKeyword_5_1_1_0() { return cMKeyword_5_1_1_0; }

		//"minute"
		public Keyword getMinuteKeyword_5_1_1_1() { return cMinuteKeyword_5_1_1_1; }

		//(second=NUMBER ("s" | "second"))?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//second=NUMBER
		public Assignment getSecondAssignment_5_2_0() { return cSecondAssignment_5_2_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_5_2_0_0() { return cSecondNUMBERParserRuleCall_5_2_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_5_2_1() { return cAlternatives_5_2_1; }

		//"s"
		public Keyword getSKeyword_5_2_1_0() { return cSKeyword_5_2_1_0; }

		//"second"
		public Keyword getSecondKeyword_5_2_1_1() { return cSecondKeyword_5_2_1_1; }

		//{LiteralTime} (second=NUMBER ("s" | "second"))
		public Group getGroup_6() { return cGroup_6; }

		//{LiteralTime}
		public Action getLiteralTimeAction_6_0() { return cLiteralTimeAction_6_0; }

		//second=NUMBER ("s" | "second")
		public Group getGroup_6_1() { return cGroup_6_1; }

		//second=NUMBER
		public Assignment getSecondAssignment_6_1_0() { return cSecondAssignment_6_1_0; }

		//NUMBER
		public RuleCall getSecondNUMBERParserRuleCall_6_1_0_0() { return cSecondNUMBERParserRuleCall_6_1_0_0; }

		//"s" | "second"
		public Alternatives getAlternatives_6_1_1() { return cAlternatives_6_1_1; }

		//"s"
		public Keyword getSKeyword_6_1_1_0() { return cSKeyword_6_1_1_0; }

		//"second"
		public Keyword getSecondKeyword_6_1_1_1() { return cSecondKeyword_6_1_1_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//// Terminals
		////Xtext Data types
		//NUMBER returns ecore::EDouble:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private LilModelElements pLilModel;
	private ImportStatementElements pImportStatement;
	private ActorTypeDefinitionElements pActorTypeDefinition;
	private ActorTypeElements pActorType;
	private ActorComponentDeclarationElements pActorComponentDeclaration;
	private DataTypeDefinitionElements pDataTypeDefinition;
	private DataTypeElements pDataType;
	private DataTypeSymbolDefinitionSetElements pDataTypeSymbolDefinitionSet;
	private DataTypeSymbolDefinitionSetElementElements pDataTypeSymbolDefinitionSetElement;
	private DataTypeNumberDefinitionSetElements pDataTypeNumberDefinitionSet;
	private DataTypeTextDefinitionSetElements pDataTypeTextDefinitionSet;
	private DataTypeTimeDefinitionSetElements pDataTypeTimeDefinitionSet;
	private DataTypeIdentifierDefinitionSetElements pDataTypeIdentifierDefinitionSet;
	private DataComponentDeclarationElements pDataComponentDeclaration;
	private InteractorTypeDefinitionElements pInteractorTypeDefinition;
	private InteractorTypeElements pInteractorType;
	private InteractorActorDeclarationElements pInteractorActorDeclaration;
	private InteractorComponentDeclarationElements pInteractorComponentDeclaration;
	private InteractorDataDeclarationElements pInteractorDataDeclaration;
	private InteractorActorAliasElements pInteractorActorAlias;
	private InteractorDataAliasElements pInteractorDataAlias;
	private InteractorEntityElements pInteractorEntity;
	private InteractorDataReceptionElements pInteractorDataReception;
	private InteractorDataEmissionElements pInteractorDataEmission;
	private InteractorBehaviorDeclarationElements pInteractorBehaviorDeclaration;
	private InteractorBehaviorCauseElements pInteractorBehaviorCause;
	private InteractorBehaviorEffectElements pInteractorBehaviorEffect;
	private ExpressionElements pExpression;
	private ExpressionOrElements pExpressionOr;
	private ExpressionOrOpElements pExpressionOrOp;
	private ExpressionAndElements pExpressionAnd;
	private ExpressionAndOpElements pExpressionAndOp;
	private ExpressionEqualityElements pExpressionEquality;
	private ExpressionEqualityOpElements pExpressionEqualityOp;
	private ExpressionCompareElements pExpressionCompare;
	private ExpressionCompareOpElements pExpressionCompareOp;
	private ExpressionOtherElements pExpressionOther;
	private ExpressionOtherOpElements pExpressionOtherOp;
	private ExpressionAdditionElements pExpressionAddition;
	private ExpressionAdditionOpElements pExpressionAdditionOp;
	private ExpressionMultiplicationElements pExpressionMultiplication;
	private ExpressionMultiplicationOpElements pExpressionMultiplicationOp;
	private ExpressionUnaryElements pExpressionUnary;
	private ExpressionUnaryOpElements pExpressionUnaryOp;
	private ExpressionPrimaryElements pExpressionPrimary;
	private ExpressionLiteralElements pExpressionLiteral;
	private ExpressionLiteralCollectionElements pExpressionLiteralCollection;
	private ExpressionLiteralSetElements pExpressionLiteralSet;
	private ExpressionLiteralListElements pExpressionLiteralList;
	private ExpressionParenthesizedElements pExpressionParenthesized;
	private ExpressionIfElements pExpressionIf;
	private ExpressionSwitchElements pExpressionSwitch;
	private ExpressionCaseElements pExpressionCase;
	private ExpressionForEachElements pExpressionForEach;
	private ExpressionFunctionCallElements pExpressionFunctionCall;
	private ExpressionFunctionCallBaseElements pExpressionFunctionCallBase;
	private LiteralBooleanElements pLiteralBoolean;
	private LiteralNullElements pLiteralNull;
	private LiteralNumberElements pLiteralNumber;
	private LiteralTextElements pLiteralText;
	private LiteralEnumElements pLiteralEnum;
	private LiteralTimeElements pLiteralTime;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private NUMBERElements pNUMBER;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public LilGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.crubier.lil.Lil".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Model
	//LilModel:
	//	"package" name=QualifiedName imports+=ImportStatement* (actorType+=ActorTypeDefinition | dataType+=DataTypeDefinition
	//	| interactorType+=InteractorTypeDefinition)*;
	public LilModelElements getLilModelAccess() {
		return (pLilModel != null) ? pLilModel : (pLilModel = new LilModelElements());
	}
	
	public ParserRule getLilModelRule() {
		return getLilModelAccess().getRule();
	}

	//ImportStatement:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Actor
	//ActorTypeDefinition:
	//	name=ID "actor" ":" component+=ActorComponentDeclaration*;
	public ActorTypeDefinitionElements getActorTypeDefinitionAccess() {
		return (pActorTypeDefinition != null) ? pActorTypeDefinition : (pActorTypeDefinition = new ActorTypeDefinitionElements());
	}
	
	public ParserRule getActorTypeDefinitionRule() {
		return getActorTypeDefinitionAccess().getRule();
	}

	//ActorType:
	//	{ActorTypeInput} "input" | {ActorTypeOutput} "output" | {ActorTypeCustom} definition=[ActorTypeDefinition];
	public ActorTypeElements getActorTypeAccess() {
		return (pActorType != null) ? pActorType : (pActorType = new ActorTypeElements());
	}
	
	public ParserRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}

	//ActorComponentDeclaration:
	//	name=ID ":" type=ActorType;
	public ActorComponentDeclarationElements getActorComponentDeclarationAccess() {
		return (pActorComponentDeclaration != null) ? pActorComponentDeclaration : (pActorComponentDeclaration = new ActorComponentDeclarationElements());
	}
	
	public ParserRule getActorComponentDeclarationRule() {
		return getActorComponentDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Data
	//DataTypeDefinition:
	//	{DataTypeDefinitionCompound} name=ID "data" ":" component+=DataComponentDeclaration* | {DataTypeDefinitionAlias}
	//	name=ID "data" ":" alias=DataType;
	public DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return (pDataTypeDefinition != null) ? pDataTypeDefinition : (pDataTypeDefinition = new DataTypeDefinitionElements());
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}

	//DataType:
	//	({DataTypeVoid} "void" | {DataTypeSymbol} "symbol" ("in" definitionSet=DataTypeSymbolDefinitionSet)? |
	//	{DataTypeNumber} "number" ("in" definitionSet=DataTypeNumberDefinitionSet)? | {DataTypeText} "text" ("in"
	//	definitionSet=DataTypeTextDefinitionSet)? | {DataTypeTime} "time" ("in" definitionSet=DataTypeTimeDefinitionSet)? |
	//	{DataTypeIdentifier} "identifier" ("in" definitionSet=DataTypeIdentifierDefinitionSet)? | {DataTypeCustom}
	//	definition=[DataTypeDefinition]) => ({DataTypeCollection.elementType=current} "collection")* =>
	//	({DataTypeSet.elementType=current} "set")* => ({DataTypeList.elementType=current} "list")* =>
	//	({DataTypeQueue.elementType=current} "queue")*;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//DataTypeSymbolDefinitionSet:
	//	"{" element+=DataTypeSymbolDefinitionSetElement ("," element+=DataTypeSymbolDefinitionSetElement)* "}";
	public DataTypeSymbolDefinitionSetElements getDataTypeSymbolDefinitionSetAccess() {
		return (pDataTypeSymbolDefinitionSet != null) ? pDataTypeSymbolDefinitionSet : (pDataTypeSymbolDefinitionSet = new DataTypeSymbolDefinitionSetElements());
	}
	
	public ParserRule getDataTypeSymbolDefinitionSetRule() {
		return getDataTypeSymbolDefinitionSetAccess().getRule();
	}

	//DataTypeSymbolDefinitionSetElement:
	//	{DataTypeSymbolDefinitionSetElement} "#" name=ID;
	public DataTypeSymbolDefinitionSetElementElements getDataTypeSymbolDefinitionSetElementAccess() {
		return (pDataTypeSymbolDefinitionSetElement != null) ? pDataTypeSymbolDefinitionSetElement : (pDataTypeSymbolDefinitionSetElement = new DataTypeSymbolDefinitionSetElementElements());
	}
	
	public ParserRule getDataTypeSymbolDefinitionSetElementRule() {
		return getDataTypeSymbolDefinitionSetElementAccess().getRule();
	}

	//DataTypeNumberDefinitionSet:
	//	{DataTypeNumberDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}" |
	//	{DataTypeNumberDefinitionSetInterval} "[" inf=LiteralNumber "," sup=LiteralNumber "]";
	public DataTypeNumberDefinitionSetElements getDataTypeNumberDefinitionSetAccess() {
		return (pDataTypeNumberDefinitionSet != null) ? pDataTypeNumberDefinitionSet : (pDataTypeNumberDefinitionSet = new DataTypeNumberDefinitionSetElements());
	}
	
	public ParserRule getDataTypeNumberDefinitionSetRule() {
		return getDataTypeNumberDefinitionSetAccess().getRule();
	}

	//DataTypeTextDefinitionSet:
	//	{DataTypeTextDefinitionSetSet} "{" element+=LiteralText ("," element+=LiteralText)* "}";
	public DataTypeTextDefinitionSetElements getDataTypeTextDefinitionSetAccess() {
		return (pDataTypeTextDefinitionSet != null) ? pDataTypeTextDefinitionSet : (pDataTypeTextDefinitionSet = new DataTypeTextDefinitionSetElements());
	}
	
	public ParserRule getDataTypeTextDefinitionSetRule() {
		return getDataTypeTextDefinitionSetAccess().getRule();
	}

	//DataTypeTimeDefinitionSet:
	//	{DataTypeTimeDefinitionSetSet} "{" element+=LiteralTime ("," element+=LiteralTime)* "}" |
	//	{DataTypeTimeDefinitionSetInterval} "[" inf=LiteralTime "," sup=LiteralTime "]";
	public DataTypeTimeDefinitionSetElements getDataTypeTimeDefinitionSetAccess() {
		return (pDataTypeTimeDefinitionSet != null) ? pDataTypeTimeDefinitionSet : (pDataTypeTimeDefinitionSet = new DataTypeTimeDefinitionSetElements());
	}
	
	public ParserRule getDataTypeTimeDefinitionSetRule() {
		return getDataTypeTimeDefinitionSetAccess().getRule();
	}

	//DataTypeIdentifierDefinitionSet:
	//	{DataTypeIdentifierDefinitionSetSet} "{" element+=LiteralNumber ("," element+=LiteralNumber)* "}";
	public DataTypeIdentifierDefinitionSetElements getDataTypeIdentifierDefinitionSetAccess() {
		return (pDataTypeIdentifierDefinitionSet != null) ? pDataTypeIdentifierDefinitionSet : (pDataTypeIdentifierDefinitionSet = new DataTypeIdentifierDefinitionSetElements());
	}
	
	public ParserRule getDataTypeIdentifierDefinitionSetRule() {
		return getDataTypeIdentifierDefinitionSetAccess().getRule();
	}

	//DataComponentDeclaration:
	//	name=ID ":" type=DataType;
	public DataComponentDeclarationElements getDataComponentDeclarationAccess() {
		return (pDataComponentDeclaration != null) ? pDataComponentDeclaration : (pDataComponentDeclaration = new DataComponentDeclarationElements());
	}
	
	public ParserRule getDataComponentDeclarationRule() {
		return getDataComponentDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor
	//InteractorTypeDefinition:
	//	name=ID "interactor" ":" (actor+=InteractorActorDeclaration | data+=InteractorDataDeclaration |
	//	component+=InteractorComponentDeclaration | behavior+=InteractorBehaviorDeclaration)*;
	public InteractorTypeDefinitionElements getInteractorTypeDefinitionAccess() {
		return (pInteractorTypeDefinition != null) ? pInteractorTypeDefinition : (pInteractorTypeDefinition = new InteractorTypeDefinitionElements());
	}
	
	public ParserRule getInteractorTypeDefinitionRule() {
		return getInteractorTypeDefinitionAccess().getRule();
	}

	//InteractorType:
	//	{InteractorTypeCustom} definition=[InteractorTypeDefinition];
	public InteractorTypeElements getInteractorTypeAccess() {
		return (pInteractorType != null) ? pInteractorType : (pInteractorType = new InteractorTypeElements());
	}
	
	public ParserRule getInteractorTypeRule() {
		return getInteractorTypeAccess().getRule();
	}

	//InteractorActorDeclaration returns InteractorEntityDeclaration:
	//	{InteractorActorDeclaration} (name=ID ":" type=ActorType "actor");
	public InteractorActorDeclarationElements getInteractorActorDeclarationAccess() {
		return (pInteractorActorDeclaration != null) ? pInteractorActorDeclaration : (pInteractorActorDeclaration = new InteractorActorDeclarationElements());
	}
	
	public ParserRule getInteractorActorDeclarationRule() {
		return getInteractorActorDeclarationAccess().getRule();
	}

	//InteractorComponentDeclaration returns InteractorEntityDeclaration:
	//	{InteractorComponentDeclaration} (name=ID ":" type=InteractorType "interactor" ("with"
	//	actors+=InteractorActorAlias)*);
	public InteractorComponentDeclarationElements getInteractorComponentDeclarationAccess() {
		return (pInteractorComponentDeclaration != null) ? pInteractorComponentDeclaration : (pInteractorComponentDeclaration = new InteractorComponentDeclarationElements());
	}
	
	public ParserRule getInteractorComponentDeclarationRule() {
		return getInteractorComponentDeclarationAccess().getRule();
	}

	////InteractorEntityDeclaration :
	////	InteractorComponentDeclaration | InteractorActorDeclaration
	////;
	//InteractorDataDeclaration:
	//	{InteractorDataDeclarationEvent} (name=ID ":" type=DataType "event" ("from" source=InteractorDataAlias)? ("to"
	//	destinations+=InteractorDataAlias)*) | {InteractorDataDeclarationFlow} (name=ID ":" type=DataType "flow" ("from"
	//	source=InteractorDataAlias)? ("to" destinations+=InteractorDataAlias)*) | {InteractorDataDeclarationConstant} (name=ID
	//	":" type=DataType "constant");
	public InteractorDataDeclarationElements getInteractorDataDeclarationAccess() {
		return (pInteractorDataDeclaration != null) ? pInteractorDataDeclaration : (pInteractorDataDeclaration = new InteractorDataDeclarationElements());
	}
	
	public ParserRule getInteractorDataDeclarationRule() {
		return getInteractorDataDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor Entities
	//InteractorActorAlias:
	//	actor=[InteractorActorDeclaration] "as" alias=[InteractorActorDeclaration];
	public InteractorActorAliasElements getInteractorActorAliasAccess() {
		return (pInteractorActorAlias != null) ? pInteractorActorAlias : (pInteractorActorAlias = new InteractorActorAliasElements());
	}
	
	public ParserRule getInteractorActorAliasRule() {
		return getInteractorActorAliasAccess().getRule();
	}

	//InteractorDataAlias:
	//	entity=InteractorEntity ("as" alias=[InteractorDataDeclaration])?;
	public InteractorDataAliasElements getInteractorDataAliasAccess() {
		return (pInteractorDataAlias != null) ? pInteractorDataAlias : (pInteractorDataAlias = new InteractorDataAliasElements());
	}
	
	public ParserRule getInteractorDataAliasRule() {
		return getInteractorDataAliasAccess().getRule();
	}

	//InteractorEntity:
	//	{InteractorEntityAny} "any" | {InteractorEntitySelf} "self" | {InteractorEntityOther} "other" |
	//	{InteractorEntityParent} "parent" | {InteractorEntityChild} "child" | {InteractorEntityAll} "all" |
	//	{InteractorEntityActors} "actors" | {InteractorEntitySpecific} entity=[InteractorEntityDeclaration];
	public InteractorEntityElements getInteractorEntityAccess() {
		return (pInteractorEntity != null) ? pInteractorEntity : (pInteractorEntity = new InteractorEntityElements());
	}
	
	public ParserRule getInteractorEntityRule() {
		return getInteractorEntityAccess().getRule();
	}

	////	|
	////	{InteractorEntityActor} actor=[InteractorActor] ;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor Data
	//InteractorDataReception:
	//	{InteractorDataReceptionInternal} data=[InteractorDataDeclaration] | {InteractorDataReceptionExternal}
	//	(data=[InteractorDataDeclaration] "from" source=InteractorDataAlias) | {InteractorDataReceptionInit} "init";
	public InteractorDataReceptionElements getInteractorDataReceptionAccess() {
		return (pInteractorDataReception != null) ? pInteractorDataReception : (pInteractorDataReception = new InteractorDataReceptionElements());
	}
	
	public ParserRule getInteractorDataReceptionRule() {
		return getInteractorDataReceptionAccess().getRule();
	}

	//InteractorDataEmission:
	//	{InteractorDataEmissionInternal} data=[InteractorDataDeclaration] | {InteractorDataEmissionExternal}
	//	(data=[InteractorDataDeclaration] "to" destination=InteractorDataAlias);
	public InteractorDataEmissionElements getInteractorDataEmissionAccess() {
		return (pInteractorDataEmission != null) ? pInteractorDataEmission : (pInteractorDataEmission = new InteractorDataEmissionElements());
	}
	
	public ParserRule getInteractorDataEmissionRule() {
		return getInteractorDataEmissionAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor Behaviors
	//InteractorBehaviorDeclaration:
	//	{InteractorBehaviorDeclaration} cause=InteractorBehaviorCause ":" effect+=InteractorBehaviorEffect+;
	public InteractorBehaviorDeclarationElements getInteractorBehaviorDeclarationAccess() {
		return (pInteractorBehaviorDeclaration != null) ? pInteractorBehaviorDeclaration : (pInteractorBehaviorDeclaration = new InteractorBehaviorDeclarationElements());
	}
	
	public ParserRule getInteractorBehaviorDeclarationRule() {
		return getInteractorBehaviorDeclarationAccess().getRule();
	}

	//InteractorBehaviorCause:
	//	{InteractorBehaviorCauseOn} "on" event=InteractorDataReception ("if" guard=Expression)? |
	//	{InteractorBehaviorCauseWhen} "when" condition=Expression ("if" guard=Expression)?;
	public InteractorBehaviorCauseElements getInteractorBehaviorCauseAccess() {
		return (pInteractorBehaviorCause != null) ? pInteractorBehaviorCause : (pInteractorBehaviorCause = new InteractorBehaviorCauseElements());
	}
	
	public ParserRule getInteractorBehaviorCauseRule() {
		return getInteractorBehaviorCauseAccess().getRule();
	}

	//InteractorBehaviorEffect:
	//	{InteractorBehaviorEffectAlways} ("always" target=InteractorDataEmission "=" value=Expression) |
	//	{InteractorBehaviorEffectSet} ("set" target=InteractorDataEmission "=" value=Expression) |
	//	{InteractorBehaviorEffectTrigger} ("trigger" target=InteractorDataEmission "=" value=Expression);
	public InteractorBehaviorEffectElements getInteractorBehaviorEffectAccess() {
		return (pInteractorBehaviorEffect != null) ? pInteractorBehaviorEffect : (pInteractorBehaviorEffect = new InteractorBehaviorEffectElements());
	}
	
	public ParserRule getInteractorBehaviorEffectRule() {
		return getInteractorBehaviorEffectAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Expressions
	////We do not use xbase because we only need a subset of it in order to be able to generate C code and in order to simplify the language
	////So we are going to construct the expressions language we need. It is similar to xbase on certain points, but still clearly different, semantically and syntaxically
	//Expression:
	//	ExpressionOr;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////Composition of expressions
	//ExpressionOr returns Expression:
	//	ExpressionAnd (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOrOp)
	//	rightOperand=ExpressionAnd)*;
	public ExpressionOrElements getExpressionOrAccess() {
		return (pExpressionOr != null) ? pExpressionOr : (pExpressionOr = new ExpressionOrElements());
	}
	
	public ParserRule getExpressionOrRule() {
		return getExpressionOrAccess().getRule();
	}

	//ExpressionOrOp:
	//	"or";
	public ExpressionOrOpElements getExpressionOrOpAccess() {
		return (pExpressionOrOp != null) ? pExpressionOrOp : (pExpressionOrOp = new ExpressionOrOpElements());
	}
	
	public ParserRule getExpressionOrOpRule() {
		return getExpressionOrOpAccess().getRule();
	}

	//ExpressionAnd returns Expression:
	//	ExpressionEquality (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAndOp)
	//	rightOperand=ExpressionEquality)*;
	public ExpressionAndElements getExpressionAndAccess() {
		return (pExpressionAnd != null) ? pExpressionAnd : (pExpressionAnd = new ExpressionAndElements());
	}
	
	public ParserRule getExpressionAndRule() {
		return getExpressionAndAccess().getRule();
	}

	//ExpressionAndOp:
	//	"and";
	public ExpressionAndOpElements getExpressionAndOpAccess() {
		return (pExpressionAndOp != null) ? pExpressionAndOp : (pExpressionAndOp = new ExpressionAndOpElements());
	}
	
	public ParserRule getExpressionAndOpRule() {
		return getExpressionAndOpAccess().getRule();
	}

	//ExpressionEquality returns Expression:
	//	ExpressionCompare (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionEqualityOp)
	//	rightOperand=ExpressionCompare)*;
	public ExpressionEqualityElements getExpressionEqualityAccess() {
		return (pExpressionEquality != null) ? pExpressionEquality : (pExpressionEquality = new ExpressionEqualityElements());
	}
	
	public ParserRule getExpressionEqualityRule() {
		return getExpressionEqualityAccess().getRule();
	}

	//ExpressionEqualityOp:
	//	"==" | "!=";
	public ExpressionEqualityOpElements getExpressionEqualityOpAccess() {
		return (pExpressionEqualityOp != null) ? pExpressionEqualityOp : (pExpressionEqualityOp = new ExpressionEqualityOpElements());
	}
	
	public ParserRule getExpressionEqualityOpRule() {
		return getExpressionEqualityOpAccess().getRule();
	}

	//ExpressionCompare returns Expression:
	//	ExpressionOther (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionCompareOp)
	//	rightOperand=ExpressionOther)*;
	public ExpressionCompareElements getExpressionCompareAccess() {
		return (pExpressionCompare != null) ? pExpressionCompare : (pExpressionCompare = new ExpressionCompareElements());
	}
	
	public ParserRule getExpressionCompareRule() {
		return getExpressionCompareAccess().getRule();
	}

	//ExpressionCompareOp:
	//	"<=" | ">=" | "<" | ">";
	public ExpressionCompareOpElements getExpressionCompareOpAccess() {
		return (pExpressionCompareOp != null) ? pExpressionCompareOp : (pExpressionCompareOp = new ExpressionCompareOpElements());
	}
	
	public ParserRule getExpressionCompareOpRule() {
		return getExpressionCompareOpAccess().getRule();
	}

	//ExpressionOther returns Expression:
	//	ExpressionAddition (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionOtherOp)
	//	rightOperand=ExpressionAddition)*;
	public ExpressionOtherElements getExpressionOtherAccess() {
		return (pExpressionOther != null) ? pExpressionOther : (pExpressionOther = new ExpressionOtherElements());
	}
	
	public ParserRule getExpressionOtherRule() {
		return getExpressionOtherAccess().getRule();
	}

	////String join and groovy elvis operator for null checking
	//ExpressionOtherOp:
	//	"<>" | "?:";
	public ExpressionOtherOpElements getExpressionOtherOpAccess() {
		return (pExpressionOtherOp != null) ? pExpressionOtherOp : (pExpressionOtherOp = new ExpressionOtherOpElements());
	}
	
	public ParserRule getExpressionOtherOpRule() {
		return getExpressionOtherOpAccess().getRule();
	}

	//ExpressionAddition returns Expression:
	//	ExpressionMultiplication (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionAdditionOp)
	//	rightOperand=ExpressionMultiplication)*;
	public ExpressionAdditionElements getExpressionAdditionAccess() {
		return (pExpressionAddition != null) ? pExpressionAddition : (pExpressionAddition = new ExpressionAdditionElements());
	}
	
	public ParserRule getExpressionAdditionRule() {
		return getExpressionAdditionAccess().getRule();
	}

	//ExpressionAdditionOp:
	//	"+" | "-";
	public ExpressionAdditionOpElements getExpressionAdditionOpAccess() {
		return (pExpressionAdditionOp != null) ? pExpressionAdditionOp : (pExpressionAdditionOp = new ExpressionAdditionOpElements());
	}
	
	public ParserRule getExpressionAdditionOpRule() {
		return getExpressionAdditionOpAccess().getRule();
	}

	//ExpressionMultiplication returns Expression:
	//	ExpressionUnary (=> ({ExpressionBinaryOperation.leftOperand=current} feature=ExpressionMultiplicationOp)
	//	rightOperand=ExpressionUnary)*;
	public ExpressionMultiplicationElements getExpressionMultiplicationAccess() {
		return (pExpressionMultiplication != null) ? pExpressionMultiplication : (pExpressionMultiplication = new ExpressionMultiplicationElements());
	}
	
	public ParserRule getExpressionMultiplicationRule() {
		return getExpressionMultiplicationAccess().getRule();
	}

	//ExpressionMultiplicationOp:
	//	"*" | "/" | "%";
	public ExpressionMultiplicationOpElements getExpressionMultiplicationOpAccess() {
		return (pExpressionMultiplicationOp != null) ? pExpressionMultiplicationOp : (pExpressionMultiplicationOp = new ExpressionMultiplicationOpElements());
	}
	
	public ParserRule getExpressionMultiplicationOpRule() {
		return getExpressionMultiplicationOpAccess().getRule();
	}

	//ExpressionUnary returns Expression:
	//	{UnaryOperation} feature=ExpressionUnaryOp operand=ExpressionPrimary | ExpressionPrimary;
	public ExpressionUnaryElements getExpressionUnaryAccess() {
		return (pExpressionUnary != null) ? pExpressionUnary : (pExpressionUnary = new ExpressionUnaryElements());
	}
	
	public ParserRule getExpressionUnaryRule() {
		return getExpressionUnaryAccess().getRule();
	}

	//ExpressionUnaryOp:
	//	"!" | "-" | "+";
	public ExpressionUnaryOpElements getExpressionUnaryOpAccess() {
		return (pExpressionUnaryOp != null) ? pExpressionUnaryOp : (pExpressionUnaryOp = new ExpressionUnaryOpElements());
	}
	
	public ParserRule getExpressionUnaryOpRule() {
		return getExpressionUnaryOpAccess().getRule();
	}

	//ExpressionPrimary returns Expression:
	//	ExpressionSwitch | ExpressionIf | ExpressionLiteral | ExpressionForEach | ExpressionFunctionCall |
	//	ExpressionParenthesized;
	public ExpressionPrimaryElements getExpressionPrimaryAccess() {
		return (pExpressionPrimary != null) ? pExpressionPrimary : (pExpressionPrimary = new ExpressionPrimaryElements());
	}
	
	public ParserRule getExpressionPrimaryRule() {
		return getExpressionPrimaryAccess().getRule();
	}

	//ExpressionLiteral returns Expression:
	//	ExpressionLiteralCollection | LiteralBoolean | LiteralNumber | LiteralNull | LiteralText | LiteralTime | LiteralEnum |
	//	InteractorDataReception;
	public ExpressionLiteralElements getExpressionLiteralAccess() {
		return (pExpressionLiteral != null) ? pExpressionLiteral : (pExpressionLiteral = new ExpressionLiteralElements());
	}
	
	public ParserRule getExpressionLiteralRule() {
		return getExpressionLiteralAccess().getRule();
	}

	////	| {LiteralData} data=[InteractorData];
	//ExpressionLiteralCollection:
	//	ExpressionLiteralSet | ExpressionLiteralList;
	public ExpressionLiteralCollectionElements getExpressionLiteralCollectionAccess() {
		return (pExpressionLiteralCollection != null) ? pExpressionLiteralCollection : (pExpressionLiteralCollection = new ExpressionLiteralCollectionElements());
	}
	
	public ParserRule getExpressionLiteralCollectionRule() {
		return getExpressionLiteralCollectionAccess().getRule();
	}

	//ExpressionLiteralSet:
	//	{ExpressionLiteralSet} "{" (elements+=Expression ("," elements+=Expression)*)? "}";
	public ExpressionLiteralSetElements getExpressionLiteralSetAccess() {
		return (pExpressionLiteralSet != null) ? pExpressionLiteralSet : (pExpressionLiteralSet = new ExpressionLiteralSetElements());
	}
	
	public ParserRule getExpressionLiteralSetRule() {
		return getExpressionLiteralSetAccess().getRule();
	}

	//ExpressionLiteralList:
	//	{ExpressionLiteralList} "[" (elements+=Expression ("," elements+=Expression)*)? "]";
	public ExpressionLiteralListElements getExpressionLiteralListAccess() {
		return (pExpressionLiteralList != null) ? pExpressionLiteralList : (pExpressionLiteralList = new ExpressionLiteralListElements());
	}
	
	public ParserRule getExpressionLiteralListRule() {
		return getExpressionLiteralListAccess().getRule();
	}

	//ExpressionParenthesized returns Expression:
	//	"(" Expression ")";
	public ExpressionParenthesizedElements getExpressionParenthesizedAccess() {
		return (pExpressionParenthesized != null) ? pExpressionParenthesized : (pExpressionParenthesized = new ExpressionParenthesizedElements());
	}
	
	public ParserRule getExpressionParenthesizedRule() {
		return getExpressionParenthesizedAccess().getRule();
	}

	//ExpressionIf returns Expression:
	//	{ExpressionIf} "if" "(" if=Expression => ")" then=Expression ("else" else=Expression);
	public ExpressionIfElements getExpressionIfAccess() {
		return (pExpressionIf != null) ? pExpressionIf : (pExpressionIf = new ExpressionIfElements());
	}
	
	public ParserRule getExpressionIfRule() {
		return getExpressionIfAccess().getRule();
	}

	//ExpressionSwitch returns Expression:
	//	{ExpressionSwitch} "switch" "(" switch=Expression => ")" => case+=ExpressionCase+ ("default" ":" default=Expression)?;
	public ExpressionSwitchElements getExpressionSwitchAccess() {
		return (pExpressionSwitch != null) ? pExpressionSwitch : (pExpressionSwitch = new ExpressionSwitchElements());
	}
	
	public ParserRule getExpressionSwitchRule() {
		return getExpressionSwitchAccess().getRule();
	}

	//ExpressionCase:
	//	"case" case=Expression ":" then=Expression;
	public ExpressionCaseElements getExpressionCaseAccess() {
		return (pExpressionCase != null) ? pExpressionCase : (pExpressionCase = new ExpressionCaseElements());
	}
	
	public ParserRule getExpressionCaseRule() {
		return getExpressionCaseAccess().getRule();
	}

	//ExpressionForEach returns Expression:
	//	{ExpressionForEach} "for" "each" "(" forExpression=Expression ")" eachExpression=Expression;
	public ExpressionForEachElements getExpressionForEachAccess() {
		return (pExpressionForEach != null) ? pExpressionForEach : (pExpressionForEach = new ExpressionForEachElements());
	}
	
	public ParserRule getExpressionForEachRule() {
		return getExpressionForEachAccess().getRule();
	}

	//ExpressionFunctionCall returns Expression:
	//	{ExpressionFunctionCall} function=ExpressionFunctionCallBase "(" arguments+=Expression? ("," arguments+=Expression)*
	//	")";
	public ExpressionFunctionCallElements getExpressionFunctionCallAccess() {
		return (pExpressionFunctionCall != null) ? pExpressionFunctionCall : (pExpressionFunctionCall = new ExpressionFunctionCallElements());
	}
	
	public ParserRule getExpressionFunctionCallRule() {
		return getExpressionFunctionCallAccess().getRule();
	}

	////Insprired by standard libraries of C, Java, Javascript
	//ExpressionFunctionCallBase:
	//	"math.abs" | "math.acos" | "math.acosh" | "math.asin" | "math.asinh" | "math.atan" | "math.atanh" | "math.atan2" |
	//	"math.ceil" | "math.clip" | "math.cos" | "math.cosh" | "math.exp" | "math.floor" | "math.fround" | "math.hypot" |
	//	"math.log" | "math.log10" | "math.log2" | "math.max" | "math.min" | "math.pow" | "math.random" | "math.round" |
	//	"math.sign" | "math.sin" | "math.sinh" | "math.sqrt" | "math.tan" | "math.tanh" | "math.trunc";
	public ExpressionFunctionCallBaseElements getExpressionFunctionCallBaseAccess() {
		return (pExpressionFunctionCallBase != null) ? pExpressionFunctionCallBase : (pExpressionFunctionCallBase = new ExpressionFunctionCallBaseElements());
	}
	
	public ParserRule getExpressionFunctionCallBaseRule() {
		return getExpressionFunctionCallBaseAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Literals
	//LiteralBoolean returns Expression:
	//	{LiteralBoolean} ("false" | isTrue?="true");
	public LiteralBooleanElements getLiteralBooleanAccess() {
		return (pLiteralBoolean != null) ? pLiteralBoolean : (pLiteralBoolean = new LiteralBooleanElements());
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}

	//LiteralNull returns Expression:
	//	{LiteralNull} "null";
	public LiteralNullElements getLiteralNullAccess() {
		return (pLiteralNull != null) ? pLiteralNull : (pLiteralNull = new LiteralNullElements());
	}
	
	public ParserRule getLiteralNullRule() {
		return getLiteralNullAccess().getRule();
	}

	//LiteralNumber returns Expression:
	//	{LiteralNumber} value=NUMBER;
	public LiteralNumberElements getLiteralNumberAccess() {
		return (pLiteralNumber != null) ? pLiteralNumber : (pLiteralNumber = new LiteralNumberElements());
	}
	
	public ParserRule getLiteralNumberRule() {
		return getLiteralNumberAccess().getRule();
	}

	//LiteralText returns Expression:
	//	{LiteralText} value=STRING;
	public LiteralTextElements getLiteralTextAccess() {
		return (pLiteralText != null) ? pLiteralText : (pLiteralText = new LiteralTextElements());
	}
	
	public ParserRule getLiteralTextRule() {
		return getLiteralTextAccess().getRule();
	}

	//LiteralEnum returns Expression:
	//	{LiteralEnum} "#" value=[DataTypeSymbolDefinitionSetElement];
	public LiteralEnumElements getLiteralEnumAccess() {
		return (pLiteralEnum != null) ? pLiteralEnum : (pLiteralEnum = new LiteralEnumElements());
	}
	
	public ParserRule getLiteralEnumRule() {
		return getLiteralEnumAccess().getRule();
	}

	//LiteralTime returns Expression:
	//	{LiteralTimeNow} "now" | {LiteralTime} (year=NUMBER "year") (month=NUMBER "month")? (day=NUMBER "day")? (hour=NUMBER
	//	"hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? | {LiteralTime} (month=NUMBER "month")
	//	(day=NUMBER "day")? (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
	//	{LiteralTime} (day=NUMBER "day") (hour=NUMBER "hour")? (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" |
	//	"second"))? | {LiteralTime} (hour=NUMBER "hour") (minute=NUMBER ("m" | "minute"))? (second=NUMBER ("s" | "second"))? |
	//	{LiteralTime} (minute=NUMBER ("m" | "minute")) (second=NUMBER ("s" | "second"))? | {LiteralTime} (second=NUMBER ("s" |
	//	"second"));
	public LiteralTimeElements getLiteralTimeAccess() {
		return (pLiteralTime != null) ? pLiteralTime : (pLiteralTime = new LiteralTimeElements());
	}
	
	public ParserRule getLiteralTimeRule() {
		return getLiteralTimeAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Terminals
	////Xtext Data types
	//NUMBER returns ecore::EDouble:
	//	INT ("." INT)?;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//// Terminals
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
