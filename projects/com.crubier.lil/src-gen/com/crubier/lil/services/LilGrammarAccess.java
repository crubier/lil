/*
* generated by Xtext
*/
package com.crubier.lil.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class LilGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LilModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LilModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInteractorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInteractorsInteractorParserRuleCall_0_0 = (RuleCall)cInteractorsAssignment_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypesDataTypeCompoundParserRuleCall_1_0 = (RuleCall)cDataTypesAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Model
		//LilModel:
		//	(interactors+=Interactor | dataTypes+=DataTypeCompound)*;
		public ParserRule getRule() { return rule; }

		//(interactors+=Interactor | dataTypes+=DataTypeCompound)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//interactors+=Interactor
		public Assignment getInteractorsAssignment_0() { return cInteractorsAssignment_0; }

		//Interactor
		public RuleCall getInteractorsInteractorParserRuleCall_0_0() { return cInteractorsInteractorParserRuleCall_0_0; }

		//dataTypes+=DataTypeCompound
		public Assignment getDataTypesAssignment_1() { return cDataTypesAssignment_1; }

		//DataTypeCompound
		public RuleCall getDataTypesDataTypeCompoundParserRuleCall_1_0() { return cDataTypesDataTypeCompoundParserRuleCall_1_0; }
	}

	public class InteractorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0_0 = (RuleCall)cEntitiesAssignment_3_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Assignment cBehaviorsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_3_2_0 = (RuleCall)cBehaviorsAssignment_3_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor
		//Interactor:
		//	"interactor" name=ID ":" (entities+=Entity | signals+=Signal | behaviors+=Behavior)*;
		public ParserRule getRule() { return rule; }

		//"interactor" name=ID ":" (entities+=Entity | signals+=Signal | behaviors+=Behavior)*
		public Group getGroup() { return cGroup; }

		//"interactor"
		public Keyword getInteractorKeyword_0() { return cInteractorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(entities+=Entity | signals+=Signal | behaviors+=Behavior)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_3_0() { return cEntitiesAssignment_3_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0_0() { return cEntitiesEntityParserRuleCall_3_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_0() { return cSignalsSignalParserRuleCall_3_1_0; }

		//behaviors+=Behavior
		public Assignment getBehaviorsAssignment_3_2() { return cBehaviorsAssignment_3_2; }

		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_3_2_0() { return cBehaviorsBehaviorParserRuleCall_3_2_0; }
	}

	public class AccessibleEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessibleEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenericAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGenericGenericEntityParserRuleCall_0_0 = (RuleCall)cGenericAssignment_0.eContents().get(0);
		private final Assignment cSpecificAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cSpecificEntityCrossReference_1_0 = (CrossReference)cSpecificAssignment_1.eContents().get(0);
		private final RuleCall cSpecificEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cSpecificEntityCrossReference_1_0.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Entities
		//AccessibleEntity:
		//	generic=GenericEntity | specific=[Entity];
		public ParserRule getRule() { return rule; }

		//generic=GenericEntity | specific=[Entity]
		public Alternatives getAlternatives() { return cAlternatives; }

		//generic=GenericEntity
		public Assignment getGenericAssignment_0() { return cGenericAssignment_0; }

		//GenericEntity
		public RuleCall getGenericGenericEntityParserRuleCall_0_0() { return cGenericGenericEntityParserRuleCall_0_0; }

		//specific=[Entity]
		public Assignment getSpecificAssignment_1() { return cSpecificAssignment_1; }

		//[Entity]
		public CrossReference getSpecificEntityCrossReference_1_0() { return cSpecificEntityCrossReference_1_0; }

		//ID
		public RuleCall getSpecificEntityIDTerminalRuleCall_1_0_1() { return cSpecificEntityIDTerminalRuleCall_1_0_1; }
	}

	public class GenericEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAnyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOtherKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cParentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cChildKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAllKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cActorsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//GenericEntity:
		//	"any" | "self" | "other" | "parent" | "child" | "all" | "actors";
		public ParserRule getRule() { return rule; }

		//"any" | "self" | "other" | "parent" | "child" | "all" | "actors"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"any"
		public Keyword getAnyKeyword_0() { return cAnyKeyword_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }

		//"other"
		public Keyword getOtherKeyword_2() { return cOtherKeyword_2; }

		//"parent"
		public Keyword getParentKeyword_3() { return cParentKeyword_3; }

		//"child"
		public Keyword getChildKeyword_4() { return cChildKeyword_4; }

		//"all"
		public Keyword getAllKeyword_5() { return cAllKeyword_5; }

		//"actors"
		public Keyword getActorsKeyword_6() { return cActorsKeyword_6; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	Actor | Component;
		public ParserRule getRule() { return rule; }

		//Actor | Component
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Actor:
		//	name=ID ":" "actor";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "actor"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"actor"
		public Keyword getActorKeyword_2() { return cActorKeyword_2; }
	}

	public class ActorAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceActorCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceActorCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAliasActorCrossReference_2_0 = (CrossReference)cAliasAssignment_2.eContents().get(0);
		private final RuleCall cAliasActorIDTerminalRuleCall_2_0_1 = (RuleCall)cAliasActorCrossReference_2_0.eContents().get(1);
		
		//ActorAlias:
		//	source=[Actor] "as" alias=[Actor];
		public ParserRule getRule() { return rule; }

		//source=[Actor] "as" alias=[Actor]
		public Group getGroup() { return cGroup; }

		//source=[Actor]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_0_0() { return cSourceActorCrossReference_0_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_0_0_1() { return cSourceActorIDTerminalRuleCall_0_0_1; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//alias=[Actor]
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//[Actor]
		public CrossReference getAliasActorCrossReference_2_0() { return cAliasActorCrossReference_2_0; }

		//ID
		public RuleCall getAliasActorIDTerminalRuleCall_2_0_1() { return cAliasActorIDTerminalRuleCall_2_0_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInteractorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInteractorInteractorCrossReference_2_0 = (CrossReference)cInteractorAssignment_2.eContents().get(0);
		private final RuleCall cInteractorInteractorIDTerminalRuleCall_2_0_1 = (RuleCall)cInteractorInteractorCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorsActorAliasParserRuleCall_3_1_0 = (RuleCall)cActorsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cActorsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cActorsActorAliasParserRuleCall_3_2_1_0 = (RuleCall)cActorsAssignment_3_2_1.eContents().get(0);
		
		//Component:
		//	name=ID ":" interactor=[Interactor] ("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" interactor=[Interactor] ("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//interactor=[Interactor]
		public Assignment getInteractorAssignment_2() { return cInteractorAssignment_2; }

		//[Interactor]
		public CrossReference getInteractorInteractorCrossReference_2_0() { return cInteractorInteractorCrossReference_2_0; }

		//ID
		public RuleCall getInteractorInteractorIDTerminalRuleCall_2_0_1() { return cInteractorInteractorIDTerminalRuleCall_2_0_1; }

		//("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//actors+=ActorAlias
		public Assignment getActorsAssignment_3_1() { return cActorsAssignment_3_1; }

		//ActorAlias
		public RuleCall getActorsActorAliasParserRuleCall_3_1_0() { return cActorsActorAliasParserRuleCall_3_1_0; }

		//("," actors+=ActorAlias)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//actors+=ActorAlias
		public Assignment getActorsAssignment_3_2_1() { return cActorsAssignment_3_2_1; }

		//ActorAlias
		public RuleCall getActorsActorAliasParserRuleCall_3_2_1_0() { return cActorsActorAliasParserRuleCall_3_2_1_0; }
	}

	public class SignalReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalReception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstanceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cInstanceSignalCrossReference_0_0_0 = (CrossReference)cInstanceAssignment_0_0.eContents().get(0);
		private final RuleCall cInstanceSignalIDTerminalRuleCall_0_0_0_1 = (RuleCall)cInstanceSignalCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFromKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSourceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSourceSignalAliasParserRuleCall_0_1_1_0 = (RuleCall)cSourceAssignment_0_1_1.eContents().get(0);
		private final Assignment cInitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cInitInitKeyword_1_0 = (Keyword)cInitAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Signals
		//SignalReception:
		//	instance=[Signal] ("from" source=SignalAlias)? | init?="init";
		public ParserRule getRule() { return rule; }

		//instance=[Signal] ("from" source=SignalAlias)? | init?="init"
		public Alternatives getAlternatives() { return cAlternatives; }

		//instance=[Signal] ("from" source=SignalAlias)?
		public Group getGroup_0() { return cGroup_0; }

		//instance=[Signal]
		public Assignment getInstanceAssignment_0_0() { return cInstanceAssignment_0_0; }

		//[Signal]
		public CrossReference getInstanceSignalCrossReference_0_0_0() { return cInstanceSignalCrossReference_0_0_0; }

		//ID
		public RuleCall getInstanceSignalIDTerminalRuleCall_0_0_0_1() { return cInstanceSignalIDTerminalRuleCall_0_0_0_1; }

		//("from" source=SignalAlias)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"from"
		public Keyword getFromKeyword_0_1_0() { return cFromKeyword_0_1_0; }

		//source=SignalAlias
		public Assignment getSourceAssignment_0_1_1() { return cSourceAssignment_0_1_1; }

		//SignalAlias
		public RuleCall getSourceSignalAliasParserRuleCall_0_1_1_0() { return cSourceSignalAliasParserRuleCall_0_1_1_0; }

		//init?="init"
		public Assignment getInitAssignment_1() { return cInitAssignment_1; }

		//"init"
		public Keyword getInitInitKeyword_1_0() { return cInitInitKeyword_1_0; }
	}

	public class SignalEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalEmission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceSignalCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceSignalCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDestinationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDestinationSignalAliasParserRuleCall_1_1_0 = (RuleCall)cDestinationAssignment_1_1.eContents().get(0);
		
		//SignalEmission:
		//	instance=[Signal] ("to" destination=SignalAlias)?;
		public ParserRule getRule() { return rule; }

		//instance=[Signal] ("to" destination=SignalAlias)?
		public Group getGroup() { return cGroup; }

		//instance=[Signal]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[Signal]
		public CrossReference getInstanceSignalCrossReference_0_0() { return cInstanceSignalCrossReference_0_0; }

		//ID
		public RuleCall getInstanceSignalIDTerminalRuleCall_0_0_1() { return cInstanceSignalIDTerminalRuleCall_0_0_1; }

		//("to" destination=SignalAlias)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//destination=SignalAlias
		public Assignment getDestinationAssignment_1_1() { return cDestinationAssignment_1_1; }

		//SignalAlias
		public RuleCall getDestinationSignalAliasParserRuleCall_1_1_0() { return cDestinationSignalAliasParserRuleCall_1_1_0; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefinitionSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefinitionSetDefinitionSetParserRuleCall_3_1_0 = (RuleCall)cDefinitionSetAssignment_3_1.eContents().get(0);
		private final Assignment cModeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModeSignalModeParserRuleCall_4_0 = (RuleCall)cModeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFromKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSourceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSourceSignalAliasParserRuleCall_5_1_0 = (RuleCall)cSourceAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDestinationsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDestinationsSignalAliasParserRuleCall_6_1_0 = (RuleCall)cDestinationsAssignment_6_1.eContents().get(0);
		
		//Signal:
		//	name=ID ":" type=DataType ("in" definitionSet=DefinitionSet)? mode=SignalMode ("from" source=SignalAlias)? ("to"
		//	destinations+=SignalAlias)*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=DataType ("in" definitionSet=DefinitionSet)? mode=SignalMode ("from" source=SignalAlias)? ("to"
		//destinations+=SignalAlias)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }

		//("in" definitionSet=DefinitionSet)?
		public Group getGroup_3() { return cGroup_3; }

		//"in"
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }

		//definitionSet=DefinitionSet
		public Assignment getDefinitionSetAssignment_3_1() { return cDefinitionSetAssignment_3_1; }

		//DefinitionSet
		public RuleCall getDefinitionSetDefinitionSetParserRuleCall_3_1_0() { return cDefinitionSetDefinitionSetParserRuleCall_3_1_0; }

		//mode=SignalMode
		public Assignment getModeAssignment_4() { return cModeAssignment_4; }

		//SignalMode
		public RuleCall getModeSignalModeParserRuleCall_4_0() { return cModeSignalModeParserRuleCall_4_0; }

		//("from" source=SignalAlias)?
		public Group getGroup_5() { return cGroup_5; }

		//"from"
		public Keyword getFromKeyword_5_0() { return cFromKeyword_5_0; }

		//source=SignalAlias
		public Assignment getSourceAssignment_5_1() { return cSourceAssignment_5_1; }

		//SignalAlias
		public RuleCall getSourceSignalAliasParserRuleCall_5_1_0() { return cSourceSignalAliasParserRuleCall_5_1_0; }

		//("to" destinations+=SignalAlias)*
		public Group getGroup_6() { return cGroup_6; }

		//"to"
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//destinations+=SignalAlias
		public Assignment getDestinationsAssignment_6_1() { return cDestinationsAssignment_6_1; }

		//SignalAlias
		public RuleCall getDestinationsSignalAliasParserRuleCall_6_1_0() { return cDestinationsSignalAliasParserRuleCall_6_1_0; }
	}

	public class DefinitionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsXEnumElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsXEnumElementParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefinitionSet:
		//	"{" elements+=XEnumElement ("," elements+=XEnumElement)* "}";
		public ParserRule getRule() { return rule; }

		//"{" elements+=XEnumElement ("," elements+=XEnumElement)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//elements+=XEnumElement
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//XEnumElement
		public RuleCall getElementsXEnumElementParserRuleCall_1_0() { return cElementsXEnumElementParserRuleCall_1_0; }

		//("," elements+=XEnumElement)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=XEnumElement
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//XEnumElement
		public RuleCall getElementsXEnumElementParserRuleCall_2_1_0() { return cElementsXEnumElementParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SignalAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceAccessibleEntityParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAliasSignalCrossReference_1_1_0 = (CrossReference)cAliasAssignment_1_1.eContents().get(0);
		private final RuleCall cAliasSignalIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAliasSignalCrossReference_1_1_0.eContents().get(1);
		
		//SignalAlias:
		//	source=AccessibleEntity ("as" alias=[Signal])?;
		public ParserRule getRule() { return rule; }

		//source=AccessibleEntity ("as" alias=[Signal])?
		public Group getGroup() { return cGroup; }

		//source=AccessibleEntity
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//AccessibleEntity
		public RuleCall getSourceAccessibleEntityParserRuleCall_0_0() { return cSourceAccessibleEntityParserRuleCall_0_0; }

		//("as" alias=[Signal])?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=[Signal]
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//[Signal]
		public CrossReference getAliasSignalCrossReference_1_1_0() { return cAliasSignalCrossReference_1_1_0; }

		//ID
		public RuleCall getAliasSignalIDTerminalRuleCall_1_1_0_1() { return cAliasSignalIDTerminalRuleCall_1_1_0_1; }
	}

	public class SignalModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SignalMode:
		//	"event" | "flow";
		public ParserRule getRule() { return rule; }

		//"event" | "flow"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//"flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBaseDataTypeBaseParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cCompoundAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCompoundDataTypeCompoundCrossReference_1_0 = (CrossReference)cCompoundAssignment_1.eContents().get(0);
		private final RuleCall cCompoundDataTypeCompoundIDTerminalRuleCall_1_0_1 = (RuleCall)cCompoundDataTypeCompoundCrossReference_1_0.eContents().get(1);
		
		//DataType:
		//	base=DataTypeBase | compound=[DataTypeCompound];
		public ParserRule getRule() { return rule; }

		//base=DataTypeBase | compound=[DataTypeCompound]
		public Alternatives getAlternatives() { return cAlternatives; }

		//base=DataTypeBase
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//DataTypeBase
		public RuleCall getBaseDataTypeBaseParserRuleCall_0_0() { return cBaseDataTypeBaseParserRuleCall_0_0; }

		//compound=[DataTypeCompound]
		public Assignment getCompoundAssignment_1() { return cCompoundAssignment_1; }

		//[DataTypeCompound]
		public CrossReference getCompoundDataTypeCompoundCrossReference_1_0() { return cCompoundDataTypeCompoundCrossReference_1_0; }

		//ID
		public RuleCall getCompoundDataTypeCompoundIDTerminalRuleCall_1_0_1() { return cCompoundDataTypeCompoundIDTerminalRuleCall_1_0_1; }
	}

	public class DataTypeBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSymbolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTimeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cReferenceKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//DataTypeBase:
		//	"void" | "symbol" | "number" | "text" | "time" | "reference";
		public ParserRule getRule() { return rule; }

		//"void" | "symbol" | "number" | "text" | "time" | "reference"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//"symbol"
		public Keyword getSymbolKeyword_1() { return cSymbolKeyword_1; }

		//"number"
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }

		//"text"
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }

		//"time"
		public Keyword getTimeKeyword_4() { return cTimeKeyword_4; }

		//"reference"
		public Keyword getReferenceKeyword_5() { return cReferenceKeyword_5; }
	}

	public class DataTypeCompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeCompound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsDataTypeCompoundFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		
		//DataTypeCompound:
		//	"structure" name=ID ":" fields+=DataTypeCompoundField*;
		public ParserRule getRule() { return rule; }

		//"structure" name=ID ":" fields+=DataTypeCompoundField*
		public Group getGroup() { return cGroup; }

		//"structure"
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//fields+=DataTypeCompoundField*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//DataTypeCompoundField
		public RuleCall getFieldsDataTypeCompoundFieldParserRuleCall_3_0() { return cFieldsDataTypeCompoundFieldParserRuleCall_3_0; }
	}

	public class DataTypeCompoundFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeCompoundField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//DataTypeCompoundField:
		//	name=ID ":" type=DataType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=DataType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCauseCauseParserRuleCall_0_0 = (RuleCall)cCauseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffectsEffectParserRuleCall_2_0 = (RuleCall)cEffectsAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Behaviors
		//Behavior:
		//	cause=Cause ":" effects+=Effect+;
		public ParserRule getRule() { return rule; }

		//cause=Cause ":" effects+=Effect+
		public Group getGroup() { return cGroup; }

		//cause=Cause
		public Assignment getCauseAssignment_0() { return cCauseAssignment_0; }

		//Cause
		public RuleCall getCauseCauseParserRuleCall_0_0() { return cCauseCauseParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//effects+=Effect+
		public Assignment getEffectsAssignment_2() { return cEffectsAssignment_2; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_2_0() { return cEffectsEffectParserRuleCall_2_0; }
	}

	public class CauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnCauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenCauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Cause:
		//	OnCause | WhenCause;
		public ParserRule getRule() { return rule; }

		//OnCause | WhenCause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OnCause
		public RuleCall getOnCauseParserRuleCall_0() { return cOnCauseParserRuleCall_0; }

		//WhenCause
		public RuleCall getWhenCauseParserRuleCall_1() { return cWhenCauseParserRuleCall_1; }
	}

	public class OnCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventSignalReceptionParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//OnCause:
		//	"on" event=SignalReception ("if" guard=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"on" event=SignalReception ("if" guard=XExpression)?
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=SignalReception
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//SignalReception
		public RuleCall getEventSignalReceptionParserRuleCall_1_0() { return cEventSignalReceptionParserRuleCall_1_0; }

		//("if" guard=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_1_0() { return cGuardXExpressionParserRuleCall_2_1_0; }
	}

	public class WhenCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionXExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//WhenCause:
		//	"when" condition=XExpression ("if" guard=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"when" condition=XExpression ("if" guard=XExpression)?
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=XExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_1_0() { return cConditionXExpressionParserRuleCall_1_0; }

		//("if" guard=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_1_0() { return cGuardXExpressionParserRuleCall_2_1_0; }
	}

	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlwaysEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect:
		//	AlwaysEffect | SetEffect | TriggerEffect;
		public ParserRule getRule() { return rule; }

		//AlwaysEffect | SetEffect | TriggerEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//AlwaysEffect
		public RuleCall getAlwaysEffectParserRuleCall_0() { return cAlwaysEffectParserRuleCall_0; }

		//SetEffect
		public RuleCall getSetEffectParserRuleCall_1() { return cSetEffectParserRuleCall_1; }

		//TriggerEffect
		public RuleCall getTriggerEffectParserRuleCall_2() { return cTriggerEffectParserRuleCall_2; }
	}

	public class AlwaysEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlwaysEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlwaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSignalEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AlwaysEffect:
		//	"always" target=SignalEmission "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//"always" target=SignalEmission "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//"always"
		public Keyword getAlwaysKeyword_0() { return cAlwaysKeyword_0; }

		//target=SignalEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//SignalEmission
		public RuleCall getTargetSignalEmissionParserRuleCall_1_0() { return cTargetSignalEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class SetEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSignalEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SetEffect:
		//	"set" target=SignalEmission "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//"set" target=SignalEmission "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//target=SignalEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//SignalEmission
		public RuleCall getTargetSignalEmissionParserRuleCall_1_0() { return cTargetSignalEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class TriggerEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSignalEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//TriggerEffect:
		//	"trigger" target=SignalEmission "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//"trigger" target=SignalEmission "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//target=SignalEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//SignalEmission
		public RuleCall getTargetSignalEmissionParserRuleCall_1_0() { return cTargetSignalEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final RuleCall cXOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a subset of it in order to be able to generate C code and in order to simplify the language
		////So we are going to construct the expressions language we need. It is similar to xbase on certain points, but still clearly different, semantically and syntaxically
		//XExpression:
		//	XOrExpression;
		public ParserRule getRule() { return rule; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall() { return cXOrExpressionParserRuleCall; }
	}

	public class XOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOrExpression returns XExpression:
		//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*;
		public ParserRule getRule() { return rule; }

		//XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*
		public Group getGroup() { return cGroup; }

		//XAndExpression
		public RuleCall getXAndExpressionParserRuleCall_0() { return cXAndExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//rightOperand=XAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAndExpression
		public RuleCall getRightOperandXAndExpressionParserRuleCall_1_1_0() { return cRightOperandXAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"or";
		public ParserRule getRule() { return rule; }

		//"or"
		public Keyword getOrKeyword() { return cOrKeyword; }
	}

	public class XAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAndExpression returns XExpression:
		//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//XEqualityExpression
		public RuleCall getXEqualityExpressionParserRuleCall_0() { return cXEqualityExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//rightOperand=XEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XEqualityExpression
		public RuleCall getRightOperandXEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandXEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"and";
		public ParserRule getRule() { return rule; }

		//"and"
		public Keyword getAndKeyword() { return cAndKeyword; }
	}

	public class XEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XEqualityExpression returns XExpression:
		//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		//	rightOperand=XRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		//rightOperand=XRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//XRelationalExpression
		public RuleCall getXRelationalExpressionParserRuleCall_0() { return cXRelationalExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=XRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpEquality
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpEquality
		public RuleCall getFeatureOpEqualityParserRuleCall_1_0_0_1_0() { return cFeatureOpEqualityParserRuleCall_1_0_0_1_0; }

		//rightOperand=XRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XRelationalExpression
		public RuleCall getRightOperandXRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandXRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XRelationalExpression returns XExpression:
		//	XOtherOperatorExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		//	rightOperand=XOtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//XOtherOperatorExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		//rightOperand=XOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//XOtherOperatorExpression
		public RuleCall getXOtherOperatorExpressionParserRuleCall_0() { return cXOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=XOtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpCompare
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_0_1_0; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_1_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	"<=" | ">=" | "<" | ">";
		public ParserRule getRule() { return rule; }

		//"<=" | ">=" | "<" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class XOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOtherOperatorExpression returns XExpression:
		//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall_0() { return cXAdditiveExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//rightOperand=XAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAdditiveExpression
		public RuleCall getRightOperandXAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandXAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQuestionMarkColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////String join and groovy elvis operator for null checking
		//OpOther:
		//	"<>" | "?:";
		public ParserRule getRule() { return rule; }

		//"<>" | "?:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_0() { return cLessThanSignGreaterThanSignKeyword_0; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_1() { return cQuestionMarkColonKeyword_1; }
	}

	public class XAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAdditiveExpression returns XExpression:
		//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		//	rightOperand=XMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//XMultiplicativeExpression
		public RuleCall getXMultiplicativeExpressionParserRuleCall_0() { return cXMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpAdd) rightOperand=XMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//rightOperand=XMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XMultiplicativeExpression
		public RuleCall getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class XMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XMultiplicativeExpression returns XExpression:
		//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*
		public Group getGroup() { return cGroup; }

		//XUnaryOperation
		public RuleCall getXUnaryOperationParserRuleCall_0() { return cXUnaryOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpMulti
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMulti
		public RuleCall getFeatureOpMultiParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiParserRuleCall_1_0_0_1_0; }

		//rightOperand=XUnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XUnaryOperation
		public RuleCall getRightOperandXUnaryOperationParserRuleCall_1_1_0() { return cRightOperandXUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpMulti:
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XUnaryOperation returns XExpression:
		//	{XUnaryOperation} feature=OpUnary operand=XPrimaryExpression | XPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{XUnaryOperation} feature=OpUnary operand=XPrimaryExpression | XPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XUnaryOperation} feature=OpUnary operand=XPrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=XPrimaryExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XPrimaryExpression
		public RuleCall getOperandXPrimaryExpressionParserRuleCall_0_2_0() { return cOperandXPrimaryExpressionParserRuleCall_0_2_0; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_1() { return cXPrimaryExpressionParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXForEachExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFunctionCallExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//XPrimaryExpression returns XExpression:
		//	XSwitchExpression | XIfExpression | XLiteral | XForEachExpression | XFunctionCallExpression |
		//	XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XSwitchExpression | XIfExpression | XLiteral | XForEachExpression | XFunctionCallExpression | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_0() { return cXSwitchExpressionParserRuleCall_0; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_1() { return cXIfExpressionParserRuleCall_1; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_2() { return cXLiteralParserRuleCall_2; }

		//XForEachExpression
		public RuleCall getXForEachExpressionParserRuleCall_3() { return cXForEachExpressionParserRuleCall_3; }

		//XFunctionCallExpression
		public RuleCall getXFunctionCallExpressionParserRuleCall_4() { return cXFunctionCallExpressionParserRuleCall_4; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_5() { return cXParenthesizedExpressionParserRuleCall_5; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXCollectionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cXEnumLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNumberSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElementAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cElementXEnumElementCrossReference_5_2_0 = (CrossReference)cElementAssignment_5_2.eContents().get(0);
		private final RuleCall cElementXEnumElementIDTerminalRuleCall_5_2_0_1 = (RuleCall)cElementXEnumElementCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cXSignalLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cSignalAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_6_1_0 = (CrossReference)cSignalAssignment_6_1.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSignalSignalCrossReference_6_1_0.eContents().get(1);
		
		//XLiteral returns XExpression:
		//	XCollectionLiteral | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | {XEnumLiteral} "#"
		//	element=[XEnumElement] | {XSignalLiteral} signal=[Signal];
		public ParserRule getRule() { return rule; }

		//XCollectionLiteral | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | {XEnumLiteral} "#"
		//element=[XEnumElement] | {XSignalLiteral} signal=[Signal]
		public Alternatives getAlternatives() { return cAlternatives; }

		//XCollectionLiteral
		public RuleCall getXCollectionLiteralParserRuleCall_0() { return cXCollectionLiteralParserRuleCall_0; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_1() { return cXBooleanLiteralParserRuleCall_1; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_2() { return cXNumberLiteralParserRuleCall_2; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_3() { return cXNullLiteralParserRuleCall_3; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_4() { return cXStringLiteralParserRuleCall_4; }

		//{XEnumLiteral} "#" element=[XEnumElement]
		public Group getGroup_5() { return cGroup_5; }

		//{XEnumLiteral}
		public Action getXEnumLiteralAction_5_0() { return cXEnumLiteralAction_5_0; }

		//"#"
		public Keyword getNumberSignKeyword_5_1() { return cNumberSignKeyword_5_1; }

		//element=[XEnumElement]
		public Assignment getElementAssignment_5_2() { return cElementAssignment_5_2; }

		//[XEnumElement]
		public CrossReference getElementXEnumElementCrossReference_5_2_0() { return cElementXEnumElementCrossReference_5_2_0; }

		//ID
		public RuleCall getElementXEnumElementIDTerminalRuleCall_5_2_0_1() { return cElementXEnumElementIDTerminalRuleCall_5_2_0_1; }

		//{XSignalLiteral} signal=[Signal]
		public Group getGroup_6() { return cGroup_6; }

		//{XSignalLiteral}
		public Action getXSignalLiteralAction_6_0() { return cXSignalLiteralAction_6_0; }

		//signal=[Signal]
		public Assignment getSignalAssignment_6_1() { return cSignalAssignment_6_1; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_6_1_0() { return cSignalSignalCrossReference_6_1_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_6_1_0_1() { return cSignalSignalIDTerminalRuleCall_6_1_0_1; }
	}

	public class XCollectionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCollectionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXSetLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXListLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XCollectionLiteral:
		//	XSetLiteral | XListLiteral;
		public ParserRule getRule() { return rule; }

		//XSetLiteral | XListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XSetLiteral
		public RuleCall getXSetLiteralParserRuleCall_0() { return cXSetLiteralParserRuleCall_0; }

		//XListLiteral
		public RuleCall getXListLiteralParserRuleCall_1() { return cXListLiteralParserRuleCall_1; }
	}

	public class XSetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSetLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsXExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XSetLiteral:
		//	{XSetLiteral} "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
		public ParserRule getRule() { return rule; }

		//{XSetLiteral} "{" (elements+=XExpression ("," elements+=XExpression)*)? "}"
		public Group getGroup() { return cGroup; }

		//{XSetLiteral}
		public Action getXSetLiteralAction_0() { return cXSetLiteralAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=XExpression ("," elements+=XExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=XExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_2_0_0() { return cElementsXExpressionParserRuleCall_2_0_0; }

		//("," elements+=XExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=XExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_2_1_1_0() { return cElementsXExpressionParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsXExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XListLiteral:
		//	{XListLiteral} "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{XListLiteral} "[" (elements+=XExpression ("," elements+=XExpression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{XListLiteral}
		public Action getXListLiteralAction_0() { return cXListLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=XExpression ("," elements+=XExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=XExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_2_0_0() { return cElementsXExpressionParserRuleCall_2_0_0; }

		//("," elements+=XExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=XExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_2_1_1_0() { return cElementsXExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedExpression returns XExpression:
		//	"(" XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfXExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenXExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseXExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//XIfExpression returns XExpression:
		//	{XIfExpression} "if" "(" if=XExpression => ")" then=XExpression ("else" else=XExpression);
		public ParserRule getRule() { return rule; }

		//{XIfExpression} "if" "(" if=XExpression => ")" then=XExpression ("else" else=XExpression)
		public Group getGroup() { return cGroup; }

		//{XIfExpression}
		public Action getXIfExpressionAction_0() { return cXIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=XExpression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_3_0() { return cIfXExpressionParserRuleCall_3_0; }

		//=> ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=XExpression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_5_0() { return cThenXExpressionParserRuleCall_5_0; }

		//=> "else" else=XExpression
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=XExpression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//XExpression
		public RuleCall getElseXExpressionParserRuleCall_6_1_0() { return cElseXExpressionParserRuleCall_6_1_0; }
	}

	public class XSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSwitchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchXExpressionParserRuleCall_3_0 = (RuleCall)cSwitchAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesXCasePartParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDefaultKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDefaultAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDefaultXExpressionParserRuleCall_6_2_0 = (RuleCall)cDefaultAssignment_6_2.eContents().get(0);
		
		//XSwitchExpression returns XExpression:
		//	{XSwitchExpression} "switch" "(" switch=XExpression => ")" => cases+=XCasePart+ ("default" ":" default=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XSwitchExpression} "switch" "(" switch=XExpression => ")" => cases+=XCasePart+ ("default" ":" default=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XSwitchExpression}
		public Action getXSwitchExpressionAction_0() { return cXSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//switch=XExpression
		public Assignment getSwitchAssignment_3() { return cSwitchAssignment_3; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_3_0() { return cSwitchXExpressionParserRuleCall_3_0; }

		//=> ")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//=> cases+=XCasePart+
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_5_0() { return cCasesXCasePartParserRuleCall_5_0; }

		//(=> "default" ":" default=XExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "default"
		public Keyword getDefaultKeyword_6_0() { return cDefaultKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//default=XExpression
		public Assignment getDefaultAssignment_6_2() { return cDefaultAssignment_6_2; }

		//XExpression
		public RuleCall getDefaultXExpressionParserRuleCall_6_2_0() { return cDefaultXExpressionParserRuleCall_6_2_0; }
	}

	public class XCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseXExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenXExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//XCasePart:
		//	"case" case=XExpression ":" then=XExpression;
		public ParserRule getRule() { return rule; }

		//"case" case=XExpression ":" then=XExpression
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=XExpression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//XExpression
		public RuleCall getCaseXExpressionParserRuleCall_1_0() { return cCaseXExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=XExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_3_0() { return cThenXExpressionParserRuleCall_3_0; }
	}

	public class XForEachExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForEachExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXForEachExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEachKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cForExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEachExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_6_0 = (RuleCall)cEachExpressionAssignment_6.eContents().get(0);
		
		//XForEachExpression returns XExpression:
		//	{XForEachExpression} "for" "each" "(" forExpression=XExpression ")" eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XForEachExpression} "for" "each" "(" forExpression=XExpression ")" eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//{XForEachExpression}
		public Action getXForEachExpressionAction_0() { return cXForEachExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"each"
		public Keyword getEachKeyword_2() { return cEachKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_4() { return cForExpressionAssignment_4; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_4_0() { return cForExpressionXExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_6() { return cEachExpressionAssignment_6; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_6_0() { return cEachExpressionXExpressionParserRuleCall_6_0; }
	}

	public class XFunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFunctionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionBuiltInFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsXExpressionParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_0 = (RuleCall)cArgumentsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XFunctionCallExpression returns XExpression:
		//	{XFunctionCallExpression} function=BuiltInFunction "(" arguments+=XExpression? ("," arguments+=XExpression)* ")";
		public ParserRule getRule() { return rule; }

		//{XFunctionCallExpression} function=BuiltInFunction "(" arguments+=XExpression? ("," arguments+=XExpression)* ")"
		public Group getGroup() { return cGroup; }

		//{XFunctionCallExpression}
		public Action getXFunctionCallExpressionAction_0() { return cXFunctionCallExpressionAction_0; }

		//function=BuiltInFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//BuiltInFunction
		public RuleCall getFunctionBuiltInFunctionParserRuleCall_1_0() { return cFunctionBuiltInFunctionParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//arguments+=XExpression?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_3_0() { return cArgumentsXExpressionParserRuleCall_3_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1() { return cArgumentsAssignment_4_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_0() { return cArgumentsXExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class BuiltInFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMathAbsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMathAcosKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMathAcoshKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMathAsinKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMathAsinhKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMathAtanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMathAtanhKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMathAtan2Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMathCeilKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMathClipKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMathCosKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMathCoshKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cMathExpKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cMathFloorKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cMathFroundKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMathHypotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cMathLogKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cMathLog10Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMathLog2Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cMathMaxKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cMathMinKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMathPowKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cMathRandomKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cMathRoundKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cMathSignKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cMathSinKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cMathSinhKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cMathSqrtKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cMathTanKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cMathTanhKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cMathTruncKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cSetOrderbyKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cSetAddKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cSetFindKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cSetChangeKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cSetRemoveKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		
		////Same functions as c math.*
		//BuiltInFunction:
		//	"Math.abs" | "Math.acos" | "Math.acosh" | "Math.asin" | "Math.asinh" | "Math.atan" | "Math.atanh" | "Math.atan2" |
		//	"Math.ceil" | "Math.clip" | "Math.cos" | "Math.cosh" | "Math.exp" | "Math.floor" | "Math.fround" | "Math.hypot" |
		//	"Math.log" | "Math.log10" | "Math.log2" | "Math.max" | "Math.min" | "Math.pow" | "Math.random" | "Math.round" |
		//	"Math.sign" | "Math.sin" | "Math.sinh" | "Math.sqrt" | "Math.tan" | "Math.tanh" | "Math.trunc" | "Set.orderby" |
		//	"Set.add" | "Set.find" | "Set.change" | "Set.remove";
		public ParserRule getRule() { return rule; }

		//"Math.abs" | "Math.acos" | "Math.acosh" | "Math.asin" | "Math.asinh" | "Math.atan" | "Math.atanh" | "Math.atan2" |
		//"Math.ceil" | "Math.clip" | "Math.cos" | "Math.cosh" | "Math.exp" | "Math.floor" | "Math.fround" | "Math.hypot" |
		//"Math.log" | "Math.log10" | "Math.log2" | "Math.max" | "Math.min" | "Math.pow" | "Math.random" | "Math.round" |
		//"Math.sign" | "Math.sin" | "Math.sinh" | "Math.sqrt" | "Math.tan" | "Math.tanh" | "Math.trunc" | "Set.orderby" |
		//"Set.add" | "Set.find" | "Set.change" | "Set.remove"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Math.abs"
		public Keyword getMathAbsKeyword_0() { return cMathAbsKeyword_0; }

		//"Math.acos"
		public Keyword getMathAcosKeyword_1() { return cMathAcosKeyword_1; }

		//"Math.acosh"
		public Keyword getMathAcoshKeyword_2() { return cMathAcoshKeyword_2; }

		//"Math.asin"
		public Keyword getMathAsinKeyword_3() { return cMathAsinKeyword_3; }

		//"Math.asinh"
		public Keyword getMathAsinhKeyword_4() { return cMathAsinhKeyword_4; }

		//"Math.atan"
		public Keyword getMathAtanKeyword_5() { return cMathAtanKeyword_5; }

		//"Math.atanh"
		public Keyword getMathAtanhKeyword_6() { return cMathAtanhKeyword_6; }

		//"Math.atan2"
		public Keyword getMathAtan2Keyword_7() { return cMathAtan2Keyword_7; }

		//"Math.ceil"
		public Keyword getMathCeilKeyword_8() { return cMathCeilKeyword_8; }

		//"Math.clip"
		public Keyword getMathClipKeyword_9() { return cMathClipKeyword_9; }

		//"Math.cos"
		public Keyword getMathCosKeyword_10() { return cMathCosKeyword_10; }

		//"Math.cosh"
		public Keyword getMathCoshKeyword_11() { return cMathCoshKeyword_11; }

		//"Math.exp"
		public Keyword getMathExpKeyword_12() { return cMathExpKeyword_12; }

		//"Math.floor"
		public Keyword getMathFloorKeyword_13() { return cMathFloorKeyword_13; }

		//"Math.fround"
		public Keyword getMathFroundKeyword_14() { return cMathFroundKeyword_14; }

		//"Math.hypot"
		public Keyword getMathHypotKeyword_15() { return cMathHypotKeyword_15; }

		//"Math.log"
		public Keyword getMathLogKeyword_16() { return cMathLogKeyword_16; }

		//"Math.log10"
		public Keyword getMathLog10Keyword_17() { return cMathLog10Keyword_17; }

		//"Math.log2"
		public Keyword getMathLog2Keyword_18() { return cMathLog2Keyword_18; }

		//"Math.max"
		public Keyword getMathMaxKeyword_19() { return cMathMaxKeyword_19; }

		//"Math.min"
		public Keyword getMathMinKeyword_20() { return cMathMinKeyword_20; }

		//"Math.pow"
		public Keyword getMathPowKeyword_21() { return cMathPowKeyword_21; }

		//"Math.random"
		public Keyword getMathRandomKeyword_22() { return cMathRandomKeyword_22; }

		//"Math.round"
		public Keyword getMathRoundKeyword_23() { return cMathRoundKeyword_23; }

		//"Math.sign"
		public Keyword getMathSignKeyword_24() { return cMathSignKeyword_24; }

		//"Math.sin"
		public Keyword getMathSinKeyword_25() { return cMathSinKeyword_25; }

		//"Math.sinh"
		public Keyword getMathSinhKeyword_26() { return cMathSinhKeyword_26; }

		//"Math.sqrt"
		public Keyword getMathSqrtKeyword_27() { return cMathSqrtKeyword_27; }

		//"Math.tan"
		public Keyword getMathTanKeyword_28() { return cMathTanKeyword_28; }

		//"Math.tanh"
		public Keyword getMathTanhKeyword_29() { return cMathTanhKeyword_29; }

		//"Math.trunc"
		public Keyword getMathTruncKeyword_30() { return cMathTruncKeyword_30; }

		//"Set.orderby"
		public Keyword getSetOrderbyKeyword_31() { return cSetOrderbyKeyword_31; }

		//"Set.add"
		public Keyword getSetAddKeyword_32() { return cSetAddKeyword_32; }

		//"Set.find"
		public Keyword getSetFindKeyword_33() { return cSetFindKeyword_33; }

		//"Set.change"
		public Keyword getSetChangeKeyword_34() { return cSetChangeKeyword_34; }

		//"Set.remove"
		public Keyword getSetRemoveKeyword_35() { return cSetRemoveKeyword_35; }
	}

	public class XBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Literals
		//XBooleanLiteral returns XExpression:
		//	{XBooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{XBooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{XBooleanLiteral}
		public Action getXBooleanLiteralAction_0() { return cXBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class XNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XNullLiteral returns XExpression:
		//	{XNullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{XNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{XNullLiteral}
		public Action getXNullLiteralAction_0() { return cXNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class XNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XNumberLiteral returns XExpression:
		//	{XNumberLiteral} value=NUMBER;
		public ParserRule getRule() { return rule; }

		//{XNumberLiteral} value=NUMBER
		public Group getGroup() { return cGroup; }

		//{XNumberLiteral}
		public Action getXNumberLiteralAction_0() { return cXNumberLiteralAction_0; }

		//value=NUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_1_0() { return cValueNUMBERParserRuleCall_1_0; }
	}

	public class XStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XStringLiteral returns XExpression:
		//	{XStringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{XStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{XStringLiteral}
		public Action getXStringLiteralAction_0() { return cXStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class XEnumElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEnumElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXEnumLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XEnumElement:
		//	{XEnumLiteral} "#" name=ID;
		public ParserRule getRule() { return rule; }

		//{XEnumLiteral} "#" name=ID
		public Group getGroup() { return cGroup; }

		//{XEnumLiteral}
		public Action getXEnumLiteralAction_0() { return cXEnumLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////QualifiedName:
		////  ValidID (=>'.' ValidID)*;
		////Xtext Data types
		//NUMBER returns ecore::EDouble:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private LilModelElements pLilModel;
	private InteractorElements pInteractor;
	private AccessibleEntityElements pAccessibleEntity;
	private GenericEntityElements pGenericEntity;
	private EntityElements pEntity;
	private ActorElements pActor;
	private ActorAliasElements pActorAlias;
	private ComponentElements pComponent;
	private SignalReceptionElements pSignalReception;
	private SignalEmissionElements pSignalEmission;
	private SignalElements pSignal;
	private DefinitionSetElements pDefinitionSet;
	private SignalAliasElements pSignalAlias;
	private SignalModeElements pSignalMode;
	private DataTypeElements pDataType;
	private DataTypeBaseElements pDataTypeBase;
	private DataTypeCompoundElements pDataTypeCompound;
	private DataTypeCompoundFieldElements pDataTypeCompoundField;
	private BehaviorElements pBehavior;
	private CauseElements pCause;
	private OnCauseElements pOnCause;
	private WhenCauseElements pWhenCause;
	private EffectElements pEffect;
	private AlwaysEffectElements pAlwaysEffect;
	private SetEffectElements pSetEffect;
	private TriggerEffectElements pTriggerEffect;
	private XExpressionElements pXExpression;
	private XOrExpressionElements pXOrExpression;
	private OpOrElements pOpOr;
	private XAndExpressionElements pXAndExpression;
	private OpAndElements pOpAnd;
	private XEqualityExpressionElements pXEqualityExpression;
	private OpEqualityElements pOpEquality;
	private XRelationalExpressionElements pXRelationalExpression;
	private OpCompareElements pOpCompare;
	private XOtherOperatorExpressionElements pXOtherOperatorExpression;
	private OpOtherElements pOpOther;
	private XAdditiveExpressionElements pXAdditiveExpression;
	private OpAddElements pOpAdd;
	private XMultiplicativeExpressionElements pXMultiplicativeExpression;
	private OpMultiElements pOpMulti;
	private XUnaryOperationElements pXUnaryOperation;
	private OpUnaryElements pOpUnary;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XLiteralElements pXLiteral;
	private XCollectionLiteralElements pXCollectionLiteral;
	private XSetLiteralElements pXSetLiteral;
	private XListLiteralElements pXListLiteral;
	private XParenthesizedExpressionElements pXParenthesizedExpression;
	private XIfExpressionElements pXIfExpression;
	private XSwitchExpressionElements pXSwitchExpression;
	private XCasePartElements pXCasePart;
	private XForEachExpressionElements pXForEachExpression;
	private XFunctionCallExpressionElements pXFunctionCallExpression;
	private BuiltInFunctionElements pBuiltInFunction;
	private XBooleanLiteralElements pXBooleanLiteral;
	private XNullLiteralElements pXNullLiteral;
	private XNumberLiteralElements pXNumberLiteral;
	private XStringLiteralElements pXStringLiteral;
	private XEnumElementElements pXEnumElement;
	private NUMBERElements pNUMBER;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public LilGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.crubier.lil.Lil".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Model
	//LilModel:
	//	(interactors+=Interactor | dataTypes+=DataTypeCompound)*;
	public LilModelElements getLilModelAccess() {
		return (pLilModel != null) ? pLilModel : (pLilModel = new LilModelElements());
	}
	
	public ParserRule getLilModelRule() {
		return getLilModelAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor
	//Interactor:
	//	"interactor" name=ID ":" (entities+=Entity | signals+=Signal | behaviors+=Behavior)*;
	public InteractorElements getInteractorAccess() {
		return (pInteractor != null) ? pInteractor : (pInteractor = new InteractorElements());
	}
	
	public ParserRule getInteractorRule() {
		return getInteractorAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Entities
	//AccessibleEntity:
	//	generic=GenericEntity | specific=[Entity];
	public AccessibleEntityElements getAccessibleEntityAccess() {
		return (pAccessibleEntity != null) ? pAccessibleEntity : (pAccessibleEntity = new AccessibleEntityElements());
	}
	
	public ParserRule getAccessibleEntityRule() {
		return getAccessibleEntityAccess().getRule();
	}

	//GenericEntity:
	//	"any" | "self" | "other" | "parent" | "child" | "all" | "actors";
	public GenericEntityElements getGenericEntityAccess() {
		return (pGenericEntity != null) ? pGenericEntity : (pGenericEntity = new GenericEntityElements());
	}
	
	public ParserRule getGenericEntityRule() {
		return getGenericEntityAccess().getRule();
	}

	//Entity:
	//	Actor | Component;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Actor:
	//	name=ID ":" "actor";
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//ActorAlias:
	//	source=[Actor] "as" alias=[Actor];
	public ActorAliasElements getActorAliasAccess() {
		return (pActorAlias != null) ? pActorAlias : (pActorAlias = new ActorAliasElements());
	}
	
	public ParserRule getActorAliasRule() {
		return getActorAliasAccess().getRule();
	}

	//Component:
	//	name=ID ":" interactor=[Interactor] ("with" actors+=ActorAlias ("," actors+=ActorAlias)*)?;
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Signals
	//SignalReception:
	//	instance=[Signal] ("from" source=SignalAlias)? | init?="init";
	public SignalReceptionElements getSignalReceptionAccess() {
		return (pSignalReception != null) ? pSignalReception : (pSignalReception = new SignalReceptionElements());
	}
	
	public ParserRule getSignalReceptionRule() {
		return getSignalReceptionAccess().getRule();
	}

	//SignalEmission:
	//	instance=[Signal] ("to" destination=SignalAlias)?;
	public SignalEmissionElements getSignalEmissionAccess() {
		return (pSignalEmission != null) ? pSignalEmission : (pSignalEmission = new SignalEmissionElements());
	}
	
	public ParserRule getSignalEmissionRule() {
		return getSignalEmissionAccess().getRule();
	}

	//Signal:
	//	name=ID ":" type=DataType ("in" definitionSet=DefinitionSet)? mode=SignalMode ("from" source=SignalAlias)? ("to"
	//	destinations+=SignalAlias)*;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//DefinitionSet:
	//	"{" elements+=XEnumElement ("," elements+=XEnumElement)* "}";
	public DefinitionSetElements getDefinitionSetAccess() {
		return (pDefinitionSet != null) ? pDefinitionSet : (pDefinitionSet = new DefinitionSetElements());
	}
	
	public ParserRule getDefinitionSetRule() {
		return getDefinitionSetAccess().getRule();
	}

	//SignalAlias:
	//	source=AccessibleEntity ("as" alias=[Signal])?;
	public SignalAliasElements getSignalAliasAccess() {
		return (pSignalAlias != null) ? pSignalAlias : (pSignalAlias = new SignalAliasElements());
	}
	
	public ParserRule getSignalAliasRule() {
		return getSignalAliasAccess().getRule();
	}

	//SignalMode:
	//	"event" | "flow";
	public SignalModeElements getSignalModeAccess() {
		return (pSignalMode != null) ? pSignalMode : (pSignalMode = new SignalModeElements());
	}
	
	public ParserRule getSignalModeRule() {
		return getSignalModeAccess().getRule();
	}

	//DataType:
	//	base=DataTypeBase | compound=[DataTypeCompound];
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//DataTypeBase:
	//	"void" | "symbol" | "number" | "text" | "time" | "reference";
	public DataTypeBaseElements getDataTypeBaseAccess() {
		return (pDataTypeBase != null) ? pDataTypeBase : (pDataTypeBase = new DataTypeBaseElements());
	}
	
	public ParserRule getDataTypeBaseRule() {
		return getDataTypeBaseAccess().getRule();
	}

	//DataTypeCompound:
	//	"structure" name=ID ":" fields+=DataTypeCompoundField*;
	public DataTypeCompoundElements getDataTypeCompoundAccess() {
		return (pDataTypeCompound != null) ? pDataTypeCompound : (pDataTypeCompound = new DataTypeCompoundElements());
	}
	
	public ParserRule getDataTypeCompoundRule() {
		return getDataTypeCompoundAccess().getRule();
	}

	//DataTypeCompoundField:
	//	name=ID ":" type=DataType;
	public DataTypeCompoundFieldElements getDataTypeCompoundFieldAccess() {
		return (pDataTypeCompoundField != null) ? pDataTypeCompoundField : (pDataTypeCompoundField = new DataTypeCompoundFieldElements());
	}
	
	public ParserRule getDataTypeCompoundFieldRule() {
		return getDataTypeCompoundFieldAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Behaviors
	//Behavior:
	//	cause=Cause ":" effects+=Effect+;
	public BehaviorElements getBehaviorAccess() {
		return (pBehavior != null) ? pBehavior : (pBehavior = new BehaviorElements());
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//Cause:
	//	OnCause | WhenCause;
	public CauseElements getCauseAccess() {
		return (pCause != null) ? pCause : (pCause = new CauseElements());
	}
	
	public ParserRule getCauseRule() {
		return getCauseAccess().getRule();
	}

	//OnCause:
	//	"on" event=SignalReception ("if" guard=XExpression)?;
	public OnCauseElements getOnCauseAccess() {
		return (pOnCause != null) ? pOnCause : (pOnCause = new OnCauseElements());
	}
	
	public ParserRule getOnCauseRule() {
		return getOnCauseAccess().getRule();
	}

	//WhenCause:
	//	"when" condition=XExpression ("if" guard=XExpression)?;
	public WhenCauseElements getWhenCauseAccess() {
		return (pWhenCause != null) ? pWhenCause : (pWhenCause = new WhenCauseElements());
	}
	
	public ParserRule getWhenCauseRule() {
		return getWhenCauseAccess().getRule();
	}

	//Effect:
	//	AlwaysEffect | SetEffect | TriggerEffect;
	public EffectElements getEffectAccess() {
		return (pEffect != null) ? pEffect : (pEffect = new EffectElements());
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//AlwaysEffect:
	//	"always" target=SignalEmission "=" value=XExpression;
	public AlwaysEffectElements getAlwaysEffectAccess() {
		return (pAlwaysEffect != null) ? pAlwaysEffect : (pAlwaysEffect = new AlwaysEffectElements());
	}
	
	public ParserRule getAlwaysEffectRule() {
		return getAlwaysEffectAccess().getRule();
	}

	//SetEffect:
	//	"set" target=SignalEmission "=" value=XExpression;
	public SetEffectElements getSetEffectAccess() {
		return (pSetEffect != null) ? pSetEffect : (pSetEffect = new SetEffectElements());
	}
	
	public ParserRule getSetEffectRule() {
		return getSetEffectAccess().getRule();
	}

	//TriggerEffect:
	//	"trigger" target=SignalEmission "=" value=XExpression;
	public TriggerEffectElements getTriggerEffectAccess() {
		return (pTriggerEffect != null) ? pTriggerEffect : (pTriggerEffect = new TriggerEffectElements());
	}
	
	public ParserRule getTriggerEffectRule() {
		return getTriggerEffectAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Expressions
	////We do not use xbase because we only need a subset of it in order to be able to generate C code and in order to simplify the language
	////So we are going to construct the expressions language we need. It is similar to xbase on certain points, but still clearly different, semantically and syntaxically
	//XExpression:
	//	XOrExpression;
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*;
	public XOrExpressionElements getXOrExpressionAccess() {
		return (pXOrExpression != null) ? pXOrExpression : (pXOrExpression = new XOrExpressionElements());
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"or";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*;
	public XAndExpressionElements getXAndExpressionAccess() {
		return (pXAndExpression != null) ? pXAndExpression : (pXAndExpression = new XAndExpressionElements());
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"and";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
	//	rightOperand=XRelationalExpression)*;
	public XEqualityExpressionElements getXEqualityExpressionAccess() {
		return (pXEqualityExpression != null) ? pXEqualityExpression : (pXEqualityExpression = new XEqualityExpressionElements());
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
	//	rightOperand=XOtherOperatorExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return (pXRelationalExpression != null) ? pXRelationalExpression : (pXRelationalExpression = new XRelationalExpressionElements());
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	"<=" | ">=" | "<" | ">";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*;
	public XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return (pXOtherOperatorExpression != null) ? pXOtherOperatorExpression : (pXOtherOperatorExpression = new XOtherOperatorExpressionElements());
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	////String join and groovy elvis operator for null checking
	//OpOther:
	//	"<>" | "?:";
	public OpOtherElements getOpOtherAccess() {
		return (pOpOther != null) ? pOpOther : (pOpOther = new OpOtherElements());
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
	//	rightOperand=XMultiplicativeExpression)*;
	public XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return (pXAdditiveExpression != null) ? pXAdditiveExpression : (pXAdditiveExpression = new XAdditiveExpressionElements());
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*;
	public XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return (pXMultiplicativeExpression != null) ? pXMultiplicativeExpression : (pXMultiplicativeExpression = new XMultiplicativeExpressionElements());
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return (pOpMulti != null) ? pOpMulti : (pOpMulti = new OpMultiElements());
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=OpUnary operand=XPrimaryExpression | XPrimaryExpression;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return (pXUnaryOperation != null) ? pXUnaryOperation : (pXUnaryOperation = new XUnaryOperationElements());
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XSwitchExpression | XIfExpression | XLiteral | XForEachExpression | XFunctionCallExpression |
	//	XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | {XEnumLiteral} "#"
	//	element=[XEnumElement] | {XSignalLiteral} signal=[Signal];
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XCollectionLiteralElements getXCollectionLiteralAccess() {
		return (pXCollectionLiteral != null) ? pXCollectionLiteral : (pXCollectionLiteral = new XCollectionLiteralElements());
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XSetLiteralElements getXSetLiteralAccess() {
		return (pXSetLiteral != null) ? pXSetLiteral : (pXSetLiteral = new XSetLiteralElements());
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XListLiteralElements getXListLiteralAccess() {
		return (pXListLiteral != null) ? pXListLiteral : (pXListLiteral = new XListLiteralElements());
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return (pXParenthesizedExpression != null) ? pXParenthesizedExpression : (pXParenthesizedExpression = new XParenthesizedExpressionElements());
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression => ")" then=XExpression ("else" else=XExpression);
	public XIfExpressionElements getXIfExpressionAccess() {
		return (pXIfExpression != null) ? pXIfExpression : (pXIfExpression = new XIfExpressionElements());
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" "(" switch=XExpression => ")" => cases+=XCasePart+ ("default" ":" default=XExpression)?;
	public XSwitchExpressionElements getXSwitchExpressionAccess() {
		return (pXSwitchExpression != null) ? pXSwitchExpression : (pXSwitchExpression = new XSwitchExpressionElements());
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	"case" case=XExpression ":" then=XExpression;
	public XCasePartElements getXCasePartAccess() {
		return (pXCasePart != null) ? pXCasePart : (pXCasePart = new XCasePartElements());
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForEachExpression returns XExpression:
	//	{XForEachExpression} "for" "each" "(" forExpression=XExpression ")" eachExpression=XExpression;
	public XForEachExpressionElements getXForEachExpressionAccess() {
		return (pXForEachExpression != null) ? pXForEachExpression : (pXForEachExpression = new XForEachExpressionElements());
	}
	
	public ParserRule getXForEachExpressionRule() {
		return getXForEachExpressionAccess().getRule();
	}

	//XFunctionCallExpression returns XExpression:
	//	{XFunctionCallExpression} function=BuiltInFunction "(" arguments+=XExpression? ("," arguments+=XExpression)* ")";
	public XFunctionCallExpressionElements getXFunctionCallExpressionAccess() {
		return (pXFunctionCallExpression != null) ? pXFunctionCallExpression : (pXFunctionCallExpression = new XFunctionCallExpressionElements());
	}
	
	public ParserRule getXFunctionCallExpressionRule() {
		return getXFunctionCallExpressionAccess().getRule();
	}

	////Same functions as c math.*
	//BuiltInFunction:
	//	"Math.abs" | "Math.acos" | "Math.acosh" | "Math.asin" | "Math.asinh" | "Math.atan" | "Math.atanh" | "Math.atan2" |
	//	"Math.ceil" | "Math.clip" | "Math.cos" | "Math.cosh" | "Math.exp" | "Math.floor" | "Math.fround" | "Math.hypot" |
	//	"Math.log" | "Math.log10" | "Math.log2" | "Math.max" | "Math.min" | "Math.pow" | "Math.random" | "Math.round" |
	//	"Math.sign" | "Math.sin" | "Math.sinh" | "Math.sqrt" | "Math.tan" | "Math.tanh" | "Math.trunc" | "Set.orderby" |
	//	"Set.add" | "Set.find" | "Set.change" | "Set.remove";
	public BuiltInFunctionElements getBuiltInFunctionAccess() {
		return (pBuiltInFunction != null) ? pBuiltInFunction : (pBuiltInFunction = new BuiltInFunctionElements());
	}
	
	public ParserRule getBuiltInFunctionRule() {
		return getBuiltInFunctionAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Literals
	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XBooleanLiteralElements getXBooleanLiteralAccess() {
		return (pXBooleanLiteral != null) ? pXBooleanLiteral : (pXBooleanLiteral = new XBooleanLiteralElements());
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XNullLiteralElements getXNullLiteralAccess() {
		return (pXNullLiteral != null) ? pXNullLiteral : (pXNullLiteral = new XNullLiteralElements());
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=NUMBER;
	public XNumberLiteralElements getXNumberLiteralAccess() {
		return (pXNumberLiteral != null) ? pXNumberLiteral : (pXNumberLiteral = new XNumberLiteralElements());
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XStringLiteralElements getXStringLiteralAccess() {
		return (pXStringLiteral != null) ? pXStringLiteral : (pXStringLiteral = new XStringLiteralElements());
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XEnumElement:
	//	{XEnumLiteral} "#" name=ID;
	public XEnumElementElements getXEnumElementAccess() {
		return (pXEnumElement != null) ? pXEnumElement : (pXEnumElement = new XEnumElementElements());
	}
	
	public ParserRule getXEnumElementRule() {
		return getXEnumElementAccess().getRule();
	}

	////QualifiedName:
	////  ValidID (=>'.' ValidID)*;
	////Xtext Data types
	//NUMBER returns ecore::EDouble:
	//	INT ("." INT)?;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//// Terminals
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
