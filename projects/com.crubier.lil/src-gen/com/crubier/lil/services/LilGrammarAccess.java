/*
* generated by Xtext
*/
package com.crubier.lil.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class LilGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInteractorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInteractorsInteractorDeclarationParserRuleCall_0_0 = (RuleCall)cInteractorsAssignment_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypesDataTypeDeclarationParserRuleCall_1_0 = (RuleCall)cDataTypesAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Model
		//Model:
		//	(interactors+=InteractorDeclaration | dataTypes+=DataTypeDeclaration)*;
		public ParserRule getRule() { return rule; }

		//(interactors+=InteractorDeclaration | dataTypes+=DataTypeDeclaration)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//interactors+=InteractorDeclaration
		public Assignment getInteractorsAssignment_0() { return cInteractorsAssignment_0; }

		//InteractorDeclaration
		public RuleCall getInteractorsInteractorDeclarationParserRuleCall_0_0() { return cInteractorsInteractorDeclarationParserRuleCall_0_0; }

		//dataTypes+=DataTypeDeclaration
		public Assignment getDataTypesAssignment_1() { return cDataTypesAssignment_1; }

		//DataTypeDeclaration
		public RuleCall getDataTypesDataTypeDeclarationParserRuleCall_1_0() { return cDataTypesDataTypeDeclarationParserRuleCall_1_0; }
	}

	public class InteractorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEntitiesEntityDeclarationParserRuleCall_3_0_0 = (RuleCall)cEntitiesAssignment_3_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSignalsSignalDeclarationParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Assignment cBehaviorsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cBehaviorsBehaviorDeclarationParserRuleCall_3_2_0 = (RuleCall)cBehaviorsAssignment_3_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Interactor
		//InteractorDeclaration:
		//	"interactor" name=ID ":" (entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*;
		public ParserRule getRule() { return rule; }

		//"interactor" name=ID ":" (entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*
		public Group getGroup() { return cGroup; }

		//"interactor"
		public Keyword getInteractorKeyword_0() { return cInteractorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//entities+=EntityDeclaration
		public Assignment getEntitiesAssignment_3_0() { return cEntitiesAssignment_3_0; }

		//EntityDeclaration
		public RuleCall getEntitiesEntityDeclarationParserRuleCall_3_0_0() { return cEntitiesEntityDeclarationParserRuleCall_3_0_0; }

		//signals+=SignalDeclaration
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//SignalDeclaration
		public RuleCall getSignalsSignalDeclarationParserRuleCall_3_1_0() { return cSignalsSignalDeclarationParserRuleCall_3_1_0; }

		//behaviors+=BehaviorDeclaration
		public Assignment getBehaviorsAssignment_3_2() { return cBehaviorsAssignment_3_2; }

		//BehaviorDeclaration
		public RuleCall getBehaviorsBehaviorDeclarationParserRuleCall_3_2_0() { return cBehaviorsBehaviorDeclarationParserRuleCall_3_2_0; }
	}

	public class AccessibleEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessibleEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenericAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cGenericAlternatives_0_0 = (Alternatives)cGenericAssignment_0.eContents().get(0);
		private final Keyword cGenericAnyKeyword_0_0_0 = (Keyword)cGenericAlternatives_0_0.eContents().get(0);
		private final Keyword cGenericSelfKeyword_0_0_1 = (Keyword)cGenericAlternatives_0_0.eContents().get(1);
		private final Keyword cGenericOtherKeyword_0_0_2 = (Keyword)cGenericAlternatives_0_0.eContents().get(2);
		private final Keyword cGenericParentKeyword_0_0_3 = (Keyword)cGenericAlternatives_0_0.eContents().get(3);
		private final Keyword cGenericChildKeyword_0_0_4 = (Keyword)cGenericAlternatives_0_0.eContents().get(4);
		private final Keyword cGenericAllKeyword_0_0_5 = (Keyword)cGenericAlternatives_0_0.eContents().get(5);
		private final Keyword cGenericActorsKeyword_0_0_6 = (Keyword)cGenericAlternatives_0_0.eContents().get(6);
		private final Assignment cSpecificAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSpecificEntityParserRuleCall_1_0 = (RuleCall)cSpecificAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Entities
		//AccessibleEntity:
		//	generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors") | specific=Entity;
		public ParserRule getRule() { return rule; }

		//generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors") | specific=Entity
		public Alternatives getAlternatives() { return cAlternatives; }

		//generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors")
		public Assignment getGenericAssignment_0() { return cGenericAssignment_0; }

		//"any" | "self" | "other" | "parent" | "child" | "all" | "actors"
		public Alternatives getGenericAlternatives_0_0() { return cGenericAlternatives_0_0; }

		//"any"
		public Keyword getGenericAnyKeyword_0_0_0() { return cGenericAnyKeyword_0_0_0; }

		//"self"
		public Keyword getGenericSelfKeyword_0_0_1() { return cGenericSelfKeyword_0_0_1; }

		//"other"
		public Keyword getGenericOtherKeyword_0_0_2() { return cGenericOtherKeyword_0_0_2; }

		//"parent"
		public Keyword getGenericParentKeyword_0_0_3() { return cGenericParentKeyword_0_0_3; }

		//"child"
		public Keyword getGenericChildKeyword_0_0_4() { return cGenericChildKeyword_0_0_4; }

		//"all"
		public Keyword getGenericAllKeyword_0_0_5() { return cGenericAllKeyword_0_0_5; }

		//"actors"
		public Keyword getGenericActorsKeyword_0_0_6() { return cGenericActorsKeyword_0_0_6; }

		//specific=Entity
		public Assignment getSpecificAssignment_1() { return cSpecificAssignment_1; }

		//Entity
		public RuleCall getSpecificEntityParserRuleCall_1_0() { return cSpecificEntityParserRuleCall_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Assignment cInstanceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cInstanceEntityDeclarationCrossReference_0 = (CrossReference)cInstanceAssignment.eContents().get(0);
		private final RuleCall cInstanceEntityDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cInstanceEntityDeclarationCrossReference_0.eContents().get(1);
		
		//Entity:
		//	instance=[EntityDeclaration];
		public ParserRule getRule() { return rule; }

		//instance=[EntityDeclaration]
		public Assignment getInstanceAssignment() { return cInstanceAssignment; }

		//[EntityDeclaration]
		public CrossReference getInstanceEntityDeclarationCrossReference_0() { return cInstanceEntityDeclarationCrossReference_0; }

		//ID
		public RuleCall getInstanceEntityDeclarationIDTerminalRuleCall_0_1() { return cInstanceEntityDeclarationIDTerminalRuleCall_0_1; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Assignment cInstanceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cInstanceActorDeclarationCrossReference_0 = (CrossReference)cInstanceAssignment.eContents().get(0);
		private final RuleCall cInstanceActorDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cInstanceActorDeclarationCrossReference_0.eContents().get(1);
		
		//Actor:
		//	instance=[ActorDeclaration];
		public ParserRule getRule() { return rule; }

		//instance=[ActorDeclaration]
		public Assignment getInstanceAssignment() { return cInstanceAssignment; }

		//[ActorDeclaration]
		public CrossReference getInstanceActorDeclarationCrossReference_0() { return cInstanceActorDeclarationCrossReference_0; }

		//ID
		public RuleCall getInstanceActorDeclarationIDTerminalRuleCall_0_1() { return cInstanceActorDeclarationIDTerminalRuleCall_0_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Assignment cInstanceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cInstanceComponentDeclarationCrossReference_0 = (CrossReference)cInstanceAssignment.eContents().get(0);
		private final RuleCall cInstanceComponentDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cInstanceComponentDeclarationCrossReference_0.eContents().get(1);
		
		//Component:
		//	instance=[ComponentDeclaration];
		public ParserRule getRule() { return rule; }

		//instance=[ComponentDeclaration]
		public Assignment getInstanceAssignment() { return cInstanceAssignment; }

		//[ComponentDeclaration]
		public CrossReference getInstanceComponentDeclarationCrossReference_0() { return cInstanceComponentDeclarationCrossReference_0; }

		//ID
		public RuleCall getInstanceComponentDeclarationIDTerminalRuleCall_0_1() { return cInstanceComponentDeclarationIDTerminalRuleCall_0_1; }
	}

	public class EntityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityDeclaration:
		//	ActorDeclaration | ComponentDeclaration;
		public ParserRule getRule() { return rule; }

		//ActorDeclaration | ComponentDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActorDeclaration
		public RuleCall getActorDeclarationParserRuleCall_0() { return cActorDeclarationParserRuleCall_0; }

		//ComponentDeclaration
		public RuleCall getComponentDeclarationParserRuleCall_1() { return cComponentDeclarationParserRuleCall_1; }
	}

	public class ActorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ActorDeclaration:
		//	"actor" name=ID;
		public ParserRule getRule() { return rule; }

		//"actor" name=ID
		public Group getGroup() { return cGroup; }

		//"actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ActorAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceActorParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRemoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRemoteActorParserRuleCall_2_0 = (RuleCall)cRemoteAssignment_2.eContents().get(0);
		
		//ActorAlias:
		//	source=Actor "as" remote=Actor;
		public ParserRule getRule() { return rule; }

		//source=Actor "as" remote=Actor
		public Group getGroup() { return cGroup; }

		//source=Actor
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//Actor
		public RuleCall getSourceActorParserRuleCall_0_0() { return cSourceActorParserRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//remote=Actor
		public Assignment getRemoteAssignment_2() { return cRemoteAssignment_2; }

		//Actor
		public RuleCall getRemoteActorParserRuleCall_2_0() { return cRemoteActorParserRuleCall_2_0; }
	}

	public class ComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInteractorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInteractorInteractorDeclarationCrossReference_0_0 = (CrossReference)cInteractorAssignment_0.eContents().get(0);
		private final RuleCall cInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInteractorInteractorDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesActorAliasParserRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAliasesActorAliasParserRuleCall_2_2_1_0 = (RuleCall)cAliasesAssignment_2_2_1.eContents().get(0);
		
		//ComponentDeclaration:
		//	interactor=[InteractorDeclaration] name=ID ("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?;
		public ParserRule getRule() { return rule; }

		//interactor=[InteractorDeclaration] name=ID ("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?
		public Group getGroup() { return cGroup; }

		//interactor=[InteractorDeclaration]
		public Assignment getInteractorAssignment_0() { return cInteractorAssignment_0; }

		//[InteractorDeclaration]
		public CrossReference getInteractorInteractorDeclarationCrossReference_0_0() { return cInteractorInteractorDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1() { return cInteractorInteractorDeclarationIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//aliases+=ActorAlias
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }

		//ActorAlias
		public RuleCall getAliasesActorAliasParserRuleCall_2_1_0() { return cAliasesActorAliasParserRuleCall_2_1_0; }

		//("," aliases+=ActorAlias)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//aliases+=ActorAlias
		public Assignment getAliasesAssignment_2_2_1() { return cAliasesAssignment_2_2_1; }

		//ActorAlias
		public RuleCall getAliasesActorAliasParserRuleCall_2_2_1_0() { return cAliasesActorAliasParserRuleCall_2_2_1_0; }
	}

	public class EventReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventReception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstanceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cInstanceEventDeclarationCrossReference_0_0_0 = (CrossReference)cInstanceAssignment_0_0.eContents().get(0);
		private final RuleCall cInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cInstanceEventDeclarationCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFromKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSourceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSourceComponentParserRuleCall_0_1_1_0 = (RuleCall)cSourceAssignment_0_1_1.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBaseInitKeyword_1_0 = (Keyword)cBaseAssignment_1.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Signals
		//EventReception:
		//	instance=[EventDeclaration] ("from" source=Component)? | base="init";
		public ParserRule getRule() { return rule; }

		//instance=[EventDeclaration] ("from" source=Component)? | base="init"
		public Alternatives getAlternatives() { return cAlternatives; }

		//instance=[EventDeclaration] ("from" source=Component)?
		public Group getGroup_0() { return cGroup_0; }

		//instance=[EventDeclaration]
		public Assignment getInstanceAssignment_0_0() { return cInstanceAssignment_0_0; }

		//[EventDeclaration]
		public CrossReference getInstanceEventDeclarationCrossReference_0_0_0() { return cInstanceEventDeclarationCrossReference_0_0_0; }

		//ID
		public RuleCall getInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1() { return cInstanceEventDeclarationIDTerminalRuleCall_0_0_0_1; }

		//("from" source=Component)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"from"
		public Keyword getFromKeyword_0_1_0() { return cFromKeyword_0_1_0; }

		//source=Component
		public Assignment getSourceAssignment_0_1_1() { return cSourceAssignment_0_1_1; }

		//Component
		public RuleCall getSourceComponentParserRuleCall_0_1_1_0() { return cSourceComponentParserRuleCall_0_1_1_0; }

		//base="init"
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//"init"
		public Keyword getBaseInitKeyword_1_0() { return cBaseInitKeyword_1_0; }
	}

	public class FlowReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowReception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceFlowDeclarationCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceFlowDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSourceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSourceComponentParserRuleCall_1_1_0 = (RuleCall)cSourceAssignment_1_1.eContents().get(0);
		
		//FlowReception:
		//	instance=[FlowDeclaration] ("from" source=Component)?;
		public ParserRule getRule() { return rule; }

		//instance=[FlowDeclaration] ("from" source=Component)?
		public Group getGroup() { return cGroup; }

		//instance=[FlowDeclaration]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[FlowDeclaration]
		public CrossReference getInstanceFlowDeclarationCrossReference_0_0() { return cInstanceFlowDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInstanceFlowDeclarationIDTerminalRuleCall_0_0_1() { return cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1; }

		//("from" source=Component)?
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//source=Component
		public Assignment getSourceAssignment_1_1() { return cSourceAssignment_1_1; }

		//Component
		public RuleCall getSourceComponentParserRuleCall_1_1_0() { return cSourceComponentParserRuleCall_1_1_0; }
	}

	public class EventEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventEmission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceEventDeclarationCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceEventDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceEventDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDestinationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDestinationComponentParserRuleCall_1_1_0 = (RuleCall)cDestinationAssignment_1_1.eContents().get(0);
		
		//EventEmission:
		//	instance=[EventDeclaration] ("to" destination=Component)?;
		public ParserRule getRule() { return rule; }

		//instance=[EventDeclaration] ("to" destination=Component)?
		public Group getGroup() { return cGroup; }

		//instance=[EventDeclaration]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[EventDeclaration]
		public CrossReference getInstanceEventDeclarationCrossReference_0_0() { return cInstanceEventDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInstanceEventDeclarationIDTerminalRuleCall_0_0_1() { return cInstanceEventDeclarationIDTerminalRuleCall_0_0_1; }

		//("to" destination=Component)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//destination=Component
		public Assignment getDestinationAssignment_1_1() { return cDestinationAssignment_1_1; }

		//Component
		public RuleCall getDestinationComponentParserRuleCall_1_1_0() { return cDestinationComponentParserRuleCall_1_1_0; }
	}

	public class FlowEmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowEmission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceFlowDeclarationCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceFlowDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDestinationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDestinationComponentParserRuleCall_1_1_0 = (RuleCall)cDestinationAssignment_1_1.eContents().get(0);
		
		//FlowEmission:
		//	instance=[FlowDeclaration] ("to" destination=Component)?;
		public ParserRule getRule() { return rule; }

		//instance=[FlowDeclaration] ("to" destination=Component)?
		public Group getGroup() { return cGroup; }

		//instance=[FlowDeclaration]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[FlowDeclaration]
		public CrossReference getInstanceFlowDeclarationCrossReference_0_0() { return cInstanceFlowDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getInstanceFlowDeclarationIDTerminalRuleCall_0_0_1() { return cInstanceFlowDeclarationIDTerminalRuleCall_0_0_1; }

		//("to" destination=Component)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//destination=Component
		public Assignment getDestinationAssignment_1_1() { return cDestinationAssignment_1_1; }

		//Component
		public RuleCall getDestinationComponentParserRuleCall_1_1_0() { return cDestinationComponentParserRuleCall_1_1_0; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlowDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalDeclaration:
		//	EventDeclaration | FlowDeclaration;
		public ParserRule getRule() { return rule; }

		//EventDeclaration | FlowDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_0() { return cEventDeclarationParserRuleCall_0; }

		//FlowDeclaration
		public RuleCall getFlowDeclarationParserRuleCall_1() { return cFlowDeclarationParserRuleCall_1; }
	}

	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceAccessibleEntityParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDestinationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDestinationsAccessibleEntityParserRuleCall_4_1_0 = (RuleCall)cDestinationsAssignment_4_1.eContents().get(0);
		
		//EventDeclaration:
		//	type=DataType "event" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
		public ParserRule getRule() { return rule; }

		//type=DataType "event" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("from" source=AccessibleEntity)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//source=AccessibleEntity
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//AccessibleEntity
		public RuleCall getSourceAccessibleEntityParserRuleCall_3_1_0() { return cSourceAccessibleEntityParserRuleCall_3_1_0; }

		//("to" destinations+=AccessibleEntity)*
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//destinations+=AccessibleEntity
		public Assignment getDestinationsAssignment_4_1() { return cDestinationsAssignment_4_1; }

		//AccessibleEntity
		public RuleCall getDestinationsAccessibleEntityParserRuleCall_4_1_0() { return cDestinationsAccessibleEntityParserRuleCall_4_1_0; }
	}

	public class FlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceAccessibleEntityParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDestinationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDestinationsAccessibleEntityParserRuleCall_4_1_0 = (RuleCall)cDestinationsAssignment_4_1.eContents().get(0);
		
		//FlowDeclaration:
		//	type=DataType "flow" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
		public ParserRule getRule() { return rule; }

		//type=DataType "flow" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//"flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("from" source=AccessibleEntity)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//source=AccessibleEntity
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//AccessibleEntity
		public RuleCall getSourceAccessibleEntityParserRuleCall_3_1_0() { return cSourceAccessibleEntityParserRuleCall_3_1_0; }

		//("to" destinations+=AccessibleEntity)*
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//destinations+=AccessibleEntity
		public Assignment getDestinationsAssignment_4_1() { return cDestinationsAssignment_4_1; }

		//AccessibleEntity
		public RuleCall getDestinationsAccessibleEntityParserRuleCall_4_1_0() { return cDestinationsAccessibleEntityParserRuleCall_4_1_0; }
	}

	public class BehaviorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCauseCauseParserRuleCall_0_0 = (RuleCall)cCauseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffectsEffectParserRuleCall_2_0 = (RuleCall)cEffectsAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Behaviors
		//BehaviorDeclaration:
		//	cause=Cause ":" effects+=Effect+;
		public ParserRule getRule() { return rule; }

		//cause=Cause ":" effects+=Effect+
		public Group getGroup() { return cGroup; }

		//cause=Cause
		public Assignment getCauseAssignment_0() { return cCauseAssignment_0; }

		//Cause
		public RuleCall getCauseCauseParserRuleCall_0_0() { return cCauseCauseParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//effects+=Effect+
		public Assignment getEffectsAssignment_2() { return cEffectsAssignment_2; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_2_0() { return cEffectsEffectParserRuleCall_2_0; }
	}

	public class CauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnCauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenCauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Cause:
		//	OnCause | WhenCause;
		public ParserRule getRule() { return rule; }

		//OnCause | WhenCause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OnCause
		public RuleCall getOnCauseParserRuleCall_0() { return cOnCauseParserRuleCall_0; }

		//WhenCause
		public RuleCall getWhenCauseParserRuleCall_1() { return cWhenCauseParserRuleCall_1; }
	}

	public class OnCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventReceptionParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//OnCause:
		//	"on" event=EventReception ("if" guard=Expression)?;
		public ParserRule getRule() { return rule; }

		//"on" event=EventReception ("if" guard=Expression)?
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=EventReception
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//EventReception
		public RuleCall getEventEventReceptionParserRuleCall_1_0() { return cEventEventReceptionParserRuleCall_1_0; }

		//("if" guard=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=Expression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_1_0() { return cGuardExpressionParserRuleCall_2_1_0; }
	}

	public class WhenCauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenCause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		
		//WhenCause:
		//	"when" condition=Expression ("if" guard=Expression)?;
		public ParserRule getRule() { return rule; }

		//"when" condition=Expression ("if" guard=Expression)?
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//("if" guard=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//guard=Expression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_1_0() { return cGuardExpressionParserRuleCall_2_1_0; }
	}

	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlwaysEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect:
		//	AlwaysEffect | SetEffect | TriggerEffect;
		public ParserRule getRule() { return rule; }

		//AlwaysEffect | SetEffect | TriggerEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//AlwaysEffect
		public RuleCall getAlwaysEffectParserRuleCall_0() { return cAlwaysEffectParserRuleCall_0; }

		//SetEffect
		public RuleCall getSetEffectParserRuleCall_1() { return cSetEffectParserRuleCall_1; }

		//TriggerEffect
		public RuleCall getTriggerEffectParserRuleCall_2() { return cTriggerEffectParserRuleCall_2; }
	}

	public class AlwaysEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlwaysEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlwaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetFlowEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AlwaysEffect:
		//	"always" target=FlowEmission "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"always" target=FlowEmission "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"always"
		public Keyword getAlwaysKeyword_0() { return cAlwaysKeyword_0; }

		//target=FlowEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//FlowEmission
		public RuleCall getTargetFlowEmissionParserRuleCall_1_0() { return cTargetFlowEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class SetEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetFlowEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SetEffect:
		//	"set" target=FlowEmission "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"set" target=FlowEmission "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//target=FlowEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//FlowEmission
		public RuleCall getTargetFlowEmissionParserRuleCall_1_0() { return cTargetFlowEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class TriggerEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEventEmissionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//TriggerEffect:
		//	"trigger" target=EventEmission "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"trigger" target=EventEmission "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//target=EventEmission
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//EventEmission
		public RuleCall getTargetEventEmissionParserRuleCall_1_0() { return cTargetEventEmissionParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cNumberExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	NumberExpression;
		public ParserRule getRule() { return rule; }

		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall() { return cNumberExpressionParserRuleCall; }
	}

	public class DataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Structure
		//DataTypeDeclaration:
		//	"data" "type" name=ID ":" fields+=Field*;
		public ParserRule getRule() { return rule; }

		//"data" "type" name=ID ":" fields+=Field*
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//fields+=Field*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_0() { return cFieldsFieldParserRuleCall_4_0; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Field:
		//	type=DataType name=ID;
		public ParserRule getRule() { return rule; }

		//type=DataType name=ID
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCompoundAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cCompoundDataTypeDeclarationCrossReference_0_0 = (CrossReference)cCompoundAssignment_0.eContents().get(0);
		private final RuleCall cCompoundDataTypeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cCompoundDataTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cBaseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBaseDataTypeBaseParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		
		//DataType:
		//	compound=[DataTypeDeclaration] | base=DataTypeBase;
		public ParserRule getRule() { return rule; }

		//compound=[DataTypeDeclaration] | base=DataTypeBase
		public Alternatives getAlternatives() { return cAlternatives; }

		//compound=[DataTypeDeclaration]
		public Assignment getCompoundAssignment_0() { return cCompoundAssignment_0; }

		//[DataTypeDeclaration]
		public CrossReference getCompoundDataTypeDeclarationCrossReference_0_0() { return cCompoundDataTypeDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getCompoundDataTypeDeclarationIDTerminalRuleCall_0_0_1() { return cCompoundDataTypeDeclarationIDTerminalRuleCall_0_0_1; }

		//base=DataTypeBase
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//DataTypeBase
		public RuleCall getBaseDataTypeBaseParserRuleCall_1_0() { return cBaseDataTypeBaseParserRuleCall_1_0; }
	}

	public class DataTypeBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSymbolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTimeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cReferenceKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//DataTypeBase:
		//	"void" | "symbol" | "number" | "text" | "time" | "reference";
		public ParserRule getRule() { return rule; }

		//"void" | "symbol" | "number" | "text" | "time" | "reference"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//"symbol"
		public Keyword getSymbolKeyword_1() { return cSymbolKeyword_1; }

		//"number"
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }

		//"text"
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }

		//"time"
		public Keyword getTimeKeyword_4() { return cTimeKeyword_4; }

		//"reference"
		public Keyword getReferenceKeyword_5() { return cReferenceKeyword_5; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final RuleCall cBooleanDisjonctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Expressions
		////We do not use xbase because we only need a small subset of it in order to be able to generate c code and in order to simplify the language
		////Booleans
		//BooleanExpression:
		//	BooleanDisjonction;
		public ParserRule getRule() { return rule; }

		//BooleanDisjonction
		public RuleCall getBooleanDisjonctionParserRuleCall() { return cBooleanDisjonctionParserRuleCall; }
	}

	public class BooleanDisjonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanDisjonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanConjonctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBooleanDisjonctionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBooleanConjonctionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanDisjonction returns BooleanExpression:
		//	BooleanConjonction (({BooleanDisjonction.left=current} "or") right=BooleanConjonction)*;
		public ParserRule getRule() { return rule; }

		//BooleanConjonction (({BooleanDisjonction.left=current} "or") right=BooleanConjonction)*
		public Group getGroup() { return cGroup; }

		//BooleanConjonction
		public RuleCall getBooleanConjonctionParserRuleCall_0() { return cBooleanConjonctionParserRuleCall_0; }

		//(({BooleanDisjonction.left=current} "or") right=BooleanConjonction)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanDisjonction.left=current} "or"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BooleanDisjonction.left=current}
		public Action getBooleanDisjonctionLeftAction_1_0_0() { return cBooleanDisjonctionLeftAction_1_0_0; }

		//"or"
		public Keyword getOrKeyword_1_0_1() { return cOrKeyword_1_0_1; }

		//right=BooleanConjonction
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BooleanConjonction
		public RuleCall getRightBooleanConjonctionParserRuleCall_1_1_0() { return cRightBooleanConjonctionParserRuleCall_1_1_0; }
	}

	public class BooleanConjonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConjonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBooleanConjonctionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBooleanUnaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanConjonction returns BooleanExpression:
		//	BooleanUnary (({BooleanConjonction.left=current} "and") right=BooleanUnary)*;
		public ParserRule getRule() { return rule; }

		//BooleanUnary (({BooleanConjonction.left=current} "and") right=BooleanUnary)*
		public Group getGroup() { return cGroup; }

		//BooleanUnary
		public RuleCall getBooleanUnaryParserRuleCall_0() { return cBooleanUnaryParserRuleCall_0; }

		//(({BooleanConjonction.left=current} "and") right=BooleanUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanConjonction.left=current} "and"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BooleanConjonction.left=current}
		public Action getBooleanConjonctionLeftAction_1_0_0() { return cBooleanConjonctionLeftAction_1_0_0; }

		//"and"
		public Keyword getAndKeyword_1_0_1() { return cAndKeyword_1_0_1; }

		//right=BooleanUnary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BooleanUnary
		public RuleCall getRightBooleanUnaryParserRuleCall_1_1_0() { return cRightBooleanUnaryParserRuleCall_1_1_0; }
	}

	public class BooleanUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBooleanNegationAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandBooleanTerminalExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		
		//BooleanUnary returns BooleanExpression:
		//	BooleanTerminalExpression | ({BooleanNegation} "!") operand=BooleanTerminalExpression;
		public ParserRule getRule() { return rule; }

		//BooleanTerminalExpression | ({BooleanNegation} "!") operand=BooleanTerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanTerminalExpression
		public RuleCall getBooleanTerminalExpressionParserRuleCall_0() { return cBooleanTerminalExpressionParserRuleCall_0; }

		//({BooleanNegation} "!") operand=BooleanTerminalExpression
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanNegation} "!"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BooleanNegation}
		public Action getBooleanNegationAction_1_0_0() { return cBooleanNegationAction_1_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0_1() { return cExclamationMarkKeyword_1_0_1; }

		//operand=BooleanTerminalExpression
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }

		//BooleanTerminalExpression
		public RuleCall getOperandBooleanTerminalExpressionParserRuleCall_1_1_0() { return cOperandBooleanTerminalExpressionParserRuleCall_1_1_0; }
	}

	public class BooleanTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueBooleanLiteralParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//BooleanTerminalExpression returns BooleanExpression:
		//	"(" BooleanExpression ")" | {BooleanLiteral} value=BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//"(" BooleanExpression ")" | {BooleanLiteral} value=BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" BooleanExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0_1() { return cBooleanExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{BooleanLiteral} value=BooleanLiteral
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }

		//value=BooleanLiteral
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//BooleanLiteral
		public RuleCall getValueBooleanLiteralParserRuleCall_1_1_0() { return cValueBooleanLiteralParserRuleCall_1_1_0; }
	}

	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberExpression");
		private final RuleCall cNumberCompoundExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Numbers
		//NumberExpression:
		//	NumberCompoundExpression;
		public ParserRule getRule() { return rule; }

		//NumberCompoundExpression
		public RuleCall getNumberCompoundExpressionParserRuleCall() { return cNumberCompoundExpressionParserRuleCall; }
	}

	public class NumberCompoundExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberCompoundExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberAdditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberIfExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cIfAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIfBooleanExpressionParserRuleCall_1_3_0 = (RuleCall)cIfAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cThenAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cThenNumberAdditionParserRuleCall_1_5_0 = (RuleCall)cThenAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cElseKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cElseAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cElseNumberAdditionParserRuleCall_1_6_1_0 = (RuleCall)cElseAssignment_1_6_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberSwitchExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSwitchKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSwitchAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSwitchNumberExpressionParserRuleCall_2_3_0 = (RuleCall)cSwitchAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cCasesAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cCasesNumberSwitchExpressionNumberCaseParserRuleCall_2_5_0 = (RuleCall)cCasesAssignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cDefaultKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Keyword cColonKeyword_2_6_1 = (Keyword)cGroup_2_6.eContents().get(1);
		private final Assignment cDefaultAssignment_2_6_2 = (Assignment)cGroup_2_6.eContents().get(2);
		private final RuleCall cDefaultNumberExpressionParserRuleCall_2_6_2_0 = (RuleCall)cDefaultAssignment_2_6_2.eContents().get(0);
		
		//NumberCompoundExpression returns NumberExpression:
		//	NumberAddition | {NumberIfExpression} "if" "(" if=BooleanExpression ")" then=NumberAddition ("else"
		//	else=NumberAddition)? | {NumberSwitchExpression} "switch" "(" switch=NumberExpression ")" =>
		//	cases+=NumberSwitchExpressionNumberCase+ ("default" ":" default=NumberExpression)?;
		public ParserRule getRule() { return rule; }

		//NumberAddition | {NumberIfExpression} "if" "(" if=BooleanExpression ")" then=NumberAddition ("else"
		//else=NumberAddition)? | {NumberSwitchExpression} "switch" "(" switch=NumberExpression ")" =>
		//cases+=NumberSwitchExpressionNumberCase+ ("default" ":" default=NumberExpression)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberAddition
		public RuleCall getNumberAdditionParserRuleCall_0() { return cNumberAdditionParserRuleCall_0; }

		//{NumberIfExpression} "if" "(" if=BooleanExpression ")" then=NumberAddition ("else" else=NumberAddition)?
		public Group getGroup_1() { return cGroup_1; }

		//{NumberIfExpression}
		public Action getNumberIfExpressionAction_1_0() { return cNumberIfExpressionAction_1_0; }

		//"if"
		public Keyword getIfKeyword_1_1() { return cIfKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//if=BooleanExpression
		public Assignment getIfAssignment_1_3() { return cIfAssignment_1_3; }

		//BooleanExpression
		public RuleCall getIfBooleanExpressionParserRuleCall_1_3_0() { return cIfBooleanExpressionParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//then=NumberAddition
		public Assignment getThenAssignment_1_5() { return cThenAssignment_1_5; }

		//NumberAddition
		public RuleCall getThenNumberAdditionParserRuleCall_1_5_0() { return cThenNumberAdditionParserRuleCall_1_5_0; }

		//(=> "else" else=NumberAddition)?
		public Group getGroup_1_6() { return cGroup_1_6; }

		//=> "else"
		public Keyword getElseKeyword_1_6_0() { return cElseKeyword_1_6_0; }

		//else=NumberAddition
		public Assignment getElseAssignment_1_6_1() { return cElseAssignment_1_6_1; }

		//NumberAddition
		public RuleCall getElseNumberAdditionParserRuleCall_1_6_1_0() { return cElseNumberAdditionParserRuleCall_1_6_1_0; }

		//{NumberSwitchExpression} "switch" "(" switch=NumberExpression ")" => cases+=NumberSwitchExpressionNumberCase+ ("default"
		//":" default=NumberExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//{NumberSwitchExpression}
		public Action getNumberSwitchExpressionAction_2_0() { return cNumberSwitchExpressionAction_2_0; }

		//"switch"
		public Keyword getSwitchKeyword_2_1() { return cSwitchKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//switch=NumberExpression
		public Assignment getSwitchAssignment_2_3() { return cSwitchAssignment_2_3; }

		//NumberExpression
		public RuleCall getSwitchNumberExpressionParserRuleCall_2_3_0() { return cSwitchNumberExpressionParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//=> cases+=NumberSwitchExpressionNumberCase+
		public Assignment getCasesAssignment_2_5() { return cCasesAssignment_2_5; }

		//NumberSwitchExpressionNumberCase
		public RuleCall getCasesNumberSwitchExpressionNumberCaseParserRuleCall_2_5_0() { return cCasesNumberSwitchExpressionNumberCaseParserRuleCall_2_5_0; }

		//(=> "default" ":" default=NumberExpression)?
		public Group getGroup_2_6() { return cGroup_2_6; }

		//=> "default"
		public Keyword getDefaultKeyword_2_6_0() { return cDefaultKeyword_2_6_0; }

		//":"
		public Keyword getColonKeyword_2_6_1() { return cColonKeyword_2_6_1; }

		//default=NumberExpression
		public Assignment getDefaultAssignment_2_6_2() { return cDefaultAssignment_2_6_2; }

		//NumberExpression
		public RuleCall getDefaultNumberExpressionParserRuleCall_2_6_2_0() { return cDefaultNumberExpressionParserRuleCall_2_6_2_0; }
	}

	public class NumberSwitchExpressionNumberCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberSwitchExpressionNumberCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionNumberExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueNumberExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//NumberSwitchExpressionNumberCase:
		//	"case" condition=NumberExpression ":" value=NumberExpression;
		public ParserRule getRule() { return rule; }

		//"case" condition=NumberExpression ":" value=NumberExpression
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//condition=NumberExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//NumberExpression
		public RuleCall getConditionNumberExpressionParserRuleCall_1_0() { return cConditionNumberExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=NumberExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//NumberExpression
		public RuleCall getValueNumberExpressionParserRuleCall_3_0() { return cValueNumberExpressionParserRuleCall_3_0; }
	}

	public class NumberAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cNumberAdditionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNumberSubstractionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightNumberMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//NumberAddition returns NumberExpression:
		//	NumberMultiplication (({NumberAddition.left=current} "+" | {NumberSubstraction.left=current} "-")
		//	right=NumberMultiplication)*;
		public ParserRule getRule() { return rule; }

		//NumberMultiplication (({NumberAddition.left=current} "+" | {NumberSubstraction.left=current} "-")
		//right=NumberMultiplication)*
		public Group getGroup() { return cGroup; }

		//NumberMultiplication
		public RuleCall getNumberMultiplicationParserRuleCall_0() { return cNumberMultiplicationParserRuleCall_0; }

		//(({NumberAddition.left=current} "+" | {NumberSubstraction.left=current} "-") right=NumberMultiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumberAddition.left=current} "+" | {NumberSubstraction.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{NumberAddition.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{NumberAddition.left=current}
		public Action getNumberAdditionLeftAction_1_0_0_0() { return cNumberAdditionLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{NumberSubstraction.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{NumberSubstraction.left=current}
		public Action getNumberSubstractionLeftAction_1_0_1_0() { return cNumberSubstractionLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=NumberMultiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//NumberMultiplication
		public RuleCall getRightNumberMultiplicationParserRuleCall_1_1_0() { return cRightNumberMultiplicationParserRuleCall_1_1_0; }
	}

	public class NumberMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberMultiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberPowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cNumberMultiplicationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNumberDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cNumberModuloLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightNumberPowerParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//NumberMultiplication returns NumberExpression:
		//	NumberPower (({NumberMultiplication.left=current} "*" | {NumberDivision.left=current} "/" |
		//	{NumberModulo.left=current} "%") right=NumberPower)*;
		public ParserRule getRule() { return rule; }

		//NumberPower (({NumberMultiplication.left=current} "*" | {NumberDivision.left=current} "/" | {NumberModulo.left=current}
		//"%") right=NumberPower)*
		public Group getGroup() { return cGroup; }

		//NumberPower
		public RuleCall getNumberPowerParserRuleCall_0() { return cNumberPowerParserRuleCall_0; }

		//(({NumberMultiplication.left=current} "*" | {NumberDivision.left=current} "/" | {NumberModulo.left=current} "%")
		//right=NumberPower)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumberMultiplication.left=current} "*" | {NumberDivision.left=current} "/" | {NumberModulo.left=current} "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{NumberMultiplication.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{NumberMultiplication.left=current}
		public Action getNumberMultiplicationLeftAction_1_0_0_0() { return cNumberMultiplicationLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{NumberDivision.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{NumberDivision.left=current}
		public Action getNumberDivisionLeftAction_1_0_1_0() { return cNumberDivisionLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//{NumberModulo.left=current} "%"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{NumberModulo.left=current}
		public Action getNumberModuloLeftAction_1_0_2_0() { return cNumberModuloLeftAction_1_0_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }

		//right=NumberPower
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//NumberPower
		public RuleCall getRightNumberPowerParserRuleCall_1_1_0() { return cRightNumberPowerParserRuleCall_1_1_0; }
	}

	public class NumberPowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberPower");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cNumberPowerLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightNumberUnaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//NumberPower returns NumberExpression:
		//	NumberUnary (({NumberPower.left=current} "^") right=NumberUnary)*;
		public ParserRule getRule() { return rule; }

		//NumberUnary (({NumberPower.left=current} "^") right=NumberUnary)*
		public Group getGroup() { return cGroup; }

		//NumberUnary
		public RuleCall getNumberUnaryParserRuleCall_0() { return cNumberUnaryParserRuleCall_0; }

		//(({NumberPower.left=current} "^") right=NumberUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumberPower.left=current} "^"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{NumberPower.left=current}
		public Action getNumberPowerLeftAction_1_0_0() { return cNumberPowerLeftAction_1_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_1() { return cCircumflexAccentKeyword_1_0_1; }

		//right=NumberUnary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//NumberUnary
		public RuleCall getRightNumberUnaryParserRuleCall_1_1_0() { return cRightNumberUnaryParserRuleCall_1_1_0; }
	}

	public class NumberUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cNumberOppositionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandNumberTerminalExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		
		//NumberUnary returns NumberExpression:
		//	NumberTerminalExpression | ({NumberOpposition} "-") operand=NumberTerminalExpression;
		public ParserRule getRule() { return rule; }

		//NumberTerminalExpression | ({NumberOpposition} "-") operand=NumberTerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberTerminalExpression
		public RuleCall getNumberTerminalExpressionParserRuleCall_0() { return cNumberTerminalExpressionParserRuleCall_0; }

		//({NumberOpposition} "-") operand=NumberTerminalExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NumberOpposition} "-"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{NumberOpposition}
		public Action getNumberOppositionAction_1_0_0() { return cNumberOppositionAction_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//operand=NumberTerminalExpression
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }

		//NumberTerminalExpression
		public RuleCall getOperandNumberTerminalExpressionParserRuleCall_1_1_0() { return cOperandNumberTerminalExpressionParserRuleCall_1_1_0; }
	}

	public class NumberTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNumberLiteralParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberFunctionExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cFunctionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionIDTerminalRuleCall_2_1_0 = (RuleCall)cFunctionAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsNumberExpressionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cArgumentsNumberExpressionParserRuleCall_2_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		
		//NumberTerminalExpression returns NumberExpression:
		//	"(" NumberExpression ")" | {NumberLiteral} value=NumberLiteral | {NumberFunctionExpression} function=ID ("("
		//	arguments+=NumberExpression ("," arguments+=NumberExpression)* ")")?;
		public ParserRule getRule() { return rule; }

		//"(" NumberExpression ")" | {NumberLiteral} value=NumberLiteral | {NumberFunctionExpression} function=ID ("("
		//arguments+=NumberExpression ("," arguments+=NumberExpression)* ")")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" NumberExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_0_1() { return cNumberExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{NumberLiteral} value=NumberLiteral
		public Group getGroup_1() { return cGroup_1; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }

		//value=NumberLiteral
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//NumberLiteral
		public RuleCall getValueNumberLiteralParserRuleCall_1_1_0() { return cValueNumberLiteralParserRuleCall_1_1_0; }

		//{NumberFunctionExpression} function=ID ("(" arguments+=NumberExpression ("," arguments+=NumberExpression)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//{NumberFunctionExpression}
		public Action getNumberFunctionExpressionAction_2_0() { return cNumberFunctionExpressionAction_2_0; }

		//function=ID
		public Assignment getFunctionAssignment_2_1() { return cFunctionAssignment_2_1; }

		//ID
		public RuleCall getFunctionIDTerminalRuleCall_2_1_0() { return cFunctionIDTerminalRuleCall_2_1_0; }

		//("(" arguments+=NumberExpression ("," arguments+=NumberExpression)* ")")?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }

		//arguments+=NumberExpression
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//NumberExpression
		public RuleCall getArgumentsNumberExpressionParserRuleCall_2_2_1_0() { return cArgumentsNumberExpressionParserRuleCall_2_2_1_0; }

		//("," arguments+=NumberExpression)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }

		//arguments+=NumberExpression
		public Assignment getArgumentsAssignment_2_2_2_1() { return cArgumentsAssignment_2_2_2_1; }

		//NumberExpression
		public RuleCall getArgumentsNumberExpressionParserRuleCall_2_2_2_1_0() { return cArgumentsNumberExpressionParserRuleCall_2_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2_3() { return cRightParenthesisKeyword_2_2_3; }
	}

	public class SymbolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolLiteral");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////Data type rules, are almost terminals
		//SymbolLiteral returns ecore::EString:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cYesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BooleanLiteral returns ecore::EBoolean:
		//	"true" | "yes" | "false" | "no";
		public ParserRule getRule() { return rule; }

		//"true" | "yes" | "false" | "no"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"yes"
		public Keyword getYesKeyword_1() { return cYesKeyword_1; }

		//"false"
		public Keyword getFalseKeyword_2() { return cFalseKeyword_2; }

		//"no"
		public Keyword getNoKeyword_3() { return cNoKeyword_3; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NumberLiteral returns ecore::EDouble:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class TextLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TextLiteral returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cMsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cSKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cMKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cHKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cFullStopKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Keyword cDKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//TimeLiteral returns ecore::ELong:
		//	INT "ms" | INT ("." INT)? "s" | INT ("." INT)? "m" | INT ("." INT)? "h" | INT ("." INT)? "d";
		public ParserRule getRule() { return rule; }

		//INT "ms" | INT ("." INT)? "s" | INT ("." INT)? "m" | INT ("." INT)? "h" | INT ("." INT)? "d"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "ms"
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"ms"
		public Keyword getMsKeyword_0_1() { return cMsKeyword_0_1; }

		//INT ("." INT)? "s"
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//("." INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }

		//"s"
		public Keyword getSKeyword_1_2() { return cSKeyword_1_2; }

		//INT ("." INT)? "m"
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//("." INT)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"."
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1_1() { return cINTTerminalRuleCall_2_1_1; }

		//"m"
		public Keyword getMKeyword_2_2() { return cMKeyword_2_2; }

		//INT ("." INT)? "h"
		public Group getGroup_3() { return cGroup_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_0() { return cINTTerminalRuleCall_3_0; }

		//("." INT)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"."
		public Keyword getFullStopKeyword_3_1_0() { return cFullStopKeyword_3_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_1_1() { return cINTTerminalRuleCall_3_1_1; }

		//"h"
		public Keyword getHKeyword_3_2() { return cHKeyword_3_2; }

		//INT ("." INT)? "d"
		public Group getGroup_4() { return cGroup_4; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_0() { return cINTTerminalRuleCall_4_0; }

		//("." INT)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"."
		public Keyword getFullStopKeyword_4_1_0() { return cFullStopKeyword_4_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_1_1() { return cINTTerminalRuleCall_4_1_1; }

		//"d"
		public Keyword getDKeyword_4_2() { return cDKeyword_4_2; }
	}

	public class ReferenceLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceLiteral");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ReferenceLiteral returns ecore::EString:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class IndexLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IndexLiteral returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private ModelElements pModel;
	private InteractorDeclarationElements pInteractorDeclaration;
	private AccessibleEntityElements pAccessibleEntity;
	private EntityElements pEntity;
	private ActorElements pActor;
	private ComponentElements pComponent;
	private EntityDeclarationElements pEntityDeclaration;
	private ActorDeclarationElements pActorDeclaration;
	private ActorAliasElements pActorAlias;
	private ComponentDeclarationElements pComponentDeclaration;
	private EventReceptionElements pEventReception;
	private FlowReceptionElements pFlowReception;
	private EventEmissionElements pEventEmission;
	private FlowEmissionElements pFlowEmission;
	private SignalDeclarationElements pSignalDeclaration;
	private EventDeclarationElements pEventDeclaration;
	private FlowDeclarationElements pFlowDeclaration;
	private BehaviorDeclarationElements pBehaviorDeclaration;
	private CauseElements pCause;
	private OnCauseElements pOnCause;
	private WhenCauseElements pWhenCause;
	private EffectElements pEffect;
	private AlwaysEffectElements pAlwaysEffect;
	private SetEffectElements pSetEffect;
	private TriggerEffectElements pTriggerEffect;
	private ExpressionElements pExpression;
	private DataTypeDeclarationElements pDataTypeDeclaration;
	private FieldElements pField;
	private DataTypeElements pDataType;
	private DataTypeBaseElements pDataTypeBase;
	private BooleanExpressionElements pBooleanExpression;
	private BooleanDisjonctionElements pBooleanDisjonction;
	private BooleanConjonctionElements pBooleanConjonction;
	private BooleanUnaryElements pBooleanUnary;
	private BooleanTerminalExpressionElements pBooleanTerminalExpression;
	private NumberExpressionElements pNumberExpression;
	private NumberCompoundExpressionElements pNumberCompoundExpression;
	private NumberSwitchExpressionNumberCaseElements pNumberSwitchExpressionNumberCase;
	private NumberAdditionElements pNumberAddition;
	private NumberMultiplicationElements pNumberMultiplication;
	private NumberPowerElements pNumberPower;
	private NumberUnaryElements pNumberUnary;
	private NumberTerminalExpressionElements pNumberTerminalExpression;
	private SymbolLiteralElements pSymbolLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private NumberLiteralElements pNumberLiteral;
	private TextLiteralElements pTextLiteral;
	private TimeLiteralElements pTimeLiteral;
	private ReferenceLiteralElements pReferenceLiteral;
	private IndexLiteralElements pIndexLiteral;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public LilGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.crubier.lil.Lil".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Model
	//Model:
	//	(interactors+=InteractorDeclaration | dataTypes+=DataTypeDeclaration)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Interactor
	//InteractorDeclaration:
	//	"interactor" name=ID ":" (entities+=EntityDeclaration | signals+=SignalDeclaration | behaviors+=BehaviorDeclaration)*;
	public InteractorDeclarationElements getInteractorDeclarationAccess() {
		return (pInteractorDeclaration != null) ? pInteractorDeclaration : (pInteractorDeclaration = new InteractorDeclarationElements());
	}
	
	public ParserRule getInteractorDeclarationRule() {
		return getInteractorDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Entities
	//AccessibleEntity:
	//	generic=("any" | "self" | "other" | "parent" | "child" | "all" | "actors") | specific=Entity;
	public AccessibleEntityElements getAccessibleEntityAccess() {
		return (pAccessibleEntity != null) ? pAccessibleEntity : (pAccessibleEntity = new AccessibleEntityElements());
	}
	
	public ParserRule getAccessibleEntityRule() {
		return getAccessibleEntityAccess().getRule();
	}

	//Entity:
	//	instance=[EntityDeclaration];
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Actor:
	//	instance=[ActorDeclaration];
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Component:
	//	instance=[ComponentDeclaration];
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//EntityDeclaration:
	//	ActorDeclaration | ComponentDeclaration;
	public EntityDeclarationElements getEntityDeclarationAccess() {
		return (pEntityDeclaration != null) ? pEntityDeclaration : (pEntityDeclaration = new EntityDeclarationElements());
	}
	
	public ParserRule getEntityDeclarationRule() {
		return getEntityDeclarationAccess().getRule();
	}

	//ActorDeclaration:
	//	"actor" name=ID;
	public ActorDeclarationElements getActorDeclarationAccess() {
		return (pActorDeclaration != null) ? pActorDeclaration : (pActorDeclaration = new ActorDeclarationElements());
	}
	
	public ParserRule getActorDeclarationRule() {
		return getActorDeclarationAccess().getRule();
	}

	//ActorAlias:
	//	source=Actor "as" remote=Actor;
	public ActorAliasElements getActorAliasAccess() {
		return (pActorAlias != null) ? pActorAlias : (pActorAlias = new ActorAliasElements());
	}
	
	public ParserRule getActorAliasRule() {
		return getActorAliasAccess().getRule();
	}

	//ComponentDeclaration:
	//	interactor=[InteractorDeclaration] name=ID ("with" aliases+=ActorAlias ("," aliases+=ActorAlias)*)?;
	public ComponentDeclarationElements getComponentDeclarationAccess() {
		return (pComponentDeclaration != null) ? pComponentDeclaration : (pComponentDeclaration = new ComponentDeclarationElements());
	}
	
	public ParserRule getComponentDeclarationRule() {
		return getComponentDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Signals
	//EventReception:
	//	instance=[EventDeclaration] ("from" source=Component)? | base="init";
	public EventReceptionElements getEventReceptionAccess() {
		return (pEventReception != null) ? pEventReception : (pEventReception = new EventReceptionElements());
	}
	
	public ParserRule getEventReceptionRule() {
		return getEventReceptionAccess().getRule();
	}

	//FlowReception:
	//	instance=[FlowDeclaration] ("from" source=Component)?;
	public FlowReceptionElements getFlowReceptionAccess() {
		return (pFlowReception != null) ? pFlowReception : (pFlowReception = new FlowReceptionElements());
	}
	
	public ParserRule getFlowReceptionRule() {
		return getFlowReceptionAccess().getRule();
	}

	//EventEmission:
	//	instance=[EventDeclaration] ("to" destination=Component)?;
	public EventEmissionElements getEventEmissionAccess() {
		return (pEventEmission != null) ? pEventEmission : (pEventEmission = new EventEmissionElements());
	}
	
	public ParserRule getEventEmissionRule() {
		return getEventEmissionAccess().getRule();
	}

	//FlowEmission:
	//	instance=[FlowDeclaration] ("to" destination=Component)?;
	public FlowEmissionElements getFlowEmissionAccess() {
		return (pFlowEmission != null) ? pFlowEmission : (pFlowEmission = new FlowEmissionElements());
	}
	
	public ParserRule getFlowEmissionRule() {
		return getFlowEmissionAccess().getRule();
	}

	//SignalDeclaration:
	//	EventDeclaration | FlowDeclaration;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//EventDeclaration:
	//	type=DataType "event" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
	public EventDeclarationElements getEventDeclarationAccess() {
		return (pEventDeclaration != null) ? pEventDeclaration : (pEventDeclaration = new EventDeclarationElements());
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}

	//FlowDeclaration:
	//	type=DataType "flow" name=ID ("from" source=AccessibleEntity)? ("to" destinations+=AccessibleEntity)*;
	public FlowDeclarationElements getFlowDeclarationAccess() {
		return (pFlowDeclaration != null) ? pFlowDeclaration : (pFlowDeclaration = new FlowDeclarationElements());
	}
	
	public ParserRule getFlowDeclarationRule() {
		return getFlowDeclarationAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Behaviors
	//BehaviorDeclaration:
	//	cause=Cause ":" effects+=Effect+;
	public BehaviorDeclarationElements getBehaviorDeclarationAccess() {
		return (pBehaviorDeclaration != null) ? pBehaviorDeclaration : (pBehaviorDeclaration = new BehaviorDeclarationElements());
	}
	
	public ParserRule getBehaviorDeclarationRule() {
		return getBehaviorDeclarationAccess().getRule();
	}

	//Cause:
	//	OnCause | WhenCause;
	public CauseElements getCauseAccess() {
		return (pCause != null) ? pCause : (pCause = new CauseElements());
	}
	
	public ParserRule getCauseRule() {
		return getCauseAccess().getRule();
	}

	//OnCause:
	//	"on" event=EventReception ("if" guard=Expression)?;
	public OnCauseElements getOnCauseAccess() {
		return (pOnCause != null) ? pOnCause : (pOnCause = new OnCauseElements());
	}
	
	public ParserRule getOnCauseRule() {
		return getOnCauseAccess().getRule();
	}

	//WhenCause:
	//	"when" condition=Expression ("if" guard=Expression)?;
	public WhenCauseElements getWhenCauseAccess() {
		return (pWhenCause != null) ? pWhenCause : (pWhenCause = new WhenCauseElements());
	}
	
	public ParserRule getWhenCauseRule() {
		return getWhenCauseAccess().getRule();
	}

	//Effect:
	//	AlwaysEffect | SetEffect | TriggerEffect;
	public EffectElements getEffectAccess() {
		return (pEffect != null) ? pEffect : (pEffect = new EffectElements());
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//AlwaysEffect:
	//	"always" target=FlowEmission "=" value=Expression;
	public AlwaysEffectElements getAlwaysEffectAccess() {
		return (pAlwaysEffect != null) ? pAlwaysEffect : (pAlwaysEffect = new AlwaysEffectElements());
	}
	
	public ParserRule getAlwaysEffectRule() {
		return getAlwaysEffectAccess().getRule();
	}

	//SetEffect:
	//	"set" target=FlowEmission "=" value=Expression;
	public SetEffectElements getSetEffectAccess() {
		return (pSetEffect != null) ? pSetEffect : (pSetEffect = new SetEffectElements());
	}
	
	public ParserRule getSetEffectRule() {
		return getSetEffectAccess().getRule();
	}

	//TriggerEffect:
	//	"trigger" target=EventEmission "=" value=Expression;
	public TriggerEffectElements getTriggerEffectAccess() {
		return (pTriggerEffect != null) ? pTriggerEffect : (pTriggerEffect = new TriggerEffectElements());
	}
	
	public ParserRule getTriggerEffectRule() {
		return getTriggerEffectAccess().getRule();
	}

	//Expression:
	//	NumberExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Structure
	//DataTypeDeclaration:
	//	"data" "type" name=ID ":" fields+=Field*;
	public DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return (pDataTypeDeclaration != null) ? pDataTypeDeclaration : (pDataTypeDeclaration = new DataTypeDeclarationElements());
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}

	//Field:
	//	type=DataType name=ID;
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//DataType:
	//	compound=[DataTypeDeclaration] | base=DataTypeBase;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//DataTypeBase:
	//	"void" | "symbol" | "number" | "text" | "time" | "reference";
	public DataTypeBaseElements getDataTypeBaseAccess() {
		return (pDataTypeBase != null) ? pDataTypeBase : (pDataTypeBase = new DataTypeBaseElements());
	}
	
	public ParserRule getDataTypeBaseRule() {
		return getDataTypeBaseAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Expressions
	////We do not use xbase because we only need a small subset of it in order to be able to generate c code and in order to simplify the language
	////Booleans
	//BooleanExpression:
	//	BooleanDisjonction;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//BooleanDisjonction returns BooleanExpression:
	//	BooleanConjonction (({BooleanDisjonction.left=current} "or") right=BooleanConjonction)*;
	public BooleanDisjonctionElements getBooleanDisjonctionAccess() {
		return (pBooleanDisjonction != null) ? pBooleanDisjonction : (pBooleanDisjonction = new BooleanDisjonctionElements());
	}
	
	public ParserRule getBooleanDisjonctionRule() {
		return getBooleanDisjonctionAccess().getRule();
	}

	//BooleanConjonction returns BooleanExpression:
	//	BooleanUnary (({BooleanConjonction.left=current} "and") right=BooleanUnary)*;
	public BooleanConjonctionElements getBooleanConjonctionAccess() {
		return (pBooleanConjonction != null) ? pBooleanConjonction : (pBooleanConjonction = new BooleanConjonctionElements());
	}
	
	public ParserRule getBooleanConjonctionRule() {
		return getBooleanConjonctionAccess().getRule();
	}

	//BooleanUnary returns BooleanExpression:
	//	BooleanTerminalExpression | ({BooleanNegation} "!") operand=BooleanTerminalExpression;
	public BooleanUnaryElements getBooleanUnaryAccess() {
		return (pBooleanUnary != null) ? pBooleanUnary : (pBooleanUnary = new BooleanUnaryElements());
	}
	
	public ParserRule getBooleanUnaryRule() {
		return getBooleanUnaryAccess().getRule();
	}

	//BooleanTerminalExpression returns BooleanExpression:
	//	"(" BooleanExpression ")" | {BooleanLiteral} value=BooleanLiteral;
	public BooleanTerminalExpressionElements getBooleanTerminalExpressionAccess() {
		return (pBooleanTerminalExpression != null) ? pBooleanTerminalExpression : (pBooleanTerminalExpression = new BooleanTerminalExpressionElements());
	}
	
	public ParserRule getBooleanTerminalExpressionRule() {
		return getBooleanTerminalExpressionAccess().getRule();
	}

	////Numbers
	//NumberExpression:
	//	NumberCompoundExpression;
	public NumberExpressionElements getNumberExpressionAccess() {
		return (pNumberExpression != null) ? pNumberExpression : (pNumberExpression = new NumberExpressionElements());
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//NumberCompoundExpression returns NumberExpression:
	//	NumberAddition | {NumberIfExpression} "if" "(" if=BooleanExpression ")" then=NumberAddition ("else"
	//	else=NumberAddition)? | {NumberSwitchExpression} "switch" "(" switch=NumberExpression ")" =>
	//	cases+=NumberSwitchExpressionNumberCase+ ("default" ":" default=NumberExpression)?;
	public NumberCompoundExpressionElements getNumberCompoundExpressionAccess() {
		return (pNumberCompoundExpression != null) ? pNumberCompoundExpression : (pNumberCompoundExpression = new NumberCompoundExpressionElements());
	}
	
	public ParserRule getNumberCompoundExpressionRule() {
		return getNumberCompoundExpressionAccess().getRule();
	}

	//NumberSwitchExpressionNumberCase:
	//	"case" condition=NumberExpression ":" value=NumberExpression;
	public NumberSwitchExpressionNumberCaseElements getNumberSwitchExpressionNumberCaseAccess() {
		return (pNumberSwitchExpressionNumberCase != null) ? pNumberSwitchExpressionNumberCase : (pNumberSwitchExpressionNumberCase = new NumberSwitchExpressionNumberCaseElements());
	}
	
	public ParserRule getNumberSwitchExpressionNumberCaseRule() {
		return getNumberSwitchExpressionNumberCaseAccess().getRule();
	}

	//NumberAddition returns NumberExpression:
	//	NumberMultiplication (({NumberAddition.left=current} "+" | {NumberSubstraction.left=current} "-")
	//	right=NumberMultiplication)*;
	public NumberAdditionElements getNumberAdditionAccess() {
		return (pNumberAddition != null) ? pNumberAddition : (pNumberAddition = new NumberAdditionElements());
	}
	
	public ParserRule getNumberAdditionRule() {
		return getNumberAdditionAccess().getRule();
	}

	//NumberMultiplication returns NumberExpression:
	//	NumberPower (({NumberMultiplication.left=current} "*" | {NumberDivision.left=current} "/" |
	//	{NumberModulo.left=current} "%") right=NumberPower)*;
	public NumberMultiplicationElements getNumberMultiplicationAccess() {
		return (pNumberMultiplication != null) ? pNumberMultiplication : (pNumberMultiplication = new NumberMultiplicationElements());
	}
	
	public ParserRule getNumberMultiplicationRule() {
		return getNumberMultiplicationAccess().getRule();
	}

	//NumberPower returns NumberExpression:
	//	NumberUnary (({NumberPower.left=current} "^") right=NumberUnary)*;
	public NumberPowerElements getNumberPowerAccess() {
		return (pNumberPower != null) ? pNumberPower : (pNumberPower = new NumberPowerElements());
	}
	
	public ParserRule getNumberPowerRule() {
		return getNumberPowerAccess().getRule();
	}

	//NumberUnary returns NumberExpression:
	//	NumberTerminalExpression | ({NumberOpposition} "-") operand=NumberTerminalExpression;
	public NumberUnaryElements getNumberUnaryAccess() {
		return (pNumberUnary != null) ? pNumberUnary : (pNumberUnary = new NumberUnaryElements());
	}
	
	public ParserRule getNumberUnaryRule() {
		return getNumberUnaryAccess().getRule();
	}

	//NumberTerminalExpression returns NumberExpression:
	//	"(" NumberExpression ")" | {NumberLiteral} value=NumberLiteral | {NumberFunctionExpression} function=ID ("("
	//	arguments+=NumberExpression ("," arguments+=NumberExpression)* ")")?;
	public NumberTerminalExpressionElements getNumberTerminalExpressionAccess() {
		return (pNumberTerminalExpression != null) ? pNumberTerminalExpression : (pNumberTerminalExpression = new NumberTerminalExpressionElements());
	}
	
	public ParserRule getNumberTerminalExpressionRule() {
		return getNumberTerminalExpressionAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////Data type rules, are almost terminals
	//SymbolLiteral returns ecore::EString:
	//	ID;
	public SymbolLiteralElements getSymbolLiteralAccess() {
		return (pSymbolLiteral != null) ? pSymbolLiteral : (pSymbolLiteral = new SymbolLiteralElements());
	}
	
	public ParserRule getSymbolLiteralRule() {
		return getSymbolLiteralAccess().getRule();
	}

	//BooleanLiteral returns ecore::EBoolean:
	//	"true" | "yes" | "false" | "no";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral returns ecore::EDouble:
	//	INT ("." INT)?;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//TextLiteral returns ecore::EString:
	//	STRING;
	public TextLiteralElements getTextLiteralAccess() {
		return (pTextLiteral != null) ? pTextLiteral : (pTextLiteral = new TextLiteralElements());
	}
	
	public ParserRule getTextLiteralRule() {
		return getTextLiteralAccess().getRule();
	}

	//TimeLiteral returns ecore::ELong:
	//	INT "ms" | INT ("." INT)? "s" | INT ("." INT)? "m" | INT ("." INT)? "h" | INT ("." INT)? "d";
	public TimeLiteralElements getTimeLiteralAccess() {
		return (pTimeLiteral != null) ? pTimeLiteral : (pTimeLiteral = new TimeLiteralElements());
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}

	//ReferenceLiteral returns ecore::EString:
	//	ID;
	public ReferenceLiteralElements getReferenceLiteralAccess() {
		return (pReferenceLiteral != null) ? pReferenceLiteral : (pReferenceLiteral = new ReferenceLiteralElements());
	}
	
	public ParserRule getReferenceLiteralRule() {
		return getReferenceLiteralAccess().getRule();
	}

	//IndexLiteral returns ecore::EInt:
	//	INT;
	public IndexLiteralElements getIndexLiteralAccess() {
		return (pIndexLiteral != null) ? pIndexLiteral : (pIndexLiteral = new IndexLiteralElements());
	}
	
	public ParserRule getIndexLiteralRule() {
		return getIndexLiteralAccess().getRule();
	}

	//// Terminals
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
